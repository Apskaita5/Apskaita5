<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <system.diagnostics>
        <sources>
            <!-- This section defines the logging configuration for My.Application.Log -->
            <source name="DefaultSource" switchName="DefaultSwitch">
                <listeners>
                    <add name="FileLog"/>
                    <!-- Uncomment the below section to write to the Application Event Log -->
                    <!--<add name="EventLog"/>-->
                </listeners>
            </source>
        </sources>
        <switches>
            <add name="DefaultSwitch" value="Information" />
        </switches>
        <sharedListeners>
            <add name="FileLog"
                 type="Microsoft.VisualBasic.Logging.FileLogTraceListener, Microsoft.VisualBasic, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL" 
                 initializeData="FileLogWriter"/>
            <!-- Uncomment the below section and replace APPLICATION_NAME with the name of your application to write to the Application Event Log -->
            <!--<add name="EventLog" type="System.Diagnostics.EventLogTraceListener" initializeData="APPLICATION_NAME"/> -->
        </sharedListeners>
    </system.diagnostics>

  <connectionStrings>
    <!-- Connection string for SQL server user that is used for all the SQL communication 
    if appSettings key SecuritySystemInternal is set to TRUE. It couses users to be
    authenticated only against security database without impersonating in SQL server.
    In case you use SQLite file "server", use **DBName tag to replace file name without extension. -->
    <add name="SqlConnectionString" connectionString="Server=127.0.0.1;Port=3306;user id=root;password=password;CharSet=cp1257"/>
  </connectionStrings>

  <appSettings>

    <!-- A name of the service in URL -->
    <add key="ExternalServiceName" value="Apskaita5Remoting" />
    <!-- A port of the service for external access -->
    <add key="ExternalServicePort" value="8080" />
    <!-- Whether only connections from local network are accepted -->
    <add key="OnlyLocalNetwork" value="TRUE" />
    
    <!-- Key needed by CSLA framework -->
    <add key="CslaAuthentication" value="Csla" />
    <!-- Address of the SQL server, where the business objects are persisted.
    Leave empty string if appSettings key SecuritySystemInternal is set to TRUE.-->
    <add key="SQLServerName" value="127.0.0.1" />
    <!-- Port of the SQL server, where the business objects are persisted. 
    Leave empty string if appSettings key SecuritySystemInternal is set to TRUE.-->
    <add key="SQLServerPort" value="3306" />
    <!-- Port of the SQL server, where the business objects are persisted. 
    See AccDataAccessLayer.DataAccessTypes.ConvertSqlServerTypeHumanReadable for possible values.-->
    <add key="SQLServerType" value="MySQL serveris" />
    <!-- Default SQL server user host, when users are impersonating in SQL server 
    (localhost is recommended due to security reasons). 
    Leave empty string if appSettings key SecuritySystemInternal is set to TRUE.-->
    <add key="SQLDefaultUserHost" value="localhost" />
    <!-- Name of the key is self explanatory.-->
    <add key="SQLQueryTimeOut" value="5000" />
    <!-- In case you use SQLite file server, set common password for access to DB files. 
    Leave empty otherwise.-->
    <add key="SQLitePassword" value="" />
    <!-- If exists (value doesn't matter) users cannot change their profile data 
    in security database (real name, position, signature image, etc.). -->
    <add key="DenyUserProfileUpdate" value="TRUE" />
    <!-- Base name of database that is used with numbers for companies' databases. 
    e.g. if convention is "accounting" then databases will be named "accounting01", 
    "accounting02" etc. Could be dependent on host service provider policy.
    Should be at least 4 symbols, reccomended at least 6 symbols. Security database 
    is named by replacing last 3 symbols with "sec" -->
    <add key="DatabaseNamingConvention" value="financial" />
    <!-- Name of the key is self explanatory.-->
    <add key="UseSSLForSQL" value="FALSE" />
    <!-- Name of the key is self explanatory.-->
    <add key="SSLCertificateFile" value="" />
    <!-- Name of the key is self explanatory.-->
    <add key="SSLCertificatePassword" value="" />
    <!-- Name of the key is self explanatory.-->
    <add key="SSLCertificateInstalled" value="FALSE" />
    <!-- When set to TRUE, the program does not issue grant statements 
    when administering users (only updates security database). Should only
    be set to TRUE if hosting servise provider doesn't allow direct grants 
    or SecuritySystemInternal is set to TRUE. -->
    <add key="CannotSetSqlGrants" value="TRUE" />
    <!-- Defines method of user authentification. 
    If set to TRUE, users are only authenticated against security database and aren't 
    impersonating in SQL server. In this case all the communication with SQL server is 
    performed on behalf of the single user that is specified by setting SqlConnectionString.
    If set to FALSE, users are impersonating in SQL server, i.e. each program user is also 
    a SQL server user. In this case security database IS STILL used, but only as a 
    convenient way to get user's roles. -->
    <add key="SecuritySystemInternal" value="TRUE" />
    <add key="ApplicationServerSecret" value="674dgf687t8re745vgfds4fsdt86f7h" />
  </appSettings>
  
</configuration>
