<?xml version="1.0" standalone="yes"?>
<NewDataSet>
  <MySQL_Statement>
    <Key>GetCompanyByDatabase</Key>
    <Statement>SELECT i.I_Pavadinimas, i.I_Kodas FROM **DBName.imone i;</Statement>
    <Objects>Administration.DatabaseInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CompanyInsert</Key>
    <Statement>INSERT INTO Imone(I_Kodas, I_Pavadinimas, I_PVM_kodas, I_Mail, I_Vadas, I_SD, HeadPersonSignature, NumbersInInvoice, AddDateToInvoiceNumber, DefaultInvoiceMadeContent, DefaultInvoiceReceivedContent, AccountClassPrefix11, AccountClassPrefix12, AccountClassPrefix21, AccountClassPrefix22, AccountClassPrefix31, AccountClassPrefix32, AccountClassPrefix41, AccountClassPrefix42, AccountClassPrefix51, AccountClassPrefix52, AccountClassPrefix61, AccountClassPrefix62, DefaultTaxNpdFormula, I_Adresas, I_Banko_sask, I_Bankas, BankSWIFT, BankAddress, I_Koordinates, InvoiceInfoLine, MeasureUnitInvoiceMade, MeasureUnitInvoiceReceived, DiscountName, HeadTitle, AddDateToTillIncomeOrderNumber, AddDateToTillSpendingsOrderNumber, BaseCurrency, Accountant, Cashier) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF, ?AG, ?AH, ?AI, ?AJ, ?AK, ?AL, ?AM, ?AN, ?AO, ?AQ, ?AP, ?AR, ?AT, ?AU, ?AV, ?AZ, ?AW, ?BA, ?BB, ?BC, ?BD, ?BE, ?BF, ?BG, ?BH, ?BI, ?BJ, ?BK, ?BL, ?BM, ?BN, ?BO, ?BQ, ?BP);</Statement>
    <Objects>General.Company</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CompanyUpdate</Key>
    <Statement>UPDATE Imone SET I_Kodas=?AA, I_Pavadinimas=?AB, I_PVM_kodas=?AC, I_Mail=?AD, I_Vadas=?AE, I_SD=?AF, HeadPersonSignature=?AG, NumbersInInvoice=?AH, AddDateToInvoiceNumber=?AI, DefaultInvoiceMadeContent=?AJ, DefaultInvoiceReceivedContent=?AK, AccountClassPrefix11=?AL, AccountClassPrefix12=?AM, AccountClassPrefix21=?AN, AccountClassPrefix22=?AO, AccountClassPrefix31=?AQ, AccountClassPrefix32=?AP, AccountClassPrefix41=?AR, AccountClassPrefix42=?AT, AccountClassPrefix51=?AU, AccountClassPrefix52=?AV, AccountClassPrefix61=?AZ, AccountClassPrefix62=?AW, DefaultTaxNpdFormula=?BA, MeasureUnitInvoiceReceived=?BJ, AddDateToTillIncomeOrderNumber=?BM, AddDateToTillSpendingsOrderNumber=?BN, Accountant=?BQ, Cashier=?BP;</Statement>
    <Objects>General.Company</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>ShowCharSetDir</Key>
    <Statement>SHOW VARIABLES LIKE 'character_sets_dir';</Statement>
    <Objects>Administration.CharSetDir</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>GetConsolidatedReportForm</Key>
    <Statement>SELECT f.Nr, f.Pav, f.Lev, 0 FROM f_strukt f WHERE f.Typ=?FC ORDER BY f.Nr;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>GetAccountsTurnoverList</Key>
    <Statement>SELECT CAST(s.Saskaitosnr AS CHAR), s.Saskaita, s.Rusis, (SELECT SUM(d.Op_suma) FROM bzdata d, bz b WHERE d.Op_tipas='Debetas' AND d.Op_saskaita=s.SaskaitosNr AND b.Op_ID=d.Op_ID_BZ AND b.Op_data&lt;?Nuo) As DL1, (SELECT SUM(d.Op_suma) FROM bzdata d, bz b WHERE d.Op_tipas='Kreditas' AND d.Op_saskaita=s.SaskaitosNr AND b.Op_ID=d.Op_ID_BZ AND b.Op_data&lt;?Nuo) As KL1, (SELECT SUM(d.Op_suma) FROM bzdata d, bz b WHERE d.Op_tipas='Debetas' AND d.Op_saskaita=s.SaskaitosNr AND b.Op_ID=d.Op_ID_BZ AND b.Op_data&gt;=?Nuo AND b.Op_data&lt;=?Iki) As DL2, (SELECT SUM(d.Op_suma) FROM bzdata d, bz b WHERE d.Op_tipas='Kreditas' AND d.Op_saskaita=s.SaskaitosNr AND b.Op_ID=d.Op_ID_BZ AND b.Op_data&gt;=?Nuo AND b.Op_data&lt;=?Iki) As KL2 FROM saskaitupl s ORDER BY CAST(s.Saskaitosnr AS CHAR);</Statement>
    <Objects>General.AccountTurnoverInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>GetClosingItems</Key>
    <Statement>SELECT d.Op_tipas, d.Op_saskaita, d.Op_suma FROM bzdata d, bz b WHERE b.Op_ID=d.Op_ID_BZ AND b.Op_dok_rusis='uz' AND (LEFT(CAST(d.Op_saskaita AS CHAR),1)='5' OR LEFT(CAST(d.Op_saskaita AS CHAR),1)='6') AND b.Op_data=?DT ORDER BY CAST(d.Op_saskaita AS CHAR);</Statement>
    <Objects>General.AccountTurnoverInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>GetAccountList</Key>
    <Statement>SELECT s.Saskaitosnr, s.Saskaita, s.Rusis,  f.ID, f.Name FROM saskaitupl s LEFT JOIN FinancialStatementsStructure f ON f.ID = s.fs_id ORDER BY CAST(s.Saskaitosnr AS CHAR);</Statement>
    <Objects>HelperLists.AccountInfoList, General.AccountList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertAccount</Key>
    <Statement>INSERT INTO saskaitupl(Saskaitosnr, Saskaita, Rusis, fs_id) VALUES(?SN, ?SP, ?CM, ?FD);</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccount</Key>
    <Statement>UPDATE saskaitupl SET Saskaitosnr=?SN, Saskaita=?SP, fs_id=?FD, Rusis=?CM WHERE Saskaitosnr=?TN ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>AccountWasUsed</Key>
    <Statement>SELECT * FROM (SELECT 'AccumulativeCosts' AS RowType, 0 AS ObjectID, a.ID AS OperationID, b.Op_Data AS OperationDate FROM AccumulativeCosts a LEFT JOIN bz b ON b.Op_ID=a.ID WHERE a.AccountCosts=?CD OR a.AccountAccumulatedCosts=?CD OR a.AccountDistributedCosts=?CD LIMIT 1) AS Used UNION SELECT * FROM (SELECT 'HolidayPayReserves' AS RowType, 0 AS ObjectID, a.ID AS OperationID, b.Op_Data AS OperationDate FROM HolidayPayReserves a LEFT JOIN bz b ON b.Op_ID=a.ID WHERE a.AccountCosts=?CD OR a.AccountReserve=?CD LIMIT 1) AS Used UNION SELECT * FROM (SELECT 'AdvanceReports', 0, a.ID, b.Op_Data FROM AdvanceReports a LEFT JOIN bz b ON b.Op_ID=a.ID LEFT JOIN apyskaitos c ON c.BZ_ID=a.ID AND (c.Sask=?CD OR c.PVMSask=?CD OR c.AccountCurrencyRateChangeEffect=?CD) WHERE a.Account=?CD OR NOT c.ID IS NULL LIMIT 1) AS Used UNION SELECT * FROM (SELECT 'Asmenys', a.ID, 0, null FROM asmenys a WHERE a.B_Kor=?CD OR a.B_Kor_Tiek=?CD LIMIT 1) AS Used UNION SELECT * FROM (SELECT 'BankOperations', 0, a.ParentID, b.Op_data FROM BankOperations a LEFT JOIN bz b ON b.Op_ID=a.ParentID WHERE a.AccountCurrencyRateChangeImpact=?CD OR a.AccountBankCurrencyConversionCosts=?CD LIMIT 1) AS Used UNION SELECT * FROM (SELECT 'bzdata', 0, a.Op_ID_BZ, b.Op_data FROM bzdata a LEFT JOIN bz b ON b.Op_ID=a.Op_ID_BZ WHERE a.Op_saskaita=?CD LIMIT 1) AS Used UNION SELECT * FROM (SELECT 'CashAccounts', a.ID, 0, null FROM CashAccounts a WHERE a.Account=?CD OR a.BankFeeCostsAccount=?CD LIMIT 1) AS Used UNION SELECT * FROM (SELECT 'CompanyAccounts', 0 AS ObjectID, 0, null FROM CompanyAccounts a WHERE a.AccountValue=?CD LIMIT 1) AS Used UNION SELECT * FROM (SELECT 'du_ziniarastis', 0, a.ID, b.Op_data FROM du_ziniarastis a LEFT JOIN bz b ON b.Op_ID=a.ID WHERE a.Saskaita=?CD LIMIT 1) AS Used UNION SELECT * FROM (SELECT 'goods', a.ID, 0, null FROM goods a WHERE a.AccountSalesNetCosts=?CD OR a.AccountPurchases=?CD OR a.AccountDiscounts=?CD OR a.AccountValueReduction=?CD LIMIT 1) AS Used UNION SELECT * FROM (SELECT 'goodscomplexoperations', 0, a.ID, a.OperationDate FROM goodscomplexoperations a WHERE a.AccountOperation=?CD LIMIT 1) AS Used UNION SELECT * FROM (SELECT 'goodsoperations', a.GoodsID, a.ID, a.OperationDate FROM goodsoperations a WHERE a.AccountOperation=?CD LIMIT 1) AS Used UNION SELECT * FROM (SELECT 'goodsaccounts', a.GoodsID, a.ID, a.ChangeDate FROM goodsaccounts a WHERE a.AccountValue=?CD LIMIT 1) AS Used UNION SELECT * FROM (SELECT 'InvoicesMade', 0, a.ID, b.Op_data FROM InvoicesMade a LEFT JOIN bz b ON b.Op_ID=a.ID LEFT JOIN sfd c ON c.SF_ID=a.ID AND (c.P_Sas=?CD OR c.A_Sas=?CD OR c.AccountDiscount=?CD) WHERE a.AccountPayer=?CD OR NOT c.ID IS NULL LIMIT 1) AS Used UNION SELECT * FROM (SELECT 'InvoicesReceived', 0, a.ID, b.Op_data FROM InvoicesReceived a LEFT JOIN bz b ON b.Op_ID=a.ID LEFT JOIN sfg c ON c.BZ_ID=a.ID AND (c.PVM_S=?CD OR c.Sanaud=?CD) WHERE a.AccountSupplier=?CD OR a.IndirectVatAccount=?CD OR a.IndirectVatCostsAccount=?CD OR NOT c.ID IS NULL LIMIT 1) AS Used UNION SELECT * FROM (SELECT 'kalkuliac_d', a.K_ID, 0, null FROM kalkuliac_d a WHERE a.Sask=?CD LIMIT 1) AS Used UNION SELECT * FROM (SELECT 'kio', 0, a.BZ_ID, b.Op_data FROM kio a LEFT JOIN bz b ON b.Op_ID=a.BZ_ID WHERE a.AccountCurrencyRateChangeImpact=?CD LIMIT 1) AS Used UNION SELECT * FROM (SELECT 'kpo', 0, a.BZ_ID, b.Op_data FROM kpo a LEFT JOIN bz b ON b.Op_ID=a.BZ_ID WHERE a.AccountCurrencyRateChangeImpact=?CD LIMIT 1) AS Used UNION SELECT * FROM (SELECT 'OffsetItems', 0, a.ParentID, b.Op_data FROM OffsetItems a LEFT JOIN bz b ON b.Op_ID=a.ParentID WHERE a.Account=?CD OR a.AccountCurrencyRateChangeImpact=?CD LIMIT 1) AS Used UNION SELECT * FROM (SELECT 'Paslaugos', a.ID, 0, null FROM Paslaugos a WHERE a.P_Sask=?CD OR a.S_Sask=?CD OR a.AccountPurchase=?CD OR a.AccountVatPurchase=?CD LIMIT 1) AS Used UNION SELECT * FROM (SELECT 'Tipines_data', a.T_ID, 0, null FROM Tipines_data a WHERE a.T_saskaita=?CD LIMIT 1) AS Used UNION SELECT * FROM (SELECT 'Turtas', a.ID, 0, null FROM Turtas a WHERE a.Saskaita=?CD OR a.AccountAmortization=?CD OR a.AccountValueIncrease=?CD OR a.AccountValueDecrease=?CD OR a.AccountRevaluedPortionAmmortization=?CD LIMIT 1) AS Used UNION SELECT * FROM (SELECT 'Turtas_op', a.T_ID, a.ID, a.OperationDate FROM Turtas_op a WHERE a.AccountCorresponding=?CD LIMIT 1) AS Used UNION SELECT * FROM (SELECT 'warehouses', a.ID, 0, null FROM warehouses a WHERE a.WarehouseAccount=?CD LIMIT 1) AS Used;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteAccount</Key>
    <Statement>DELETE FROM saskaitupl WHERE saskaitupl.Saskaitosnr=?NR ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>AccountsExist</Key>
    <Statement>SELECT (SELECT COUNT(s.Saskaitosnr) FROM saskaitupl s), (SELECT COUNT(f.Name) FROM FinancialStatementsStructure f);</Statement>
    <Objects>General.SetupTypicalAccountsCommand</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>GetPersonsGroups</Key>
    <Statement>SELECT p.ID, p.Name, COUNT(a.ID) FROM persons_group p LEFT JOIN persons_group_assignments a ON a.GroupID=p.ID GROUP BY p.ID ORDER BY p.Name;</Statement>
    <Objects>General.PersonGroupList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>GetPersonsBelongToGroup</Key>
    <Statement>SELECT COUNT(p.ID) FROM persons_group_assignments p WHERE p.GroupID=?GD ;</Statement>
    <Objects>General.PersonGroup</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeletePersonsGroup</Key>
    <Statement>DELETE FROM persons_group WHERE persons_group.ID=?GD ;</Statement>
    <Objects>General.PersonGroup</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertPersonsGroup</Key>
    <Statement>INSERT INTO persons_group(Name) VALUES(?GN);</Statement>
    <Objects>General.PersonGroup</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdatePersonsGroup</Key>
    <Statement>UPDATE persons_group SET Name=?GN WHERE ID=?GD ;</Statement>
    <Objects>General.PersonGroup</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>GetOldUserRights</Key>
    <Statement>SELECT v.Vardas, v.S_PL, v.Nust, v.Imone, v.Asm, v.Kas, v.I_S, v.G_S, v.Darb, v.Ilg, v.Prek, v.Bendr FROM vartotojai v;</Statement>
    <Objects>Administration.DatabaseTableErrorList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateUsersTable</Key>
    <Statement>ALTER TABLE `vartotojai` MODIFY COLUMN `ID` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT, DROP COLUMN `Vardas`, DROP COLUMN `S_PL`, DROP COLUMN `Nust`, DROP COLUMN `Imone`, DROP COLUMN `Asm`, DROP COLUMN `Kas`, DROP COLUMN `I_S`, DROP COLUMN `G_S`, DROP COLUMN `Darb`, DROP COLUMN `Ilg`, DROP COLUMN `Prek`, DROP COLUMN `Bendr`, DROP COLUMN `Hostas`, ADD COLUMN `Username` CHAR(255) NOT NULL AFTER `ID`,  ADD COLUMN `Privilege` CHAR(100) NOT NULL AFTER `Username`,  ADD COLUMN `PrivilegeLvl` TINYINT UNSIGNED NOT NULL AFTER `Privilege`;</Statement>
    <Objects>Administration.DatabaseTableErrorList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>ClearUsersTable</Key>
    <Statement>DELETE FROM vartotojai WHERE vartotojai.ID &gt; 0;</Statement>
    <Objects>Administration.DatabaseTableErrorList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>AddPersonGroupAssignment</Key>
    <Statement>INSERT INTO persons_group_assignments(PersonsID, GroupID) VALUES((SELECT a.ID FROM asmenys a WHERE a.Kodas=?PD), ?GD);</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>GetPersonsWorkers</Key>
    <Statement>SELECT a.Kodas, a.SP_kodas FROM asmenys a WHERE a.Grupe='Darbuotojai';</Statement>
    <Objects>Administration.DatabaseTableErrorList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeletePerson</Key>
    <Statement>DELETE FROM asmenys WHERE asmenys.ID=?PD ;</Statement>
    <Objects>General.Person</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdatePerson</Key>
    <Statement>UPDATE asmenys SET Pavad=?PN, Kodas=?PC, Adresas=?PA, SP_kodas=?PV, B_Sask=?PT, Bank=?PB, B_Kor=?PQ, E_Mail=?PE, SD_kodas=?PS, B_Kor_Tiek=?PW, ContactInfo=?AI, IsObsolete=?AJ, InternalCode=?AK, IsNaturalPerson=?AL, LanguageCode=?AM, CurrencyCode=?AN, IsClient=?IC, IsSupplier=?IP, IsWorker=?IW, UpdateDate=?UD WHERE ID=?PD ;</Statement>
    <Objects>General.Person</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>GetPersonExists</Key>
    <Statement>SELECT COUNT(a.ID) FROM asmenys a WHERE LOWER(TRIM(a.Kodas))=LOWER(TRIM(?PC)) AND a.ID &lt;&gt; ?PD ;</Statement>
    <Objects>General.Person</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>AddPerson</Key>
    <Statement>INSERT INTO asmenys(Pavad, Kodas, Adresas, SP_kodas, B_Sask, Bank, B_Kor, E_Mail, B_Kor_Tiek, SD_kodas, ContactInfo, IsObsolete, InternalCode, IsNaturalPerson, LanguageCode, CurrencyCode, IsClient, IsSupplier, IsWorker, InsertDate, UpdateDate) VALUES(?PN, ?PC, ?PA, ?PV, ?PT, ?PB, ?PQ, ?PE, ?PW, ?PS, ?AI, ?AJ, ?AK, ?AL, ?AM, ?AN, ?IC, ?IP, ?IW, ?UD, ?UD);</Statement>
    <Objects>General.Person</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>PersonCanBeDeleted</Key>
    <Statement>SELECT (SELECT COUNT(b.Op_ID) FROM bz b WHERE b.Op_analitika=?PD) +
(SELECT COUNT(d.Op_ID_BZ) FROM bzdata d WHERE d.Op_ana=?PD),
(SELECT COUNT(c.ID) FROM darbuotojai_d c WHERE c.AK=?PD);</Statement>
    <Objects>General.Person</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeletePersonAssigment</Key>
    <Statement>DELETE FROM persons_group_assignments WHERE persons_group_assignments.ID=?GD ;</Statement>
    <Objects>General.PersonGroupAssignment</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertPersonAssigment</Key>
    <Statement>INSERT INTO persons_group_assignments(PersonsID, GroupID) VALUES(?PD, ?GD);</Statement>
    <Objects>General.PersonGroupAssignment</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteAllPersonAssignments</Key>
    <Statement>DELETE FROM persons_group_assignments WHERE persons_group_assignments.PersonsID=?PD ;</Statement>
    <Objects>General.Person</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertDocumentSerial</Key>
    <Statement>INSERT INTO serijos(Serijos_dok, Serija) VALUES(?SD, ?SR);</Statement>
    <Objects>Settings.DocumentSerial</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateDocumentSerial</Key>
    <Statement>UPDATE serijos SET Serijos_dok=?SD, Serija=?SR WHERE Serijos_ID=?SN ;</Statement>
    <Objects>Settings.DocumentSerial</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteDocumentSerial</Key>
    <Statement>DELETE FROM serijos WHERE serijos.Serijos_ID=?SN ;</Statement>
    <Objects>Settings.DocumentSerial</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchDocumentSerials</Key>
    <Statement>SELECT s.Serijos_ID, s.Serijos_dok, s.Serija, CASE WHEN LOWER(TRIM(s.Serijos_dok))=LOWER(TRIM(?KP)) THEN (SELECT COUNT(k.Serija) FROM kpo k WHERE LOWER(TRIM(k.Serija))=LOWER(TRIM(s.Serija))) ELSE CASE WHEN LOWER(TRIM(s.Serijos_dok))=LOWER(TRIM(?KI)) THEN (SELECT COUNT(k.BZ_ID) FROM kio k WHERE LOWER(TRIM(k.Serija))=LOWER(TRIM(s.Serija))) ELSE CASE WHEN LOWER(TRIM(s.Serijos_dok))=LOWER(TRIM(?SF)) THEN (SELECT COUNT(b.ID) FROM InvoicesMade b WHERE TRIM(UPPER(b.InvoiceSerial))=TRIM(UPPER(s.Serija))) ELSE CASE WHEN LOWER(TRIM(s.Serijos_dok))=LOWER(TRIM(?DS)) THEN (SELECT COUNT(d.AK) FROM darbuotojai_d d WHERE LOWER(TRIM(d.DS_Serija))=LOWER(TRIM(s.Serija))) ELSE 1 END END END END AS WasUsed FROM serijos s;</Statement>
    <Objects>Settings.DocumentSerialList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DocumentSerialExists1</Key>
    <Statement>SELECT COUNT(k.Serija) FROM kpo k WHERE k.Serija=?SR;</Statement>
    <Objects>Settings.DocumentSerialList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DocumentSerialExists2</Key>
    <Statement>SELECT COUNT(i.InvoiceSerial) FROM invoicesmade i WHERE UPPER(TRIM(i.InvoiceSerial))=UPPER(TRIM(?SR)) ;</Statement>
    <Objects>Settings.DocumentSerialList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CompanyFetch</Key>
    <Statement>SELECT C.I_Kodas, C.I_Pavadinimas, C.I_PVM_kodas, C.I_Mail, C.I_Vadas, C.I_SD, C.HeadPersonSignature, C.NumbersInInvoice, C.AddDateToInvoiceNumber, C.DefaultInvoiceMadeContent, C.DefaultInvoiceReceivedContent, C.AccountClassPrefix11, C.AccountClassPrefix12, C.AccountClassPrefix21, C.AccountClassPrefix22, C.AccountClassPrefix31, C.AccountClassPrefix32, C.AccountClassPrefix41, C.AccountClassPrefix42, C.AccountClassPrefix51, C.AccountClassPrefix52, C.AccountClassPrefix61, C.AccountClassPrefix62, C.DefaultTaxNpdFormula, C.MeasureUnitInvoiceReceived, C.AddDateToTillIncomeOrderNumber, C.AddDateToTillSpendingsOrderNumber, C.BaseCurrency, C.Accountant, C.Cashier FROM Imone C;</Statement>
    <Objects>General.Company</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLastClosing</Key>
    <Statement>SELECT MAX(b.Op_data) FROM bz b WHERE (b.Op_dok_rusis='uz' OR b.Op_dok_rusis='lik');</Statement>
    <Objects>Settings.CompanyInfo</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>BookEntryInsert</Key>
    <Statement>INSERT INTO bzdata(Op_ID_BZ, Op_tipas, Op_saskaita, Op_suma, Op_ana) VALUES(?AA, ?AB, ?AC, ?AD, ?AE);</Statement>
    <Objects>General.BookEntry</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>BookEntryClear</Key>
    <Statement>DELETE FROM bzdata WHERE bzdata.Op_ID_BZ=?BD ;</Statement>
    <Objects>General.JournalEntry</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>JournalEntryFetch</Key>
    <Statement>SELECT b.Op_data, b.Op_Dok, b.Op_turinys, b.Op_dok_rusis, b.InsertDate, b.UpdateDate, a.ID, a.Pavad, a.Kodas, a.Adresas, a.SP_kodas, a.B_Sask, a.Bank, a.B_Kor, a.B_Kor_Tiek, a.E_Mail, a.SD_kodas, a.ContactInfo, a.InternalCode, a.IsObsolete, a.IsNaturalPerson, a.LanguageCode, a.CurrencyCode, a.IsClient, a.IsSupplier, a.IsWorker FROM bz b LEFT JOIN asmenys a ON a.ID=b.Op_analitika WHERE b.Op_ID=?BD GROUP BY b.Op_ID;</Statement>
    <Objects>General.JournalEntry</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>BookEntriesFetch</Key>
    <Statement>SELECT b.Nr, b.Op_tipas, b.Op_saskaita, b.Op_suma, a.ID, a.Pavad, a.Kodas, a.Adresas, a.SP_kodas, a.B_Sask, a.Bank, a.B_Kor, a.B_Kor_Tiek, a.E_Mail, a.SD_kodas, a.ContactInfo, a.InternalCode, a.IsObsolete, a.IsNaturalPerson, a.LanguageCode, a.CurrencyCode, a.IsClient, a.IsSupplier, a.IsWorker FROM bzdata b LEFT JOIN asmenys a ON a.ID=b.Op_ana WHERE b.Op_ID_BZ=?BD GROUP BY b.Nr;</Statement>
    <Objects>General.JournalEntry, Documents.BankOperation, Documents.TillSpendingsOrder, Documents.TillIncomeOrder, Goods.GoodsComplexOperationProduction</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>JournalEntryInsert</Key>
    <Statement>INSERT INTO bz(Op_data, Op_Dok, Op_turinys, Op_dok_rusis, Op_analitika, Op_korespond, InsertDate, UpdateDate) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF, ?AG, ?AG);</Statement>
    <Objects>General.JournalEntry</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>JournalEntryUpdate</Key>
    <Statement>UPDATE bz SET Op_data=?AA, Op_Dok=?AB, Op_turinys=?AC, Op_dok_rusis=?AD, Op_analitika=?AE, Op_korespond=?AF, UpdateDate=?AG WHERE Op_ID=?BD ;</Statement>
    <Objects>General.JournalEntry</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>JournalEntryDelete</Key>
    <Statement>DELETE FROM bz WHERE bz.Op_ID=?BD ;</Statement>
    <Objects>General.JournalEntry</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>JournalEntryHasDependantDoc</Key>
    <Statement>SELECT 'Išm. gyv.' AS OperType, '' AS Info FROM d_kitos k WHERE k.BZ_ID=?BD UNION SELECT 'Oper. su IT', t.Turtas FROM turtas t, turtas_op d WHERE t.ID=d.T_ID AND d.JE_ID=?BD UNION SELECT 'IT įsig.', t.Turtas FROM turtas t WHERE t.Isigijimo_dok=?BD UNION SELECT 'Oper. su prekėmis', p.Preke FROM prekes p, prekes_op g WHERE p.ID=g.P_ID AND g.BZ_ID=?BD ;</Statement>
    <Objects>General.JournalEntry</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>JournalEntriesFetch1</Key>
    <Statement>SELECT b.Op_ID, b.Op_data, b.Op_Dok, b.Op_turinys, b.Op_analitika, a.Pavad, a.Kodas, b.Op_dok_rusis, CROUND(SUM(d.Op_suma)/2, 2), b.Op_korespond, a.SD_kodas FROM bz b LEFT JOIN bzdata d ON d.Op_ID_BZ=b.Op_ID LEFT JOIN asmenys a ON a.ID=b.Op_Analitika WHERE b.Op_data &gt;= ?DF AND b.Op_data &lt;= ?DT AND b.Op_turinys LIKE ?CF GROUP BY b.Op_ID ORDER BY b.Op_data;</Statement>
    <Objects>ActiveReports.JournalEntryInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>JournalEntriesFetch2</Key>
    <Statement>SELECT b.Op_ID, b.Op_data, b.Op_Dok, b.Op_turinys, b.Op_analitika, a.Pavad, a.Kodas, b.Op_dok_rusis, CROUND(SUM(d.Op_suma)/2, 2), b.Op_korespond, a.SD_kodas FROM bz b LEFT JOIN bzdata d ON d.Op_ID_BZ=b.Op_ID LEFT JOIN asmenys a ON a.ID=b.Op_Analitika WHERE b.Op_data &gt;= ?DF AND b.Op_data &lt;= ?DT AND b.Op_turinys LIKE ?CF AND b.Op_dok_rusis=?DP GROUP BY b.Op_ID ORDER BY b.Op_data;</Statement>
    <Objects>ActiveReports.JournalEntryInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>JournalEntriesFetch3</Key>
    <Statement>SELECT b.Op_ID, b.Op_data, b.Op_Dok, b.Op_turinys, b.Op_analitika, a.Pavad, a.Kodas, b.Op_dok_rusis, CROUND(SUM(d.Op_suma)/2, 2), b.Op_korespond, a.SD_kodas FROM bz b LEFT JOIN bzdata d ON d.Op_ID_BZ=b.Op_ID LEFT JOIN asmenys a ON a.ID=b.Op_Analitika WHERE b.Op_data &gt;= ?DF AND b.Op_data &lt;= ?DT AND b.Op_turinys LIKE ?CF AND b.Op_dok_rusis=?DP AND (b.Op_analitika=?PR OR d.Op_ana=?PR) GROUP BY b.Op_ID ORDER BY b.Op_data;</Statement>
    <Objects>ActiveReports.JournalEntryInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>JournalEntriesFetch4</Key>
    <Statement>SELECT b.Op_ID, b.Op_data, b.Op_Dok, b.Op_turinys, b.Op_analitika, a.Pavad, a.Kodas, b.Op_dok_rusis, CROUND(SUM(d.Op_suma)/2, 2), b.Op_korespond, a.SD_kodas FROM bz b LEFT JOIN bzdata d ON d.Op_ID_BZ=b.Op_ID LEFT JOIN asmenys a ON a.ID=b.Op_Analitika WHERE b.Op_data &gt;= ?DF AND b.Op_data &lt;= ?DT AND b.Op_turinys LIKE ?CF AND b.Op_dok_rusis=?DP AND b.Op_analitika=ANY(SELECT g.PersonsID FROM persons_group_assignments g WHERE g.GroupID=?GD) GROUP BY b.Op_ID ORDER BY b.Op_data;</Statement>
    <Objects>ActiveReports.JournalEntryInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>JournalEntriesFetch5</Key>
    <Statement>SELECT b.Op_ID, b.Op_data, b.Op_Dok, b.Op_turinys, b.Op_analitika, a.Pavad, a.Kodas, b.Op_dok_rusis, CROUND(SUM(d.Op_suma)/2, 2), b.Op_korespond, a.SD_kodas FROM bz b LEFT JOIN bzdata d ON d.Op_ID_BZ=b.Op_ID LEFT JOIN asmenys a ON a.ID=b.Op_Analitika WHERE b.Op_data &gt;= ?DF AND b.Op_data &lt;= ?DT AND b.Op_turinys LIKE ?CF AND (b.Op_analitika=?PR OR d.Op_ana=?PR) GROUP BY b.Op_ID ORDER BY b.Op_data;</Statement>
    <Objects>ActiveReports.JournalEntryInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>JournalEntriesFetch6</Key>
    <Statement>SELECT b.Op_ID, b.Op_data, b.Op_Dok, b.Op_turinys, b.Op_analitika, a.Pavad, a.Kodas, b.Op_dok_rusis, CROUND(SUM(d.Op_suma)/2, 2), b.Op_korespond, a.SD_kodas FROM bz b LEFT JOIN bzdata d ON d.Op_ID_BZ=b.Op_ID LEFT JOIN asmenys a ON a.ID=b.Op_Analitika WHERE b.Op_data &gt;= ?DF AND b.Op_data &lt;= ?DT AND b.Op_turinys LIKE ?CF AND b.Op_analitika=ANY(SELECT g.PersonsID FROM persons_group_assignments g WHERE g.GroupID=?GD) GROUP BY b.Op_ID ORDER BY b.Op_data;</Statement>
    <Objects>ActiveReports.JournalEntryInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertTemplateBookEntry</Key>
    <Statement>INSERT INTO tipines_data(T_ID, T_tipas, T_saskaita)  VALUES(?LD, ?TP, ?AA);</Statement>
    <Objects>General.TemplateBookEntry</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>TemplateBookEntriesDelete</Key>
    <Statement>DELETE FROM tipines_data WHERE tipines_data.T_ID=?BD ;</Statement>
    <Objects>General.TemplateJournalEntry</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>TemplateJournalEntryExists</Key>
    <Statement>SELECT COUNT(t.T_ID) FROM tipines_op t WHERE t.T_ID&lt;&gt;?TD AND TRIM(LOWER(t.Pavadinimas))=TRIM(LOWER(?NM));</Statement>
    <Objects>General.TemplateJournalEntry</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>TemplateJournalEntryInsert</Key>
    <Statement>INSERT INTO tipines_op(Pavadinimas, Turinys, InsertDate, UpdateDate) VALUES(?PV, ?TR, ?UD, ?UD);</Statement>
    <Objects>General.TemplateJournalEntry</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>TemplateJournalEntryUpdate</Key>
    <Statement>UPDATE tipines_op SET Pavadinimas=?PV, Turinys=?TR, UpdateDate=?UD WHERE T_ID=?BD ;</Statement>
    <Objects>General.TemplateJournalEntry</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>TemplateJournalEntryDelete</Key>
    <Statement>DELETE FROM tipines_op WHERE tipines_op.T_ID=?BD ;</Statement>
    <Objects>General.TemplateJournalEntry</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>ClosingResultsSelect</Key>
    <Statement>SELECT s.Saskaitosnr, SUM(CASE WHEN d.Op_tipas='Debetas' THEN d.Op_suma ELSE 0 END) AS SumDebit, SUM(CASE WHEN d.Op_tipas='Kreditas' THEN d.Op_suma ELSE 0 END) AS SumCredit FROM saskaitupl s LEFT JOIN bzdata d ON d.Op_saskaita = s.Saskaitosnr LEFT JOIN bz b ON b.Op_ID=d.Op_ID_BZ WHERE (s.Saskaitosnr LIKE ?AA OR s.Saskaitosnr LIKE ?AB OR s.Saskaitosnr LIKE ?AC OR s.Saskaitosnr LIKE ?AD) AND b.Op_data&lt;=?DT GROUP BY s.Saskaitosnr;</Statement>
    <Objects>General.ClosingEntriesCommand</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>BookEntryInfoListSelect1</Key>
    <Statement>SELECT b.Op_ID, b.Op_data, b.Op_Dok, b.Op_turinys, b.Op_dok_rusis, b.Op_analitika, a.Pavad, a.Kodas, a.Adresas, g.Op_tipas, g.Op_suma, g.Op_ana, c.Pavad, c.Kodas, c.Adresas, b.Op_korespond FROM bzdata g LEFT JOIN bz b ON g.Op_ID_BZ=b.Op_ID AND g.Op_saskaita=?SS LEFT JOIN asmenys a ON a.ID=b.Op_analitika LEFT JOIN asmenys c ON c.ID=g.Op_ana WHERE b.Op_data&gt;=?DF AND b.Op_data&lt;=?DT ORDER BY b.Op_data, b.Op_Dok;</Statement>
    <Objects>ActiveReports.BookEntryInfoListParent</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>BookEntryInfoListSelect2</Key>
    <Statement>SELECT b.Op_ID, b.Op_data, b.Op_Dok, b.Op_turinys, b.Op_dok_rusis, b.Op_analitika, a.Pavad, a.Kodas, a.Adresas, g.Op_tipas, g.Op_suma, g.Op_ana, c.Pavad, c.Kodas, c.Adresas, b.Op_korespond FROM bzdata g LEFT JOIN bz b ON g.Op_ID_BZ=b.Op_ID AND CAST(g.Op_saskaita AS CHAR) LIKE ?SS LEFT JOIN asmenys a ON a.ID=b.Op_analitika LEFT JOIN asmenys c ON c.ID=g.Op_ana WHERE b.Op_data&gt;=?DF AND b.Op_data&lt;=?DT ORDER BY b.Op_data, b.Op_Dok;</Statement>
    <Objects>ActiveReports.BookEntryInfoListParent</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>BookEntryInfoListSelect3</Key>
    <Statement>SELECT b.Op_ID, b.Op_data, b.Op_Dok, b.Op_turinys, b.Op_dok_rusis, b.Op_analitika, a.Pavad, a.Kodas, a.Adresas, g.Op_tipas, g.Op_suma, g.Op_ana, c.Pavad, c.Kodas, c.Adresas, b.Op_korespond FROM bzdata g LEFT JOIN bz b ON g.Op_ID_BZ=b.Op_ID AND g.Op_saskaita=?SS LEFT JOIN asmenys a ON a.ID=b.Op_analitika LEFT JOIN asmenys c ON c.ID=g.Op_ana WHERE b.Op_data&gt;=?DF AND b.Op_data&lt;=?DT AND (b.Op_analitika=?PR OR g.Op_ana=?PR) ORDER BY b.Op_data, b.Op_Dok;</Statement>
    <Objects>ActiveReports.BookEntryInfoListParent</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>BookEntryInfoListSelect4</Key>
    <Statement>SELECT b.Op_ID, b.Op_data, b.Op_Dok, b.Op_turinys, b.Op_dok_rusis, b.Op_analitika, a.Pavad, a.Kodas, a.Adresas, g.Op_tipas, g.Op_suma, g.Op_ana, c.Pavad, c.Kodas, c.Adresas, b.Op_korespond FROM bzdata g LEFT JOIN bz b ON g.Op_ID_BZ=b.Op_ID AND CAST(g.Op_saskaita AS CHAR) LIKE ?SS LEFT JOIN asmenys a ON a.ID=b.Op_analitika LEFT JOIN asmenys c ON c.ID=g.Op_ana WHERE b.Op_data&gt;=?DF AND b.Op_data&lt;=?DT AND (b.Op_analitika=?PR OR g.Op_ana=?PR) ORDER BY b.Op_data, b.Op_Dok;</Statement>
    <Objects>ActiveReports.BookEntryInfoListParent</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>BookEntryInfoListSelect5</Key>
    <Statement>SELECT b.Op_ID, b.Op_data, b.Op_Dok, b.Op_turinys, b.Op_dok_rusis, b.Op_analitika, a.Pavad, a.Kodas, a.Adresas, g.Op_tipas, g.Op_suma, g.Op_ana, c.Pavad, c.Kodas, c.Adresas, b.Op_korespond FROM bzdata g LEFT JOIN bz b ON g.Op_ID_BZ=b.Op_ID AND g.Op_saskaita=?SS LEFT JOIN asmenys a ON a.ID=b.Op_analitika LEFT JOIN asmenys c ON c.ID=g.Op_ana WHERE b.Op_data&gt;=?DF AND b.Op_data&lt;=?DT AND (b.Op_analitika=ANY(SELECT r.PersonsID FROM persons_group_assignments r WHERE r.GroupID=?PG) OR g.Op_ana=ANY(SELECT s.PersonsID FROM persons_group_assignments s WHERE s.GroupID=?PG)) ORDER BY b.Op_data, b.Op_Dok;</Statement>
    <Objects>ActiveReports.BookEntryInfoListParent</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>BookEntryInfoListSelect6</Key>
    <Statement>SELECT b.Op_ID, b.Op_data, b.Op_Dok, b.Op_turinys, b.Op_dok_rusis, b.Op_analitika, a.Pavad, a.Kodas, a.Adresas, g.Op_tipas, g.Op_suma, g.Op_ana, c.Pavad, c.Kodas, c.Adresas, b.Op_korespond FROM bzdata g LEFT JOIN bz b ON g.Op_ID_BZ=b.Op_ID AND CAST(g.Op_saskaita AS CHAR) LIKE ?SS LEFT JOIN asmenys a ON a.ID=b.Op_analitika LEFT JOIN asmenys c ON c.ID=g.Op_ana WHERE b.Op_data&gt;=?DF AND b.Op_data&lt;=?DT AND (b.Op_analitika=ANY(SELECT r.PersonsID FROM persons_group_assignments r WHERE r.GroupID=?PG) OR g.Op_ana=ANY(SELECT s.PersonsID FROM persons_group_assignments s WHERE s.GroupID=?PG)) ORDER BY b.Op_data, b.Op_Dok;</Statement>
    <Objects>ActiveReports.BookEntryInfoListParent</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>BookEntryInfoTurnoverBefore1</Key>
    <Statement>SELECT (SELECT SUM(g.Op_suma) FROM bzdata g, bz b WHERE b.Op_ID=g.Op_ID_BZ AND b.Op_data &lt; ?DF AND g.Op_tipas='Debetas' AND g.Op_saskaita=?SS), (SELECT SUM(g.Op_suma) FROM bzdata g, bz b WHERE b.Op_ID=g.Op_ID_BZ AND b.Op_data &lt; ?DF AND g.Op_tipas='Kreditas' AND g.Op_saskaita=?SS);</Statement>
    <Objects>ActiveReports.BookEntryInfoListParent</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>BookEntryInfoTurnoverBefore2</Key>
    <Statement>SELECT (SELECT SUM(g.Op_suma) FROM bzdata g, bz b WHERE b.Op_ID=g.Op_ID_BZ AND b.Op_data &lt; ?DF AND g.Op_tipas='Debetas' AND CAST(g.Op_saskaita AS CHAR) LIKE ?SS), (SELECT SUM(g.Op_suma) FROM bzdata g, bz b WHERE b.Op_ID=g.Op_ID_BZ AND b.Op_data &lt; ?DF AND g.Op_tipas='Kreditas' AND CAST(g.Op_saskaita AS CHAR) LIKE ?SS);</Statement>
    <Objects>ActiveReports.BookEntryInfoListParent</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>BookEntryInfoTurnoverBefore3</Key>
    <Statement>SELECT (SELECT SUM(g.Op_suma) FROM bzdata g, bz b WHERE b.Op_ID=g.Op_ID_BZ AND b.Op_data &lt; ?DF AND g.Op_tipas='Debetas' AND g.Op_saskaita=?SS AND (g.Op_ana=?PR OR b.Op_analitika=?PR)), (SELECT SUM(g.Op_suma) FROM bzdata g, bz b WHERE b.Op_ID=g.Op_ID_BZ AND b.Op_data &lt; ?DF AND g.Op_tipas='Kreditas' AND g.Op_saskaita=?SS AND (g.Op_ana=?PR OR b.Op_analitika=?PR));</Statement>
    <Objects>ActiveReports.BookEntryInfoListParent</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>BookEntryInfoTurnoverBefore4</Key>
    <Statement>SELECT (SELECT SUM(g.Op_suma) FROM bzdata g, bz b WHERE b.Op_ID=g.Op_ID_BZ AND b.Op_data &lt; ?DF AND g.Op_tipas='Debetas' AND CAST(g.Op_saskaita AS CHAR) LIKE ?SS AND (g.Op_ana=?PR OR b.Op_analitika=?PR)), (SELECT SUM(g.Op_suma) FROM bzdata g, bz b WHERE b.Op_ID=g.Op_ID_BZ AND b.Op_data &lt; ?DF AND g.Op_tipas='Kreditas' AND CAST(g.Op_saskaita AS CHAR) LIKE ?SS AND (g.Op_ana=?PR OR b.Op_analitika=?PR));</Statement>
    <Objects>ActiveReports.BookEntryInfoListParent</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>BookEntryInfoTurnoverBefore5</Key>
    <Statement>SELECT (SELECT SUM(g.Op_suma) FROM bzdata g, bz b WHERE b.Op_ID=g.Op_ID_BZ AND b.Op_data &lt; ?DF AND g.Op_tipas='Debetas' AND g.Op_saskaita=?SS AND (b.Op_analitika=ANY(SELECT r.PersonsID FROM persons_group_assignments r WHERE r.GroupID=?PG) OR g.Op_ana=ANY(SELECT s.PersonsID FROM persons_group_assignments s WHERE s.GroupID=?PG))), (SELECT SUM(g.Op_suma) FROM bzdata g, bz b WHERE b.Op_ID=g.Op_ID_BZ AND b.Op_data &lt; ?DF AND g.Op_tipas='Kreditas' AND g.Op_saskaita=?SS AND (b.Op_analitika=ANY(SELECT r.PersonsID FROM persons_group_assignments r WHERE r.GroupID=?PG) OR g.Op_ana=ANY(SELECT s.PersonsID FROM persons_group_assignments s WHERE s.GroupID=?PG)));</Statement>
    <Objects>ActiveReports.BookEntryInfoListParent</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>BookEntryInfoTurnoverBefore6</Key>
    <Statement>SELECT (SELECT SUM(g.Op_suma) FROM bzdata g, bz b WHERE b.Op_ID=g.Op_ID_BZ AND b.Op_data &lt; ?DF AND g.Op_tipas='Debetas' AND CAST(g.Op_saskaita AS CHAR) LIKE ?SS AND (b.Op_analitika=ANY(SELECT r.PersonsID FROM persons_group_assignments r WHERE r.GroupID=?PG) OR g.Op_ana=ANY(SELECT s.PersonsID FROM persons_group_assignments s WHERE s.GroupID=?PG))), (SELECT SUM(g.Op_suma) FROM bzdata g, bz b WHERE b.Op_ID=g.Op_ID_BZ AND b.Op_data &lt; ?DF AND g.Op_tipas='Kreditas' AND CAST(g.Op_saskaita AS CHAR) LIKE ?SS AND (b.Op_analitika=ANY(SELECT r.PersonsID FROM persons_group_assignments r WHERE r.GroupID=?PG) OR g.Op_ana=ANY(SELECT s.PersonsID FROM persons_group_assignments s WHERE s.GroupID=?PG)));</Statement>
    <Objects>ActiveReports.BookEntryInfoListParent</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>TranferOfBalanceIDSelect</Key>
    <Statement>SELECT b.Op_ID, (SELECT u.Op_ID FROM bz u WHERE u.Op_dok_rusis='uz' LIMIT 1), (SELECT MIN(v.Op_data) FROM bz v WHERE v.Op_dok_rusis&lt;&gt;'lik') FROM bz b WHERE b.Op_dok_rusis='lik';</Statement>
    <Objects>General.TransferOfBalance</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeBZTable1</Key>
    <Statement>UPDATE bz SET Op_dok_rusis='' WHERE Op_dok_rusis IS NULL;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeBZTable2</Key>
    <Statement>UPDATE bz SET Op_analitika='0' WHERE Op_analitika IS NULL OR TRIM(Op_analitika)='';</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchDeclarationSD13</Key>
    <Statement>SELECT a.Kodas, d.KodasSDA, b.Op_data, CRound(d.SumaBruto * (100 - d.BaseSODRA) / 100, 2) AS IncomeTaxBase, SUM(CRound(d.SumaBruto * (100 - d.BaseSODRA) * d.TarPSDW / 100 / 100, 2) + CRound(d.SumaBruto * (100 - d.BaseSODRA) * d.TarPSDE / 100 / 100, 2) + CRound(d.SumaBruto * (100 - d.BaseSODRA) * d.TarSDW / 100 / 100, 2) + CRound(d.SumaBruto * (100 - d.BaseSODRA) * d.TarSDE / 100 / 100, 2)) As Payments, a.Pavad, d.KodasSD, (d.TarPSDW + d.TarSDW) AS IsskTar, (d.TarPSDE + d.TarSDE) AS PriskTar FROM d_kitos d, bz b, asmenys a WHERE b.Op_ID=d.BZ_ID AND a.ID=b.Op_analitika AND d.KodasSD IS NOT Null AND d.KodasSD &gt; 0 AND b.Op_data&gt;=?DF AND b.Op_data&lt;=?DT GROUP BY b.Op_data, a.Kodas, d.KodasSD;</Statement>
    <Objects>ActiveReports.Declaration</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchDeclarationSAM(1)_1</Key>
    <Statement>SELECT a.Pavad, a.Kodas, a.SD_kodas, SUM(d.DU_pr), SUM(CROUND(d.DU_pr * b.SD_v/ 100,2)+CROUND(d.DU_pr * b.SD_d/ 100,2) + CROUND(d.DU_pr * b.PSDW/ 100,2)+CROUND(d.DU_pr * b.PSDE/ 100,2)) FROM asmenys a LEFT JOIN du_ziniarastis b ON b.Metai = ?YR AND b.Men&gt;=?MF AND b.Men&lt;=?MT LEFT JOIN du_ziniarastis_d d ON d.Z_ID = b.ID AND d.AK = a.ID WHERE (SELECT SUM(CASE WHEN c.Tipas='d' THEN 1 ELSE CASE WHEN c.Tipas='n' THEN -1 ELSE 0 END END) FROM darbuotojai_d c WHERE c.Nuo&lt;=?DT AND c.AK=a.ID) &gt; 0 GROUP BY a.ID;</Statement>
    <Objects>ActiveReports.Declaration</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchDeclarationSAM(1)_2</Key>
    <Statement>SELECT DISTINCT d.SD_d, d.SD_v, d.PSDW, d.PSDE FROM du_ziniarastis d WHERE d.Metai=?YR AND d.Men&gt;=?MF AND d.Men&lt;=?MT ;</Statement>
    <Objects>ActiveReports.Declaration, ActiveReports.SodraRateInfo</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchDeclarationSAM(1)_3</Key>
    <Statement>SELECT 'Isidarbino_pries', COUNT(DISTINCT d.AK) FROM darbuotojai_d d WHERE d.Tipas='d' AND d.Nuo&lt;?DF UNION SELECT 'Atlesta_pries', COUNT(DISTINCT d.AK) FROM darbuotojai_d d WHERE d.Tipas='n' AND d.Nuo&lt;?DF UNION SELECT 'Isidarbino_per', COUNT(DISTINCT d.AK) FROM darbuotojai_d d WHERE d.Tipas='d' AND d.Nuo&gt;=?DF AND d.Nuo&lt;=?DT UNION SELECT 'Atlesta_per', COUNT(DISTINCT d.AK) FROM darbuotojai_d d WHERE d.Tipas='n' AND d.Nuo&gt;=?DF AND d.Nuo&lt;=?DT ;</Statement>
    <Objects>ActiveReports.Declaration</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchDeclarationSAM(1)_4</Key>
    <Statement>SELECT b.Men, SUM(d.DU_pr), SUM(CROUND(d.DU_pr * b.SD_v/100,2) + CROUND(d.DU_pr * b.SD_d/100,2) + CROUND(d.DU_pr * b.PSDW/100,2) + CROUND(d.DU_pr * b.PSDE/100,2)) AS SODRA_Prisk, 0 FROM du_ziniarastis b, du_ziniarastis_d d WHERE d.Z_ID = b.ID AND b.Metai = ?YR GROUP BY b.Men UNION SELECT MONTH(a.Op_data), 0, 0, SUM(c.Op_suma) FROM bz a, bzdata c WHERE c.Op_ID_BZ=a.Op_ID AND YEAR(a.Op_data)=?YR AND (c.Op_saskaita=?SP OR c.Op_saskaita=?SS) AND c.Op_tipas='Debetas' AND (a.Op_dok_rusis&lt;&gt;'lik' OR a.Op_dok_rusis IS NULL) GROUP BY MONTH(a.Op_data) UNION SELECT 13, 0, 0, (SELECT SUM(CASE WHEN c.Op_tipas='Kreditas' THEN c.Op_suma ELSE -c.Op_suma END) FROM bz a, bzdata c WHERE c.Op_ID_BZ=a.Op_ID AND (YEAR(a.Op_data)&lt;?YR OR a.Op_dok_rusis='lik') AND (c.Op_saskaita=?SP OR c.Op_saskaita=?SS));</Statement>
    <Objects>ActiveReports.Declaration</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchDeclarationSAM(1)_Aut_1</Key>
    <Statement>SELECT DISTINCT d.TarSDW, d.TarSDE, d.TarPSDW, d.TarPSDE FROM d_kitos d, bz b WHERE b.Op_ID=d.BZ_ID AND YEAR(b.Op_data)=?YR AND MONTH(b.Op_data)&gt;=?MF AND MONTH(b.Op_data)&lt;=?MT AND d.KodasSD&gt;0;</Statement>
    <Objects>ActiveReports.Declaration</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchDeclarationSAM(1)_Aut_2</Key>
    <Statement>SELECT MONTH(h.Op_data), SUM(g.SumaBruto), SUM(CROUND(g.SumaBruto * g.TarPSDW/100, 2) + CROUND(g.SumaBruto * g.TarPSDE/100, 2) + CROUND(g.SumaBruto * g.TarSDW/100, 2) + CROUND(g.SumaBruto * g.TarSDE/100, 2)), 0 FROM d_kitos g, bz h WHERE h.Op_ID = g.BZ_ID AND YEAR(h.Op_data)=?YR AND g.KodasSD &gt; 0 GROUP BY MONTH(h.Op_data) UNION SELECT MONTH(a.Op_data), 0, 0, SUM(c.Op_suma) FROM bz a, bzdata c WHERE c.Op_ID_BZ=a.Op_ID AND YEAR(a.Op_data)=?YR AND (c.Op_saskaita=?SP OR c.Op_saskaita=?SS) AND c.Op_tipas='Debetas' AND (a.Op_dok_rusis&lt;&gt;'lik' OR a.Op_dok_rusis IS NULL) GROUP BY MONTH(a.Op_data) UNION SELECT 13, 0, 0, (SELECT SUM(CASE WHEN c.Op_tipas='Kreditas' THEN c.Op_suma ELSE -c.Op_suma END) FROM bz a, bzdata c WHERE c.Op_ID_BZ=a.Op_ID AND (YEAR(a.Op_data)&lt;?YR OR a.Op_dok_rusis='lik') AND (c.Op_saskaita=?SP OR c.Op_saskaita=?SS));</Statement>
    <Objects>ActiveReports.Declaration</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchDeclarationFR0572(2)</Key>
    <Statement>SELECT (SELECT SUM(CROUND(d.DU_pr - d.Avans + CROUND(d.VDU_dien * d.Nedarb * b.Nedarb/100,2),2)) FROM du_ziniarastis b, du_ziniarastis_d d WHERE d.Z_ID=b.ID AND YEAR(d.Ismoketa)=?YR AND MONTH(d.Ismoketa)=?MN AND d.Ismoketa IS NOT Null GROUP BY MONTH(d.Ismoketa)) AS IsmDU, (SELECT SUM(CROUND((d.DU_pr + CROUND(d.VDU_dien * d.Nedarb * b.Nedarb/100,2) - d.NPD - d.PNPD)*b.GPM/100, 2)) FROM du_ziniarastis b, du_ziniarastis_d d WHERE d.Z_ID=b.ID AND YEAR(d.Ismoketa)=?YR AND MONTH(d.Ismoketa)=?MN AND DAY(d.Ismoketa)&lt;=15 AND d.Ismoketa IS NOT Null GROUP BY MONTH(d.Ismoketa)) AS IsmDUGPM1, (SELECT SUM(CROUND((d.DU_pr + CROUND(d.VDU_dien * d.Nedarb * b.Nedarb/100,2) - d.NPD - d.PNPD)*b.GPM/100,2)) FROM du_ziniarastis b, du_ziniarastis_d d WHERE d.Z_ID=b.ID AND YEAR(d.Ismoketa)=?YR AND MONTH(d.Ismoketa)=?MN AND DAY(d.Ismoketa)&gt;15 AND d.Ismoketa IS NOT Null GROUP BY MONTH(d.Ismoketa)) AS IsmDUGPM2, (SELECT SUM(CASE WHEN NOT k.SumaBruto IS NULL AND k.SumaBruto&gt;0 THEN k.SumaBruto ELSE CROUND(k.Suma/(1-k.Tar/100),2) END) FROM bz b, d_kitos k WHERE b.Op_ID = k.BZ_ID AND YEAR(b.Op_data) = ?YR AND MONTH(b.Op_data) = ?MN AND k.Tar&gt;0 GROUP BY MONTH(b.Op_data)) AS IsmKt, (SELECT SUM(CASE WHEN NOT k.SumaBruto IS NULL AND k.SumaBruto&gt;0 THEN CROUND(k.Tar*k.SumaBruto/100, 2) ELSE CROUND(k.Tar*k.Suma/(1-k.Tar/100)/100,2) END) FROM bz b, d_kitos k WHERE b.Op_ID = k.BZ_ID AND YEAR(b.Op_data) = ?YR AND MONTH(b.Op_data) = ?MN AND k.Tar&gt;0 AND DAY(b.Op_data)&lt;=15 GROUP BY MONTH(b.Op_data)) AS IsmKtGPM1, (SELECT SUM(CASE WHEN NOT k.SumaBruto IS NULL AND k.SumaBruto&gt;0 THEN CROUND(k.Tar*k.SumaBruto/100, 2) ELSE CROUND(k.Tar*k.Suma/(1-k.Tar/100)/100,2) END) FROM bz b, d_kitos k WHERE b.Op_ID = k.BZ_ID AND YEAR(b.Op_data) = ?YR AND MONTH(b.Op_data) = ?MN AND k.Tar&gt;0 AND DAY(b.Op_data)&gt;15 GROUP BY MONTH(b.Op_data)) IsmKtGPM2;</Statement>
    <Objects>ActiveReports.Declaration</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchEmployeesCount</Key>
    <Statement>SELECT (SELECT COUNT(DISTINCT d.AK) FROM darbuotojai_d d WHERE d.Tipas='d' AND d.Nuo&lt;=?DT) AS Priimta, (SELECT COUNT(DISTINCT d.AK) FROM darbuotojai_d d WHERE d.Tipas='n' AND d.Nuo&lt;=?DT) AS Atleista;</Statement>
    <Objects>ActiveReports.Declaration</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchDeclarationFR0572(3)_1</Key>
    <Statement>SELECT SUM(CROUND(d.DU_pr - d.Avans,2)) As Ism, (SELECT SUM(c.Suma) FROM d_avansai_d c WHERE c.Ismok IS NOT NULL AND MONTH(c.Ismok)=?MN AND YEAR(c.Ismok)=?YR GROUP BY MONTH(c.Ismok)) AS IsmAv, (SELECT SUM(CROUND((d.DU_pr + CROUND(d.VDU_dien * d.Nedarb * b.Nedarb/100,2)-d.NPD-d.PNPD)*b.GPM/100,2)) AS IsmGPM_1 FROM du_ziniarastis b, du_ziniarastis_d d WHERE d.Z_ID=b.ID AND MONTH(d.Ismoketa)=?MN AND YEAR(d.Ismoketa)=?YR AND DAY(d.Ismoketa)&lt;=15 AND d.Ismoketa IS NOT Null GROUP BY MONTH(d.Ismoketa)) AS GPM1, (SELECT SUM(CROUND((d.DU_pr + CROUND(d.VDU_dien * d.Nedarb * b.Nedarb/100,2) - d.NPD-d.PNPD)*b.GPM/100,2)) AS IsmGPM_1 FROM du_ziniarastis b, du_ziniarastis_d d WHERE d.Z_ID=b.ID AND MONTH(d.Ismoketa)=?MN AND YEAR(d.Ismoketa)=?YR AND DAY(d.Ismoketa)&gt;15 AND d.Ismoketa IS NOT Null GROUP BY MONTH(d.Ismoketa)) AS GPM2, (SELECT SUM(CROUND(d.VDU_dien * d.Nedarb * b.Nedarb/100,2)) FROM du_ziniarastis b, du_ziniarastis_d d WHERE d.Z_ID=b.ID AND MONTH(d.Ismoketa)=?MN AND YEAR(d.Ismoketa)=?YR AND d.Ismoketa IS NOT Null AND d.Nedarb&gt;0 AND YEAR(d.Ismoketa)&gt;2009 GROUP BY MONTH(d.Ismoketa)) AS IsmNedarb FROM du_ziniarastis b, du_ziniarastis_d d WHERE d.Z_ID=b.ID AND MONTH(d.Ismoketa)=?MN AND YEAR(d.Ismoketa)=?YR AND d.Ismoketa IS NOT Null GROUP BY MONTH(d.Ismoketa);</Statement>
    <Objects>ActiveReports.Declaration</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchDeclarationFR0572(3)_2</Key>
    <Statement>SELECT SUM(CASE WHEN d.SumaBruto IS NULL OR d.SumaBruto=0 THEN CROUND(d.Suma/(1-d.Tar/100),2) ELSE d.SumaBruto END), (SELECT SUM(CASE WHEN d.SumaBruto IS NULL OR d.SumaBruto=0 THEN CROUND(d.Tar*d.Suma/(1-d.Tar/100)/100,2) ELSE CROUND(d.SumaBruto * d.Tar/100, 2) END) FROM d_kitos d, bz b WHERE d.BZ_ID = b.Op_ID AND MONTH(b.Op_data) = ?MN AND YEAR(b.Op_data) = ?YR AND DAY(b.Op_data)&lt;=15 AND (d.Kodas&lt;14 OR d.Kodas&gt;18) GROUP BY MONTH(b.Op_data)) AS GPM1, (SELECT SUM(CASE WHEN d.SumaBruto IS NULL OR d.SumaBruto=0 THEN CROUND(d.Tar*d.Suma/(1-d.Tar/100)/100,2) ELSE CROUND(d.SumaBruto * d.Tar/100, 2) END) FROM d_kitos d, bz b WHERE d.BZ_ID = b.Op_ID AND MONTH(b.Op_data) = ?MN AND Year(b.Op_data) = ?YR AND DAY(b.Op_data)&gt;15 AND (d.Kodas&lt;14 OR d.Kodas&gt;18) GROUP BY MONTH(b.Op_data)) AS GPM2, (SELECT SUM(CROUND(d.SumaBruto * d.TarPSDW/100, 2)) FROM d_kitos d, bz b WHERE d.BZ_ID = b.Op_ID AND MONTH(b.Op_data) = ?MN AND YEAR(b.Op_data) = ?YR AND DAY(b.Op_data)&lt;=15 AND (d.KodasSD Is Null OR d.KodasSD&lt;1) GROUP BY MONTH(b.Op_data)) AS PSD1, (SELECT SUM(CROUND(d.SumaBruto * d.TarPSDW/100, 2)) FROM d_kitos d, bz b WHERE d.BZ_ID = b.Op_ID AND MONTH(b.Op_data) = ?MN AND YEAR(b.Op_data) = ?YR AND DAY(b.Op_data)&gt;15 AND (d.KodasSD Is Null OR d.KodasSD&lt;1) GROUP BY MONTH(b.Op_data)) AS PSD2 FROM d_kitos d, bz b WHERE d.BZ_ID=b.Op_ID AND MONTH(b.Op_data)=?MN AND YEAR(b.Op_data)=?YR AND (d.Kodas&lt;14 OR d.Kodas&gt;18) GROUP BY MONTH(b.Op_data);</Statement>
    <Objects>ActiveReports.Declaration</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchDeclarationFR0572(3)_3</Key>
    <Statement>SELECT a.Pavad, a.Kodas, SUM(CROUND(d.VDU_dien * d.Nedarb * b.Nedarb/100,2)) As Ism, 0 AS IsskGPM, 1 AS MokTer, 3 AS PajRus, SUM(CROUND(CROUND(d.VDU_dien * d.Nedarb * b.Nedarb/100,2) * b.PSDW/100, 2)) As PSD FROM du_ziniarastis b, du_ziniarastis_d d, asmenys a WHERE(d.Z_ID = b.ID And a.ID = d.AK And Month(d.Ismoketa) = ?MN And Year(d.Ismoketa) = ?YR) AND DAY(d.Ismoketa)&lt;=15 AND d.Nedarb&gt;0 AND d.Ismoketa IS NOT Null AND YEAR(d.Ismoketa) = 2009 GROUP BY a.Kodas UNION SELECT a.Pavad, a.Kodas, SUM(CROUND(d.VDU_dien * d.Nedarb * b.Nedarb/100,2)) As Ism, 0 AS IsskGPM, 2 AS MokTer, 3 AS PajRus, SUM(CROUND(CROUND(d.VDU_dien * d.Nedarb * b.Nedarb/100,2) * b.PSDW/100, 2)) As PSD FROM du_ziniarastis b, du_ziniarastis_d d, asmenys a WHERE d.Z_ID=b.ID AND a.ID=d.AK AND MONTH(d.Ismoketa)=?MN AND YEAR(d.Ismoketa)=?YR AND DAY(d.Ismoketa)&gt;15 AND d.Nedarb&gt;0 AND d.Ismoketa IS NOT Null AND YEAR(d.Ismoketa) = 2009 GROUP BY a.Kodas UNION SELECT a.Pavad, a.Kodas, SUM(CASE WHEN d.SumaBruto IS NULL OR d.SumaBruto=0 THEN CROUND(d.Suma/(1-d.Tar/100),2) ELSE d.SumaBruto END), SUM(CASE WHEN d.SumaBruto IS NULL OR d.SumaBruto=0 THEN CROUND(d.Tar*d.Suma/(1-d.Tar/100)/100,2) ELSE CROUND(d.SumaBruto*d.Tar/100, 2) END), 1, d.Kodas, SUM(CASE WHEN d.KodasSD IS NULL OR d.KodasSD&lt;1 THEN CROUND(d.SumaBruto*d.TarPSDW/100, 2) ELSE 0 END) FROM asmenys a, d_kitos d, bz b WHERE d.BZ_ID=b.Op_ID AND b.Op_analitika=a.ID AND YEAR(b.Op_data)=?YR AND MONTH(b.Op_data)=?MN AND DAY(b.Op_data)&lt;=15 AND (d.KodasSD IS NULL OR d.KodasSD&lt;1 OR YEAR(b.Op_data)&gt;2009) GROUP BY a.Kodas, d.Kodas UNION SELECT a.Pavad, a.Kodas, SUM(CASE WHEN d.SumaBruto IS NULL OR d.SumaBruto=0 THEN CROUND(d.Suma/(1-d.Tar/100),2) ELSE d.SumaBruto END), SUM(CASE WHEN d.SumaBruto IS NULL OR d.SumaBruto=0 THEN CROUND(d.Tar*d.Suma/(1-d.Tar/100)/100,2) ELSE CROUND(d.SumaBruto*d.Tar/100, 2) END), 2, d.Kodas, SUM(CASE WHEN d.KodasSD IS NULL OR d.KodasSD&lt;1 THEN CROUND(d.SumaBruto*d.TarPSDW/100, 2) ELSE 0 END) FROM asmenys a, d_kitos d, bz b WHERE d.BZ_ID=b.Op_ID AND b.Op_analitika=a.ID AND YEAR(b.Op_data)=?YR AND MONTH(b.Op_data)=?MN AND DAY(b.Op_data)&gt;15 AND (d.KodasSD IS NULL OR d.KodasSD&lt;1 OR YEAR(b.Op_data)&gt;2009) GROUP BY a.Kodas, d.Kodas;</Statement>
    <Objects>ActiveReports.Declaration</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchDeclarationFR0573(3)</Key>
    <Statement>SELECT u.Kodas, u.Pavad, b.GPM, 0, SUM(d.NPD), SUM(d.PNPD), SUM(d.DU_pr + CROUND(d.Nedarb * b.Nedarb * d.VDU_dien/100,2)), SUM(CROUND((d.DU_pr + CROUND(d.Nedarb * b.Nedarb * d.VDU_dien/100,2)-d.NPD-d.PNPD)*b.GPM/100,2)), 't' FROM du_ziniarastis_d d, asmenys u, du_ziniarastis b WHERE d.Z_ID = b.ID And d.AK = u.ID And d.Ismoketa Is Not NULL AND d.Ismoketa&gt;=?DF AND d.Ismoketa&lt;=?DT GROUP BY b.GPM, d.AK UNION SELECT t.Kodas, t.Pavad, k.Tar, k.Kodas, 0, 0, SUM(CASE WHEN k.SumaBruto IS NULL OR k.SumaBruto=0 THEN CROUND(k.Suma/(1-k.Tar/100),2) ELSE k.SumaBruto END), SUM(CASE WHEN k.SumaBruto IS NULL OR k.SumaBruto=0 THEN CROUND(k.Tar*k.Suma/(1-k.Tar/100)/100,2) ELSE CROUND(k.SumaBruto*k.Tar/100, 2) END), 'n' FROM bz b, d_kitos k, asmenys t WHERE b.Op_ID=k.BZ_ID AND t.ID=b.Op_analitika AND b.Op_data&gt;=?DF AND b.Op_data&lt;=?DT GROUP BY k.Tar, t.ID, k.Kodas;</Statement>
    <Objects>ActiveReports.Declaration</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DocumentSerialExists3</Key>
    <Statement>SELECT COUNT(k.BZ_ID) FROM kio k WHERE UPPER(TRIM(k.Serija))=UPPER(TRIM(?SR)) ;</Statement>
    <Objects>Settings.DocumentSerialList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeBZTable3</Key>
    <Statement>UPDATE bz b, (SELECT d.Op_ID_BZ AS JournalID, CONVERT(GROUP_CONCAT(DISTINCT IF(d.Op_tipas='Debetas', 'D ', 'K '), d.Op_saskaita SEPARATOR ', '), CHAR) AS Accounts FROM bzdata d GROUP BY d.Op_ID_BZ) c SET b.Op_korespond=c.Accounts WHERE b.Op_ID=c.JournalID;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchAllLabourContractNumbers</Key>
    <Statement>SELECT d.DS_Serija, d.DS_NR FROM darbuotojai_d d GROUP BY d.DS_Serija, d.DS_NR;</Statement>
    <Objects>Workers.WorkerStatusList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchWorkerStatusList</Key>
    <Statement>SELECT d.ID, d.DS_Serija, d.DS_NR, d.Nuo, d.Tipas, d.Dydis, d.DU_tipas, d.Pagrindas, d.InsertDate, d.UpdateDate FROM darbuotojai_d d WHERE d.AK=?PD ORDER BY d.Nuo;</Statement>
    <Objects>Workers.WorkerStatusList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchPersonsLabourContractNumbers</Key>
    <Statement>SELECT d.DS_Serija, d.DS_NR, d.Nuo FROM darbuotojai_d d WHERE d.AK=?PD GROUP BY d.DS_Serija, d.DS_NR;</Statement>
    <Objects>Workers.WorkerStatusList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertWorkerStatus</Key>
    <Statement>INSERT INTO darbuotojai_d(AK, DS_NR, DS_Serija, Tipas, Nuo, Dydis, Pagrindas, DU_tipas, InsertDate, UpdateDate) VALUES(?PD, ?NM, ?SR, ?TP, ?DT, ?VL, ?CN, ?OP, ?UD, ?UD);</Statement>
    <Objects>Workers.Contract</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateWorkerStatus</Key>
    <Statement>UPDATE darbuotojai_d SET Nuo=?DT, Dydis=?VL, Pagrindas=?CN, DU_tipas=?OP, UpdateDate=?UD WHERE ID=?SD ;</Statement>
    <Objects>Workers.Contract</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteWorkerStatus</Key>
    <Statement>DELETE FROM darbuotojai_d WHERE darbuotojai_d.ID=?SD ;</Statement>
    <Objects>Workers.Contract</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLabourContractInfoList</Key>
    <Statement>SELECT a.ID, a.Pavad, a.Kodas, a.SD_kodas, d.DS_Serija, d.DS_NR, d.Nuo, d.DU_tipas, (SELECT t.Dydis FROM darbuotojai_d t WHERE t.DS_NR=d.DS_NR AND t.DS_Serija=d.DS_Serija AND t.Tipas='u' AND t.Nuo&lt;=?DT ORDER BY t.Nuo DESC LIMIT 1) AS DU, (SELECT t.DU_tipas FROM darbuotojai_d t WHERE t.DS_NR=d.DS_NR AND t.DS_Serija=d.DS_Serija AND t.Tipas='u' AND t.Nuo&lt;=?DT ORDER BY t.Nuo DESC LIMIT 1) AS DUType, (SELECT t.Dydis FROM darbuotojai_d t WHERE t.DS_NR=d.DS_NR AND t.DS_Serija=d.DS_Serija AND t.Tipas='a' AND t.Nuo&lt;=?DT ORDER BY t.Nuo DESC LIMIT 1) AS Holiday, (SELECT t.Dydis FROM darbuotojai_d t WHERE t.DS_NR=d.DS_NR AND t.DS_Serija=d.DS_Serija AND t.Tipas='p' AND t.Nuo&lt;=?DT ORDER BY t.Nuo DESC LIMIT 1) AS NPD, (SELECT t.Dydis FROM darbuotojai_d t WHERE t.DS_NR=d.DS_NR AND t.DS_Serija=d.DS_Serija AND t.Tipas='r' AND t.Nuo&lt;=?DT ORDER BY t.Nuo DESC LIMIT 1) AS PNPD, (SELECT t.Dydis FROM darbuotojai_d t WHERE t.DS_NR=d.DS_NR AND t.DS_Serija=d.DS_Serija AND t.Tipas='i' AND t.Nuo&lt;=?DT ORDER BY t.Nuo DESC LIMIT 1) AS ExtraPay, (SELECT t.Dydis FROM darbuotojai_d t WHERE t.DS_NR=d.DS_NR AND t.DS_Serija=d.DS_Serija AND t.Tipas='k' AND t.Nuo&lt;=?DT ORDER BY t.Nuo DESC LIMIT 1) AS WorkLoad FROM asmenys a LEFT JOIN darbuotojai_d d ON d.AK=a.ID AND d.Tipas='d' AND d.Nuo&lt;=?DT AND (SELECT COUNT(t.Tipas) FROM darbuotojai_d t WHERE t.DS_NR=d.DS_NR AND t.DS_Serija=d.DS_Serija AND t.Tipas='n' AND t.Nuo&lt;='2013-12-31')=0 WHERE a.IsWorker AND (1&gt;?WC OR NOT d.DS_NR IS NULL);</Statement>
    <Objects>Workers.LabourContractInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DocumentSerialExists4</Key>
    <Statement>SELECT COUNT(d.AK) FROM darbuotojai_d d WHERE TRIM(LOWER(d.DS_Serija))=TRIM(LOWER(?SR));</Statement>
    <Objects>Settings.DocumentSerialList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchNewImprestSheet</Key>
    <Statement>SELECT a.ID, a.Pavad, a.Kodas, a.SD_kodas, d.DS_Serija, d.DS_NR FROM asmenys a, darbuotojai_d d WHERE a.ID=d.AK AND d.Nuo&lt;?DT AND d.Tipas='d' AND (SELECT COUNT(f.ID) FROM d_avansai_d f, d_avansai e WHERE f.Z_ID=e.ID AND e.Met=?YR AND e.Men=?MN AND f.DS_NR=d.DS_NR AND f.DS_Serija=d.DS_Serija)=0 AND (SELECT COUNT(c.AK) FROM darbuotojai_d c WHERE c.DS_NR=d.DS_NR AND c.DS_Serija=d.DS_Serija AND c.Tipas='n' AND c.Nuo&lt;?DT)=0 GROUP BY d.DS_NR, d.DS_Serija;</Statement>
    <Objects>Workers.ImprestSheet</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchImprestSheetGeneralData</Key>
    <Statement>SELECT a.Nr, a.Z_Data, a.Met, a.Men, a.InsertDate, a.UpdateDate FROM d_avansai a WHERE a.ID=?NR ;</Statement>
    <Objects>Workers.ImprestSheet</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchImprestSheetDetails</Key>
    <Statement>SELECT a.ID, a.Pavad, a.Kodas, a.SD_kodas, d.DS_Serija, d.DS_NR, d.Suma, d.Ismok, d.ID FROM asmenys a, d_avansai_d d WHERE a.ID=d.AK AND d.Z_ID=?NR;</Statement>
    <Objects>Workers.ImprestSheet</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertImprestSheet</Key>
    <Statement>INSERT INTO d_avansai(ID, Nr, Z_data, Met, Men, InsertDate, UpdateDate) VALUES(?AD, ?NR, ?DT, ?YR, ?MN, ?UD, ?UD);</Statement>
    <Objects>Workers.ImprestSheet</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateImprestSheet</Key>
    <Statement>UPDATE d_avansai SET Nr=?NR, Z_data=?DT, UpdateDate=?UD WHERE ID=?AD ;</Statement>
    <Objects>Workers.ImprestSheet</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchImprestSheetPayedOut</Key>
    <Statement>SELECT COUNT(d.ID) FROM d_avansai_d d WHERE d.Z_ID=?NR AND NOT d.Ismok IS NULL;</Statement>
    <Objects>Workers.ImprestSheet</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteImprestSheetDetails</Key>
    <Statement>DELETE FROM d_avansai_d WHERE d_avansai_d.Z_ID=?NR ;</Statement>
    <Objects>Workers.ImprestSheet</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteImprestSheetGeneral</Key>
    <Statement>DELETE FROM d_avansai WHERE d_avansai.ID=?NR ;</Statement>
    <Objects>Workers.ImprestSheet</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertImprestItem</Key>
    <Statement>INSERT INTO d_avansai_d(AK, DS_Serija, DS_NR, Z_ID, Suma, Ismok) VALUES(?PD, ?DS, ?DN, ?AD, ?SM, ?PO);</Statement>
    <Objects>Workers.ImprestItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateImprestItem</Key>
    <Statement>UPDATE d_avansai_d SET Suma=?SM, Ismok=?PO WHERE ID=?NR ;</Statement>
    <Objects>Workers.ImprestItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteImprestItem</Key>
    <Statement>DELETE FROM d_avansai_d WHERE d_avansai_d.ID=?NR ;</Statement>
    <Objects>Workers.ImprestItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchImprestSheetInfoList</Key>
    <Statement>SELECT a.ID, a.Nr, a.Z_data, a.Met, a.Men, COUNT(d.AK), SUM(d.Suma), (SELECT SUM(c.Suma) FROM d_avansai_d c WHERE c.Z_ID=a.ID AND c.Ismok IS NOT NULL) FROM d_avansai a, d_avansai_d d WHERE a.ID=d.Z_ID AND a.Z_data&gt;=?DF AND a.Z_data&lt;=?DT GROUP BY d.Z_ID;</Statement>
    <Objects>Workers.ImprestSheetInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchWageSheetInfoList</Key>
    <Statement>SELECT b.ID, b.Nr, b.Z_Data, b.Metai, b.Men, b.Dalin, b.P_S, b.N_V, b.Y_S, b.Nedarb, b.GPM, b.Garant, b.SD_d, b.SD_v, b.PSDW, b.PSDE, b.NPDF, COUNT(d.AK), SUM(d.Val), SUM(d.Dien), SUM(d.DU_pr), SUM(d.P_Atost), SUM(d.II), SUM(d.Issk), SUM(d.Avans), SUM(CROUND(b.Nedarb * d.Nedarb * d.VDU_dien / 100,2)), SUM(d.DU_is), (SELECT SUM(g.DU_is) FROM du_ziniarastis_d g WHERE g.Z_ID=b.ID AND g.Ismoketa IS NOT Null) AS Ismok, SUM(CROUND(d.DU_pr*b.SD_d/100,2)) AS SODRA_Issk, SUM(CROUND(d.DU_pr*b.SD_v/100,2)) AS SODRA_Prisk, SUM(CROUND((d.DU_pr+CROUND(b.Nedarb * d.Nedarb * d.VDU_dien / 100,2)-d.NPD-d.PNPD)*b.GPM/100,2)) AS GPM_Issk, SUM(CROUND(d.DU_pr*b.Garant/100,2)) AS Gar_prisk, SUM(CROUND(d.DU_pr*b.PSDW/100,2)) AS PSD_Issk, SUM(CROUND(d.DU_pr*b.PSDE/100,2)) AS PSD_Prisk, CASE WHEN b.Metai=2009 THEN SUM(CROUND(CROUND(b.Nedarb * d.Nedarb * d.VDU_dien / 100,2)*b.PSDW/100,2)) ELSE 0 END AS PSD_Issk_Nedarb FROM du_ziniarastis b, du_ziniarastis_d d WHERE (b.Metai&gt;?YF OR (b.Metai=?YF AND b.Men&gt;=?MF)) AND (b.Metai&lt;?YT OR (b.Metai=?YT AND b.Men&lt;=?MT)) AND d.Z_ID=b.ID GROUP BY d.Z_ID ORDER BY b.Z_Data;</Statement>
    <Objects>Workers.WageSheetInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchNewWageSheet</Key>
    <Statement>SELECT a.ID, a.Pavad, a.Kodas, a.SD_kodas, d.DS_Serija, d.DS_NR, (SELECT t.Dydis FROM darbuotojai_d t WHERE t.DS_NR=d.DS_NR AND t.DS_Serija=d.DS_Serija AND t.Tipas='k' AND t.Nuo&lt;=?DT ORDER BY t.Nuo DESC LIMIT 1) AS WorkLoad, (SELECT t.Dydis FROM darbuotojai_d t WHERE t.DS_NR=d.DS_NR AND t.DS_Serija=d.DS_Serija AND t.Tipas='u' AND t.Nuo&lt;=?DT ORDER BY t.Nuo DESC LIMIT 1) AS DU, (SELECT t.DU_tipas FROM darbuotojai_d t WHERE t.DS_NR=d.DS_NR AND t.DS_Serija=d.DS_Serija AND t.Tipas='u' AND t.Nuo&lt;=?DT ORDER BY t.Nuo DESC LIMIT 1) AS DUType, (SELECT t.Dydis FROM darbuotojai_d t WHERE t.DS_NR=d.DS_NR AND t.DS_Serija=d.DS_Serija AND t.Tipas='i' AND t.Nuo&lt;=?DT ORDER BY t.Nuo DESC LIMIT 1) AS ExtraPay, (SELECT t.Dydis FROM darbuotojai_d t WHERE t.DS_NR=d.DS_NR AND t.DS_Serija=d.DS_Serija AND t.Tipas='p' AND t.Nuo&lt;=?DT ORDER BY t.Nuo DESC LIMIT 1) AS NPD, (SELECT t.Dydis FROM darbuotojai_d t WHERE t.DS_NR=d.DS_NR AND t.DS_Serija=d.DS_Serija AND t.Tipas='r' AND t.Nuo&lt;=?DT ORDER BY t.Nuo DESC LIMIT 1) AS PNPD, (SELECT SUM(b.Avans) FROM du_ziniarastis_d b, du_ziniarastis e WHERE b.DS_NR=d.DS_NR AND b.DS_Serija=d.DS_Serija AND b.Z_ID=e.ID AND e.Z_Data&lt;=?DT) AS I_Avans, (SELECT SUM(f.Suma) FROM d_avansai_d f, d_avansai g WHERE f.DS_NR=d.DS_NR AND f.DS_Serija=d.DS_Serija AND f.Z_ID=g.ID AND g.Z_data&lt;=?DT AND f.Ismok IS NOT null) AS P_Avans, (SELECT SUM(q.NPD + q.PNPD) FROM du_ziniarastis_d q, du_ziniarastis w WHERE q.Z_ID=w.ID AND q.AK=d.AK AND w.Metai=?YR AND w.Men=?MN) AS UsedNPD, (SELECT SUM(q.DU_pr + CROUND(q.Nedarb * w.Nedarb * q.VDU_dien / 100,2)) FROM du_ziniarastis_d q, du_ziniarastis w WHERE q.Z_ID=w.ID AND q.AK=d.AK AND w.Metai=?YR AND w.Men=?MN) AS OtherIncome, (SELECT W.TotalHours FROM SpecialWorkTimeItems W LEFT JOIN WorkTimeSheets S ON S.ID=W.ParentID LEFT JOIN WorkTimeClasss C ON C.ID=W.TypeID WHERE W.ContractSerial=d.DS_Serija AND W.ContractNumber=d.DS_NR AND S.SheetYear=?YR AND S.SheetMonth=?MN AND C.TypeID=0) AS NightTime, (SELECT W.TotalHours FROM SpecialWorkTimeItems W LEFT JOIN WorkTimeSheets S ON S.ID=W.ParentID LEFT JOIN WorkTimeClasss C ON C.ID=W.TypeID WHERE W.ContractSerial=d.DS_Serija AND W.ContractNumber=d.DS_NR AND S.SheetYear=?YR AND S.SheetMonth=?MN AND C.TypeID=3) AS Overtime, (SELECT W.TotalHours FROM SpecialWorkTimeItems W LEFT JOIN WorkTimeSheets S ON S.ID=W.ParentID LEFT JOIN WorkTimeClasss C ON C.ID=W.TypeID WHERE W.ContractSerial=d.DS_Serija AND W.ContractNumber=d.DS_NR AND S.SheetYear=?YR AND S.SheetMonth=?MN AND C.TypeID=4) AS RestTime, (SELECT W.TotalHours FROM SpecialWorkTimeItems W LEFT JOIN WorkTimeSheets S ON S.ID=W.ParentID LEFT JOIN WorkTimeClasss C ON C.ID=W.TypeID WHERE W.ContractSerial=d.DS_Serija AND W.ContractNumber=d.DS_NR AND S.SheetYear=?YR AND S.SheetMonth=?MN AND C.TypeID=6) AS UnusualTime, (SELECT W.TotalHours FROM SpecialWorkTimeItems W LEFT JOIN WorkTimeSheets S ON S.ID=W.ParentID LEFT JOIN WorkTimeClasss C ON C.ID=W.TypeID WHERE W.ContractSerial=d.DS_Serija AND W.ContractNumber=d.DS_NR AND S.SheetYear=?YR AND S.SheetMonth=?MN AND C.TypeID=5) AS Truancy, U.QuotaDays, U.QuotaHours, U.TotalDays, U.TotalHours, U.SickDays, U.Holydays FROM asmenys a, darbuotojai_d d LEFT JOIN (SELECT U.ContractSerial AS ContractSerial, U.ContractNumber AS ContractNumber, U.QuotaDays AS QuotaDays, U.QuotaHours AS QuotaHours, U.TotalDays AS TotalDays, U.TotalHours AS TotalHours, SUM(CASE WHEN C.TypeID=8 THEN W.Length ELSE 0 END) AS SickDays, SUM(CASE WHEN C.TypeID=9 THEN W.Length ELSE 0 END) AS Holydays FROM WorkTimeItems U LEFT JOIN WorkTimeSheets S ON S.ID=U.ParentID LEFT JOIN DayWorkTimes W ON W.ParentID=U.ID LEFT JOIN WorkTimeClasss C ON C.ID=W.TypeID WHERE S.SheetYear=?YR AND S.SheetMonth=?MN GROUP BY U.ContractSerial, U.ContractNumber) AS U ON U.ContractSerial=d.DS_Serija AND U.ContractNumber=d.DS_NR WHERE a.ID=d.AK AND d.Nuo&lt;=?DT AND (SELECT COUNT(t.Tipas) FROM darbuotojai_d t WHERE t.DS_NR=d.DS_NR AND t.DS_Serija=d.DS_Serija AND t.Tipas='n' AND t.Nuo&lt;?DA)=0 AND NOT (SELECT COUNT(q.ID) FROM du_ziniarastis_d q, du_ziniarastis w WHERE q.Z_ID=w.ID AND q.DS_NR=d.DS_NR AND q.DS_Serija=d.DS_Serija AND w.Metai=?YR AND w.Men=?MN AND w.Dalin='n')&gt;0 GROUP BY d.DS_NR, d.DS_Serija;</Statement>
    <Objects>Workers.WageSheet</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchWageGeneralData</Key>
    <Statement>SELECT d.Nr, d.Z_Data, d.Metai, d.Men, d.Dalin, d.Saskaita, d.Remark, d.Ismoketa, d.P_S, d.N_V, d.Y_S, d.Nedarb, d.GPM, d.Garant, d.SD_d, d.SD_v, d.PSDW, d.PSDE, d.NPDF, d.InsertDate, d.UpdateDate FROM du_ziniarastis d WHERE d.ID=?SD ;</Statement>
    <Objects>Workers.WageSheet</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchWageDetails</Key>
    <Statement>SELECT d.AK, a.Pavad, a.Kodas, a.SD_kodas, d.DS_Serija, d.DS_NR, d.Kruvis, d.DU, d.DU_tipas, d.Priedai, (SELECT t.Dydis FROM darbuotojai_d t WHERE t.DS_NR=d.DS_NR AND t.DS_Serija=d.DS_Serija AND t.Tipas='p' AND t.Nuo&lt;=?DT ORDER BY t.Nuo DESC LIMIT 1) AS NPD_Ap, (SELECT t.Dydis FROM darbuotojai_d t WHERE t.DS_NR=d.DS_NR AND t.DS_Serija=d.DS_Serija AND t.Tipas='r' AND t.Nuo&lt;=?DT ORDER BY t.Nuo DESC LIMIT 1) AS PNPD_Ap, (SELECT SUM(b.Avans) FROM du_ziniarastis_d b, du_ziniarastis e WHERE b.DS_NR=d.DS_NR AND b.DS_Serija=d.DS_Serija AND b.Z_ID=e.ID AND e.Z_Data&lt;=?DT AND b.ID&lt;&gt;d.ID) AS I_Avans, (SELECT SUM(f.Suma) FROM d_avansai_d f, d_avansai g WHERE f.DS_NR=d.DS_NR AND f.DS_Serija=d.DS_Serija AND f.Z_ID=g.ID AND g.Z_data&lt;=?DT AND f.Ismok IS NOT null) AS P_Avans, (SELECT SUM(q.NPD + q.PNPD) FROM du_ziniarastis_d q, du_ziniarastis w WHERE q.Z_ID=w.ID AND q.AK=d.AK AND w.Metai=?YR AND w.Men=?MN AND q.ID&lt;&gt;d.ID) AS UsedNPD, (SELECT SUM(q.DU_pr + CROUND(q.Nedarb * w.Nedarb * q.VDU_dien / 100,2)) FROM du_ziniarastis_d q, du_ziniarastis w WHERE q.Z_ID=w.ID AND q.AK=d.AK AND w.Metai=?YR AND w.Men=?MN AND q.ID&lt;&gt;d.ID) AS OtherIncome, d.Dien, d.Val, d.NV, d.PS, d.YS, d.D_val, d.D_dien, d.Prav, d.AT_K, d.Atost, d.Atost_n, d.Nedarb, d.VDU_dien, d.VDU_val, d.Premija, d.Pr_tipas, d.Kitos, d.Kitos_s, d.II, d.P_Atost, d.Issk, d.Avans, d.NPD, d.PNPD, d.VDU_d, d.VDU_v, d.VDU_u, d.Ismoketa, d.ID, d.HolidayDaysCompensated FROM du_ziniarastis_d d, asmenys a WHERE d.AK=a.ID AND d.Z_ID=?SD ;</Statement>
    <Objects>Workers.WageSheet</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertWageSheet</Key>
    <Statement>INSERT INTO du_ziniarastis(ID, Nr, P_S, N_V, Y_S, Nedarb, GPM, Garant, SD_d, SD_v, Saskaita, Metai, Men, Dalin, Z_Data, PSDW, PSDE, NPDF, Remark, InsertDate, UpdateDate) VALUES(?BD, ?NR, ?PH, ?NV, ?YS, ?NE, ?GP, ?GA, ?SD, ?SV, ?SA, ?ME, ?MN, ?DA, ?ZD, ?PW, ?PE, ?NF, ?RM, ?UD, ?UD);</Statement>
    <Objects>Workers.WageSheet</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateWageSheet</Key>
    <Statement>UPDATE du_ziniarastis SET Nr=?NR, P_S=?PH, N_V=?NV, Y_S=?YS, Nedarb=?NE, GPM=?GP, Garant=?GA, SD_d=?SD, SD_v=?SV, Saskaita=?SA, Dalin=?DA, Z_Data=?ZD, PSDW=?PW, PSDE=?PE, NPDF=?NF, Remark=?RM, UpdateDate=?UD WHERE ID=?BD ;</Statement>
    <Objects>Workers.WageSheet</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertWageItem</Key>
    <Statement>INSERT INTO du_ziniarastis_d(Z_ID, AK, DS_NR, Kruvis, Priedai, Premija, Pr_tipas, Kitos, Dien, Val, NV, PS, YS, Prav, D_val, D_dien, Atost, Nedarb, P_Atost, II, NPD, PNPD, Issk, VDU_d, VDU_v, VDU_u, VDU_dien, VDU_val, DU, DU_tipas, Kitos_s, Avans, AT_K, Atost_n, DU_pr, DU_is, DS_serija, BaseGPM, BasePSD, BasePSDSickLeave, BaseSODRA, BaseGuaranteeFund, HolidayDaysCompensated, CalculatedWage, CalculatedExtraPay, CalculatedHR, CalculatedON, CalculatedSC, CalculatedSickLeave, DeductedGPM, DeductedPSD, DeductedPSDSickLeave, DeductedSODRA, ContributionPSD, ContributionSODRA, ContributionGuaranteeFund, PayableTotal, Ismoketa) VALUES(?BD, ?AK, ?DN, ?KR, ?PR, ?PM, ?PT, ?KN, ?FD, ?FV, ?NV, ?PS, ?YS, ?PV, ?GV, ?GD, ?HW, ?SC, ?HP, ?RP, ?NPD, ?PNPD, ?DD, ?VDU_d, ?VDU_v, ?VDU_u, ?VDU_dien, ?VDU_val, ?WC, ?WT, ?KS, ?IM, ?HT, ?HR, ?WO, ?WP, ?DS, ?AA, ?AB, ?AC, ?AD, ?AE, ?AF, ?AG, ?AH, ?AI, ?AJ, ?AL, ?AM, ?AN, ?AO, ?AP, ?AR, ?AQ, ?AV, ?AZ, ?AW, ?BA);</Statement>
    <Objects>Workers.WageItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateWageItem</Key>
    <Statement>UPDATE du_ziniarastis_d SET Premija=?PM, Pr_tipas=?PT, Kitos=?KN, Dien=?FD, Val=?FV, NV=?NV, PS=?PS, YS=?YS, Prav=?PV, D_val=?GV, D_dien=?GD, Atost=?HW, Nedarb=?SC, P_Atost=?HP, II=?RP, NPD=?NPD, PNPD=?PNPD, Issk=?DD, VDU_d=?VDU_d, VDU_v=?VDU_v, VDU_u=?VDU_u, VDU_dien=?VDU_dien, VDU_val=?VDU_val, Kitos_s=?KS, Avans=?IM, AT_K=?HT, Atost_n=?HR, DU_pr=?WO, DU_is=?WP, BaseGPM=?AA, BasePSD=?AB, BasePSDSickLeave=?AC, BaseSODRA=?AD, BaseGuaranteeFund=?AE, HolidayDaysCompensated=?AF, CalculatedWage=?AG, CalculatedExtraPay=?AH, CalculatedHR=?AI, CalculatedON=?AJ, CalculatedSC=?AL, CalculatedSickLeave=?AM, DeductedGPM=?AN, DeductedPSD=?AO, DeductedPSDSickLeave=?AP, DeductedSODRA=?AR, ContributionPSD=?AQ, ContributionSODRA=?AV, ContributionGuaranteeFund=?AZ, PayableTotal=?AW, Ismoketa=?BA WHERE ID=?ID ;</Statement>
    <Objects>Workers.WageItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteWageItem</Key>
    <Statement>DELETE FROM du_ziniarastis_d WHERE du_ziniarastis_d.ID=?ID ;</Statement>
    <Objects>Workers.WageItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteAllWageItems</Key>
    <Statement>DELETE FROM du_ziniarastis_d WHERE du_ziniarastis_d.Z_ID=?SD ;</Statement>
    <Objects>Workers.WageSheet</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteWageSheet</Key>
    <Statement>DELETE FROM du_ziniarastis WHERE du_ziniarastis.ID=?SD ;</Statement>
    <Objects>Workers.WageSheet</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchShortLabourContractListForPerson</Key>
    <Statement>SELECT d.DS_NR, d.DS_Serija, d.Nuo FROM darbuotojai_d d WHERE d.Tipas='d' AND d.Nuo&lt;?DT AND d.AK=?PD ORDER BY d.DS_Serija, d.DS_NR;</Statement>
    <Objects>Workers.ShortLabourContractList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchShortLabourContractList</Key>
    <Statement>SELECT d.DS_NR, d.DS_Serija, d.Nuo FROM darbuotojai_d d WHERE d.Tipas='d' AND d.Nuo&lt;?DT ORDER BY d.DS_Serija, d.DS_NR;</Statement>
    <Objects>Workers.ShortLabourContractList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfWorkerStatusCanBeDeleted</Key>
    <Statement>SELECT d.Nuo, (SELECT MAX(b.Z_Data) FROM du_ziniarastis_d c LEFT JOIN du_ziniarastis b ON b.ID=c.Z_ID WHERE UPPER(TRIM(c.DS_Serija))=UPPER(TRIM(d.DS_Serija)) AND c.DS_NR=d.DS_NR) AS LastWageSheet, (SELECT MAX(e.Z_data) FROM d_avansai_d a LEFT JOIN d_avansai e ON e.ID=a.Z_ID WHERE a.DS_NR=d.DS_NR AND UPPER(TRIM(a.DS_Serija))=UPPER(TRIM(d.DS_Serija))) AS LastImprestSheet, (SELECT MAX(e.SheetDate) FROM WorkTimeItems a LEFT JOIN WorkTimeSheets e ON e.ID=a.ParentID WHERE a.ContractNumber=d.DS_NR AND UPPER(TRIM(a.ContractSerial))=UPPER(TRIM(d.DS_Serija))) AS LastWorkTimeSheet FROM darbuotojai_d d WHERE d.ID=?CD ;</Statement>
    <Objects>Workers.Contract</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchPayOutNaturalPersonList</Key>
    <Statement>SELECT d.ID, b.Op_ID, b.Op_data, b.Op_Dok, b.Op_turinys, a.Pavad, a.Kodas, d.KodasSDA, d.Suma, d.Tar, d.TarPSDW, d.TarPSDE, d.TarSDW,d.TarSDE, d.SumaBruto, d.Kodas, d.KodasSD, d.BaseSODRA FROM d_kitos d, asmenys a, bz b WHERE b.Op_ID = d.BZ_ID AND b.Op_analitika = a.ID AND b.Op_data&gt;=?DF AND b.Op_data&lt;=?DT ORDER BY b.Op_data;</Statement>
    <Objects>ActiveReports.PayOutNaturalPersonInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertPayOutNaturalPerson</Key>
    <Statement>INSERT INTO d_kitos(BZ_ID, Suma, Tar, Kodas, SumaBruto, TarPSDW, TarPSDE, TarSDW, TarSDE, KodasSD, KodasSDA, BaseSODRA, InsertDate, UpdateDate) VALUES(?BD, ?SN, ?TG, ?CV, ?SB, ?TPW, ?TPE, ?TSW, ?TSE, ?CS, ?PS, ?BS, ?UD, ?UD);</Statement>
    <Objects>Workers.PayOutNaturalPerson</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdatePayOutNaturalPerson</Key>
    <Statement>UPDATE d_kitos SET Suma=?SN, Tar=?TG, Kodas=?CV, SumaBruto=?SB, TarPSDW=?TPW, TarPSDE=?TPE, TarSDW=?TSW, TarSDE=?TSE, KodasSD=?CS, KodasSDA=?PS, BaseSODRA=?BS, UpdateDate=?UD WHERE ID=?PD;</Statement>
    <Objects>Workers.PayOutNaturalPerson</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeletePayOutNaturalPerson</Key>
    <Statement>DELETE FROM d_kitos WHERE d_kitos.ID=?PD;</Statement>
    <Objects>Workers.PayOutNaturalPerson</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchWagePayOutDocumentGeneral</Key>
    <Statement>SELECT 'a', a.Z_data, a.Met, a.Men, a.Nr, a.UpdateDate FROM d_avansai a WHERE a.ID=?SD UNION SELECT 'd', d.Z_Data, d.Metai, d.Men, d.Nr, d.UpdateDate FROM du_ziniarastis d WHERE d.ID=?SD ;</Statement>
    <Objects>Workers.WagePayOutDocument</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchWagePayOutDocumentDetails1</Key>
    <Statement>SELECT d.ID, d.AK, a.Pavad, a.Kodas, d.DS_NR, d.DS_Serija, d.Suma, d.Ismok FROM d_avansai_d d, asmenys a WHERE a.ID=d.AK AND d.Z_ID=?SD ;</Statement>
    <Objects>Workers.WagePayOutDocument</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchWagePayOutDocumentDetails2</Key>
    <Statement>SELECT d.ID, d.AK, a.Pavad, a.Kodas, d.DS_NR, d.DS_Serija, d.DU_is, d.Ismoketa FROM du_ziniarastis_d d, asmenys a WHERE a.ID=d.AK AND d.Z_ID=?SD AND d.DU_is&gt;0;</Statement>
    <Objects>Workers.WagePayOutDocument</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateWagePayOutItem1</Key>
    <Statement>UPDATE d_avansai_d SET Ismok=?DT WHERE ID=?LD ;</Statement>
    <Objects>Workers.WagePayOutItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateWagePayOutItem2</Key>
    <Statement>UPDATE du_ziniarastis_d SET Ismoketa=?DT WHERE ID=?LD ;</Statement>
    <Objects>Workers.WagePayOutItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchJournalEntryDate</Key>
    <Statement>SELECT b.Op_data, (SELECT d.Op_ID FROM bz d WHERE d.Op_dok_rusis='lik' OR d.Op_dok_rusis='uz' ORDER BY d.Op_data DESC LIMIT 1) FROM bz b WHERE b.Op_ID=?JD ;</Statement>
    <Objects>General.JournalEntry</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfJournalEntryValidForLTAPurchase</Key>
    <Statement>SELECT b.Op_suma FROM bzdata b WHERE b.Op_ID_BZ=?LD AND b.Op_saskaita=?AC ;</Statement>
    <Objects>Assets.LongTermAsset</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfInventoryNumUniqueForLTA</Key>
    <Statement>SELECT t.InvNr FROM turtas t WHERE LOWER(TRIM(t.InvNr))=LOWER(TRIM(?NM)) AND t.ID&lt;&gt;?LD ;</Statement>
    <Objects>Assets.LongTermAsset</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfLimitingOperationsExistsForLTA</Key>
    <Statement>SELECT (SELECT COUNT(t.T_ID) FROM turtas_op t WHERE t.T_ID=?LD AND (t.Tipas='per' OR t.Tipas='nur')), (SELECT COUNT(t.T_ID) FROM turtas_op t WHERE t.T_ID=?LD AND t.Tipas='amo');</Statement>
    <Objects>Assets.LongTermAsset</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfDateIsValidForLTA</Key>
    <Statement>SELECT MIN(t.N_data) FROM turtas_op t WHERE t.T_ID=?LD ;</Statement>
    <Objects>Assets.LongTermAsset</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertLongTermAsset</Key>
    <Statement>INSERT INTO turtas(Turtas, Grupe, Isigijimo_dok, Vnt, Kiekis, Vnt_kaina, Likutine, Saskaita, S_Amort, InvNr, TotalValue, AccountAmortization, DefaultAmortPeriod, CustomGroupID, AccountValueIncrease, AccountValueDecrease, AccountRevaluedPortionAmmortization, AcquisitionRevaluedPortionUnitValue, AcquisitionRevaluedPortionTotalValue, AccumulatedAmortizationPerUnit, AccumulatedAmortizationRevaluedPortionPerUnit, AccumulatedAmortizationRevaluedPortionTotal, ContinuedUsage, WasUsedMonths, InsertDate, UpdateDate) VALUES(?NM, ?GP, ?JD, ?MU, ?CN, ?UV, ?LQ, ?AA, ?CA, ?VN, ?TV, ?AC, ?DP, ?CG, ?FA, ?FB, ?FC, ?FD, ?FE, ?FG, ?FH, ?FI, ?FJ, ?FK, ?UD, ?UD);</Statement>
    <Objects>Assets.LongTermAsset</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateLongTermAsset1</Key>
    <Statement>UPDATE turtas SET Turtas=?NM, Grupe=?GP, Isigijimo_dok=?JD, Vnt=?MU, Kiekis=?CN, Vnt_kaina=?UV, Likutine=?LQ, Saskaita=?AA, S_Amort=?CA, InvNr=?VN, TotalValue=?TV, AccountAmortization=?AC, DefaultAmortPeriod=?DP, CustomGroupID=?CG, AccountValueIncrease=?FA, AccountValueDecrease=?FB, AccountRevaluedPortionAmmortization=?FC, AcquisitionRevaluedPortionUnitValue=?FD, AcquisitionRevaluedPortionTotalValue=?FE, AccumulatedAmortizationPerUnit=?FG, AccumulatedAmortizationRevaluedPortionPerUnit=?FH, AccumulatedAmortizationRevaluedPortionTotal=?FI, ContinuedUsage=?FJ,  WasUsedMonths=?FK, UpdateDate=?UD WHERE ID=?TD ;</Statement>
    <Objects>Assets.LongTermAsset</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateLongTermAsset2</Key>
    <Statement>UPDATE turtas SET Turtas=?NM, Grupe=?GP, Isigijimo_dok=?JD, Vnt=?MU, Likutine=?LQ, InvNr=?VN, DefaultAmortPeriod=?DP, CustomGroupID=?CG, ContinuedUsage=?FJ, WasUsedMonths=?FK, UpdateDate=?UD WHERE ID=?TD ;</Statement>
    <Objects>Assets.LongTermAsset</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteLongTermAsset</Key>
    <Statement>DELETE FROM turtas WHERE turtas.ID=?LD ;</Statement>
    <Objects>Assets.LongTermAsset</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLongTermAsset</Key>
    <Statement>SELECT t.Turtas, t.Vnt, t.Vnt_kaina, t.Kiekis, t.Grupe, t.Isigijimo_dok, t.Likutine, t.Saskaita,
t.S_Amort, t.InvNr, t.TotalValue, t.AccountAmortization, t.DefaultAmortPeriod, t.CustomGroupID,
t.AccountValueIncrease, t.AccountValueDecrease, t.AccountRevaluedPortionAmmortization,
t.AcquisitionRevaluedPortionUnitValue, t.AcquisitionRevaluedPortionTotalValue,
t.AccumulatedAmortizationPerUnit, t.AccumulatedAmortizationRevaluedPortionPerUnit,
t.AccumulatedAmortizationRevaluedPortionTotal, t.ContinuedUsage, t.WasUsedMonths, t.InsertDate, t.UpdateDate FROM turtas t;</Statement>
    <Objects>Assets.LongTermAsset</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLongTermOperationInfoList</Key>
    <Statement>SELECT t.ID, t.OperationType, t.AccountOperationType, t.OperationDate, t.JE_ID, b.Op_Dok, b.Op_turinys, b.Op_dok_rusis, t.IsComplexAct, t.Content, t.AccountCorresponding, t.DocNo, t.UnitValueChange, t.AmmountChange, t.TotalValueChange, t.NewAmortizationPeriod, t.AmortizationCalculations, t.RevaluedPortionUnitValueChange, t.RevaluedPortionTotalValueChange, t.AcquisitionAccountChange, t.AcquisitionAccountChangePerUnit, t.AmortizationAccountChange, t.AmortizationAccountChangePerUnit, t.ValueDecreaseAccountChange, t.ValueDecreaseAccountChangePerUnit, t.ValueIncreaseAccountChange, t.ValueIncreaseAccountChangePerUnit, t.ValueIncreaseAmmortizationAccountChange, t.ValueIncreaseAmmortizationAccountChangePerUnit FROM turtas_op t LEFT JOIN bz b ON b.Op_ID=t.JE_ID WHERE t.T_ID=?AD ORDER BY t.OperationDate, t.ID;</Statement>
    <Objects>ActiveReports.LongTermAssetOperationInfoListParent</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLongTermAssetOperationInfoListParent</Key>
    <Statement>SELECT t.Turtas, t.Vnt, t.Grupe, t.CustomGroupID, g.Name, t.InvNr, t.Isigijimo_dok, b.Op_data, b.Op_Dok, b.Op_turinys, b.Op_dok_rusis, t.Saskaita, t.AccountAmortization, t.AccountValueDecrease, t.AccountValueIncrease, t.AccountRevaluedPortionAmmortization, t.Likutine, t.DefaultAmortPeriod, t.Vnt_kaina, t.Kiekis, t.TotalValue, t.AcquisitionRevaluedPortionUnitValue, t.AcquisitionRevaluedPortionTotalValue, t.S_Amort, t.AccumulatedAmortizationPerUnit, t.AccumulatedAmortizationRevaluedPortionTotal, t.AccumulatedAmortizationRevaluedPortionPerUnit, t.ContinuedUsage, t.WasUsedMonths, t.InsertDate, t.UpdateDate, t.ID FROM turtas t LEFT JOIN bz b ON b.Op_ID=t.Isigijimo_dok LEFT JOIN longtermassetcustomgroups g ON g.ID=t.CustomGroupID WHERE t.ID=?AD ;</Statement>
    <Objects>ActiveReports.LongTermAssetOperationInfoListParent, Assets.LongTermAsset</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLongTermAssetUpdateLimitingFactors</Key>
    <Statement>SELECT t.OperationType, t.OperationDate FROM turtas_op t WHERE t.T_ID=?AD ;</Statement>
    <Objects>Assets.AcquisitionChronologicValidator</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateLongTermAsset3</Key>
    <Statement>UPDATE turtas SET Turtas=?NM, Grupe=?GP, Isigijimo_dok=?JD, Vnt=?MU, InvNr=?VN, CustomGroupID=?CG, UpdateDate=?UD WHERE ID=?TD ;</Statement>
    <Objects>Assets.LongTermAsset</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateLongTermAsset4</Key>
    <Statement>UPDATE turtas SET Turtas=?NM, Grupe=?GP, Vnt=?MU, Likutine=?LQ, InvNr=?VN, DefaultAmortPeriod=?DP, CustomGroupID=?CG, ContinuedUsage=?FJ, WasUsedMonths=?FK, UpdateDate=?UD WHERE ID=?TD ;</Statement>
    <Objects>Assets.LongTermAsset</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateLongTermAsset5</Key>
    <Statement>UPDATE turtas SET Turtas=?NM, Grupe=?GP, Vnt=?MU, InvNr=?VN, CustomGroupID=?CG, UpdateDate=?UD WHERE ID=?TD ;</Statement>
    <Objects>Assets.LongTermAsset</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfLongTermAssetCanBeDeleted</Key>
    <Statement>SELECT b.Op_dok_rusis FROM turtas t, bz b WHERE b.Op_ID=t.Isigijimo_dok AND t.ID=?AD UNION SELECT d.OperationType FROM turtas_op d WHERE d.T_ID=?AD ;</Statement>
    <Objects>Assets.LongTermAsset</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLongTermAssetCustomGroupInfoList</Key>
    <Statement>SELECT l.ID, l.Name FROM longtermassetcustomgroups l;</Statement>
    <Objects>HelperLists.LongTermAssetCustomGroupInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLongTermAssetCustomGroupList</Key>
    <Statement>SELECT l.ID, l.Name FROM longtermassetcustomgroups l;</Statement>
    <Objects>Assets.LongTermAssetCustomGroupList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfLongTermAssetCustomGroupCanBeDeleted</Key>
    <Statement>SELECT t.CustomGroupID FROM turtas t WHERE t.CustomGroupID=?CD ;</Statement>
    <Objects>Assets.LongTermAssetCustomGroup</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteLongTermAssetCustomGroup</Key>
    <Statement>DELETE FROM longtermassetcustomgroups WHERE longtermassetcustomgroups.ID=?CD ;</Statement>
    <Objects>Assets.LongTermAssetCustomGroup</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateLongTermAssetCustomGroup</Key>
    <Statement>UPDATE longtermassetcustomgroups SET Name=?NM WHERE ID=?CD ;</Statement>
    <Objects>Assets.LongTermAssetCustomGroup</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertLongTermAssetCustomGroup</Key>
    <Statement>INSERT INTO longtermassetcustomgroups(Name) VALUES(?NM);</Statement>
    <Objects>Assets.LongTermAssetCustomGroup</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLongTermAssetAmortization1</Key>
    <Statement>SELECT (t.TotalValue - CASE WHEN t.AcquisitionRevaluedPortionTotalValue &lt; 0 THEN -t.AcquisitionRevaluedPortionTotalValue ELSE 0 END) AS AcquisitionValue, (t.Vnt_kaina - CASE WHEN t.AcquisitionRevaluedPortionUnitValue &lt; 0 THEN -t.AcquisitionRevaluedPortionUnitValue ELSE 0 END) AS AcquisitionValuePerUnit, (t.AccumulatedAmortizationRevaluedPortionTotal + CASE WHEN t.AcquisitionRevaluedPortionTotalValue &gt; 0 THEN t.AcquisitionRevaluedPortionTotalValue ELSE 0 END) AS RevaluedPortionValue, (t.AccumulatedAmortizationRevaluedPortionPerUnit + CASE WHEN t.AcquisitionRevaluedPortionUnitValue &gt; 0 THEN t.AcquisitionRevaluedPortionUnitValue ELSE 0 END) AS RevaluedPortionValuePerUnit, t.S_Amort, t.AccumulatedAmortizationPerUnit, t.AccumulatedAmortizationRevaluedPortionTotal, t.AccumulatedAmortizationRevaluedPortionPerUnit, t.Kiekis, t.WasUsedMonths, t.ContinuedUsage, t.DefaultAmortPeriod, t.Likutine, (SELECT MAX(d.OperationDate) FROM turtas_op d WHERE d.OperationType='amo' AND d.T_ID=t.ID AND d.ID&lt;&gt;?MD), b.Op_data, (SELECT g.OperationDate FROM turtas_op g WHERE g.ID=?MD AND g.T_ID=t.ID), t.Turtas FROM turtas t, bz b WHERE t.ID=?AD AND b.Op_ID=t.Isigijimo_dok;</Statement>
    <Objects>Assets.LongTermAssetAmortization</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLongTermAssetAmortization2</Key>
    <Statement>SELECT SUM(d.AcquisitionAccountChange - d.ValueDecreaseAccountChange) AS AcquisitionValue, SUM(d.AcquisitionAccountChangePerUnit - d.ValueDecreaseAccountChangePerUnit) AS AcquisitionValuePerUnit, SUM(d.ValueIncreaseAccountChange) AS RevaluedPortionValue, SUM(d.ValueIncreaseAccountChangePerUnit) AS RevaluedPortionValuePerUnit, SUM(d.AmortizationAccountChange) AS AccumulatedAmortization, SUM(d.AmortizationAccountChangePerUnit) AS AccumulatedAmortizationPerUnit, SUM(d.ValueIncreaseAmmortizationAccountChange) AS AccumulatedAmortizationRevaluedPortion, SUM(d.ValueIncreaseAmmortizationAccountChangePerUnit) AS AccumulatedAmortizationPerUnitRevaluedPortion, SUM(d.AmmountChange), SUM(d.AmortizationCalculatedForMonths), SUM(CASE WHEN d.OperationType='nau' THEN 1 ELSE 0 END), (SELECT g.NewAmortizationPeriod FROM turtas_op g WHERE g.T_ID=?AD AND g.OperationDate&lt;?DT AND g.OperationType='alk' ORDER BY g.OperationDate DESC LIMIT 1) FROM turtas_op d WHERE d.T_ID=?AD AND d.OperationDate&lt;?DT GROUP BY d.T_ID;</Statement>
    <Objects>Assets.LongTermAssetAmortization</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLongTermAssetAmortization3</Key>
    <Statement>SELECT (d.AcquisitionAccountChange - d.ValueDecreaseAccountChange) AS AcquisitionValue, (d.AcquisitionAccountChangePerUnit - d.ValueDecreaseAccountChangePerUnit) AS AcquisitionValuePerUnit, (d.ValueIncreaseAccountChange) AS RevaluedPortionValue, (d.ValueIncreaseAccountChangePerUnit) AS RevaluedPortionValuePerUnit, (d.AmortizationAccountChange) AS AccumulatedAmortization, (d.AmortizationAccountChangePerUnit) AS AccumulatedAmortizationPerUnit, (d.ValueIncreaseAmmortizationAccountChange) AS AccumulatedAmortizationRevaluedPortion, (d.ValueIncreaseAmmortizationAccountChangePerUnit) AS AccumulatedAmortizationPerUnitRevaluedPortion, (d.AmmountChange), (d.AmortizationCalculatedForMonths), d.OperationType, d.NewAmortizationPeriod, d.OperationDate FROM turtas_op d WHERE d.T_ID=?AD AND d.OperationDate&gt;=?DT AND d.ID&lt;&gt;?MD AND d.OperationDate&lt;?DE AND d.OperationType&lt;&gt;'aac' ORDER BY d.OperationDate, d.ID;</Statement>
    <Objects>Assets.LongTermAssetAmortization</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLongTermAssetInfoAcquisitionData1</Key>
    <Statement>SELECT t.ID, t.Turtas, t.Vnt, t.Grupe, g.Name, t.InvNr, t.Isigijimo_dok, b.Op_data, b.Op_Dok, b.Op_turinys, b.Op_dok_rusis, t.Saskaita, t.AccountAmortization, t.AccountValueDecrease, t.AccountValueIncrease, t.AccountRevaluedPortionAmmortization, t.Likutine, t.DefaultAmortPeriod, t.Vnt_kaina, t.Kiekis, t.TotalValue, t.AcquisitionRevaluedPortionUnitValue, t.AcquisitionRevaluedPortionTotalValue, t.S_Amort, t.AccumulatedAmortizationPerUnit, t.AccumulatedAmortizationRevaluedPortionTotal, t.AccumulatedAmortizationRevaluedPortionPerUnit, t.ContinuedUsage FROM turtas t LEFT JOIN longtermassetcustomgroups g ON g.ID=t.CustomGroupID INNER JOIN bz b ON b.Op_ID=t.Isigijimo_dok;</Statement>
    <Objects>ActiveReports.LongTermAssetInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLongTermAssetInfoAcquisitionData2</Key>
    <Statement>SELECT t.ID, t.Turtas, t.Vnt, t.Grupe, g.Name, t.InvNr, t.Isigijimo_dok, b.Op_data, b.Op_Dok, b.Op_turinys, b.Op_dok_rusis, t.Saskaita, t.AccountAmortization, t.AccountValueDecrease, t.AccountValueIncrease, t.AccountRevaluedPortionAmmortization, t.Likutine, t.DefaultAmortPeriod, t.Vnt_kaina, t.Kiekis, t.TotalValue, t.AcquisitionRevaluedPortionUnitValue, t.AcquisitionRevaluedPortionTotalValue, t.S_Amort, t.AccumulatedAmortizationPerUnit, t.AccumulatedAmortizationRevaluedPortionTotal, t.AccumulatedAmortizationRevaluedPortionPerUnit, t.ContinuedUsage FROM turtas t LEFT JOIN longtermassetcustomgroups g ON g.ID=t.CustomGroupID INNER JOIN bz b ON b.Op_ID=t.Isigijimo_dok WHERE t.CustomGroupID=?GR ;</Statement>
    <Objects>ActiveReports.LongTermAssetInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLongTermAssetInfoStatusData1</Key>
    <Statement>SELECT d.T_ID, SUM(d.AcquisitionAccountChange), SUM(d.AcquisitionAccountChangePerUnit), SUM(d.ValueDecreaseAccountChange), SUM(d.ValueDecreaseAccountChangePerUnit), SUM(d.ValueIncreaseAccountChange) AS RevaluedPortionValue, SUM(d.ValueIncreaseAccountChangePerUnit) AS RevaluedPortionValuePerUnit, SUM(d.AmortizationAccountChange) AS AccumulatedAmortization, SUM(d.AmortizationAccountChangePerUnit) AS AccumulatedAmortizationPerUnit, SUM(d.ValueIncreaseAmmortizationAccountChange) AS AccumulatedAmortizationRevaluedPortion, SUM(d.ValueIncreaseAmmortizationAccountChangePerUnit) AS AccumulatedAmortizationPerUnitRevaluedPortion, SUM(d.AmmountChange) FROM turtas_op d WHERE d.OperationDate&lt;?DF GROUP BY d.T_ID;</Statement>
    <Objects>ActiveReports.LongTermAssetInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLongTermAssetInfoStatusData2</Key>
    <Statement>SELECT d.T_ID, SUM(d.AcquisitionAccountChange), SUM(d.AcquisitionAccountChangePerUnit), SUM(d.ValueDecreaseAccountChange), SUM(d.ValueDecreaseAccountChangePerUnit), SUM(d.ValueIncreaseAccountChange) AS RevaluedPortionValue, SUM(d.ValueIncreaseAccountChangePerUnit) AS RevaluedPortionValuePerUnit, SUM(d.AmortizationAccountChange) AS AccumulatedAmortization, SUM(d.AmortizationAccountChangePerUnit) AS AccumulatedAmortizationPerUnit, SUM(d.ValueIncreaseAmmortizationAccountChange) AS AccumulatedAmortizationRevaluedPortion, SUM(d.ValueIncreaseAmmortizationAccountChangePerUnit) AS AccumulatedAmortizationPerUnitRevaluedPortion, SUM(d.AmmountChange) FROM turtas_op d, turtas t WHERE t.ID=d.T_ID AND t.CustomGroupID=?GR AND d.OperationDate&lt;?DF GROUP BY d.T_ID;</Statement>
    <Objects>ActiveReports.LongTermAssetInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLongTermAssetInfoChangesData1</Key>
    <Statement>SELECT d.T_ID, SUM(d.AcquisitionAccountChange), SUM(d.AcquisitionAccountChangePerUnit), SUM(d.ValueDecreaseAccountChange), SUM(d.ValueDecreaseAccountChangePerUnit), SUM(d.ValueIncreaseAccountChange) AS RevaluedPortionValue, SUM(d.ValueIncreaseAccountChangePerUnit) AS RevaluedPortionValuePerUnit, SUM(d.AmortizationAccountChange) AS AccumulatedAmortization, SUM(d.AmortizationAccountChangePerUnit) AS AccumulatedAmortizationPerUnit, SUM(d.ValueIncreaseAmmortizationAccountChange) AS AccumulatedAmortizationRevaluedPortion, SUM(d.ValueIncreaseAmmortizationAccountChangePerUnit) AS AccumulatedAmortizationPerUnitRevaluedPortion, SUM(d.AmmountChange), SUM(CASE WHEN d.OperationType='per' THEN d.AmmountChange ELSE 0 END), SUM(CASE WHEN d.OperationType='per' THEN - (d.AcquisitionAccountChange - d.ValueDecreaseAccountChange - d.AmortizationAccountChange - d.ValueIncreaseAmmortizationAccountChange + d.ValueIncreaseAccountChange) ELSE 0 END), SUM(CASE WHEN d.OperationType='nur' THEN d.AmmountChange ELSE 0 END), SUM(CASE WHEN d.OperationType='nur' THEN - (d.AcquisitionAccountChange - d.ValueDecreaseAccountChange - d.AmortizationAccountChange - d.ValueIncreaseAmmortizationAccountChange + d.ValueIncreaseAccountChange) ELSE 0 END) FROM turtas_op d WHERE d.OperationDate&gt;=?DF AND d.OperationDate&lt;=?DT GROUP BY d.T_ID;</Statement>
    <Objects>ActiveReports.LongTermAssetInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLongTermAssetInfoChangesData2</Key>
    <Statement>SELECT d.T_ID, SUM(d.AcquisitionAccountChange), SUM(d.AcquisitionAccountChangePerUnit), SUM(d.ValueDecreaseAccountChange), SUM(d.ValueDecreaseAccountChangePerUnit), SUM(d.ValueIncreaseAccountChange) AS RevaluedPortionValue, SUM(d.ValueIncreaseAccountChangePerUnit) AS RevaluedPortionValuePerUnit, SUM(d.AmortizationAccountChange) AS AccumulatedAmortization, SUM(d.AmortizationAccountChangePerUnit) AS AccumulatedAmortizationPerUnit, SUM(d.ValueIncreaseAmmortizationAccountChange) AS AccumulatedAmortizationRevaluedPortion, SUM(d.ValueIncreaseAmmortizationAccountChangePerUnit) AS AccumulatedAmortizationPerUnitRevaluedPortion, SUM(d.AmmountChange), SUM(CASE WHEN d.OperationType='per' THEN d.AmmountChange ELSE 0 END), SUM(CASE WHEN d.OperationType='per' THEN - (d.AcquisitionAccountChange - d.ValueDecreaseAccountChange - d.AmortizationAccountChange - d.ValueIncreaseAmmortizationAccountChange + d.ValueIncreaseAccountChange) ELSE 0 END), SUM(CASE WHEN d.OperationType='nur' THEN d.AmmountChange ELSE 0 END), SUM(CASE WHEN d.OperationType='nur' THEN - (d.AcquisitionAccountChange - d.ValueDecreaseAccountChange - d.AmortizationAccountChange - d.ValueIncreaseAmmortizationAccountChange + d.ValueIncreaseAccountChange) ELSE 0 END) FROM turtas_op d, turtas t WHERE t.ID=d.T_ID AND t.CustomGroupID=?GR AND d.OperationDate&gt;=?DF AND d.OperationDate&lt;=?DT GROUP BY d.T_ID;</Statement>
    <Objects>ActiveReports.LongTermAssetInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLongTermAssetOperationIdByJournalEntryId</Key>
    <Statement>SELECT t.ID FROM turtas_op t WHERE t.JE_ID=?JD ;</Statement>
    <Objects>Assets.OperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeAssetsTable1</Key>
    <Statement>UPDATE turtas SET Grupe='' WHERE Grupe IS NULL;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeAssetsTable2</Key>
    <Statement>UPDATE turtas SET S_Amort=0 WHERE S_Amort IS NULL;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeAssetsTable3</Key>
    <Statement>UPDATE turtas t SET t.TotalValue=CROUND(t.Vnt_kaina * t.Kiekis, 2), t.AccountAmortization=t.Saskaita, t.DefaultAmortPeriod=10, t.CustomGroupID=0, t.AccountValueIncrease=t.Saskaita, t.AccountValueDecrease=t.Saskaita, t.AccountRevaluedPortionAmmortization=t.Saskaita, t.AcquisitionRevaluedPortionUnitValue=0, t.AcquisitionRevaluedPortionTotalValue=0, t.AccumulatedAmortizationPerUnit=CROUND(t.S_Amort / t.Kiekis, 2), t.AccumulatedAmortizationRevaluedPortionPerUnit=0, t.AccumulatedAmortizationRevaluedPortionTotal=0, t.ContinuedUsage=0, t.WasUsedMonths=0, t.InsertDate=UTC_TIMESTAMP(), t.UpdateDate=UTC_TIMESTAMP();</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchOldFormatLongTermOperationList</Key>
    <Statement>SELECT t.ID, t.BZ_ID, t.Akto_nr, t.Pagrindas, t.N_data, (SELECT d.Op_saskaita FROM bzdata d WHERE d.Op_ID_BZ=t.BZ_ID AND d.Op_tipas='Debetas' LIMIT 1), t.Pokytis, t.Tipas FROM turtas_op t WHERE t.T_ID=?AD ORDER BY t.N_data, t.ID;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchOldFormatLongTermAssetList</Key>
    <Statement>SELECT t.ID, t.Vnt_kaina, t.Kiekis, t.S_Amort FROM turtas t;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeAssetsOperationsTable</Key>
    <Statement>UPDATE turtas_op t SET t.OperationType=?DK, t.OperationDate=?DT, t.JE_ID=?JD, t.Content=?CN, t.AccountCorresponding=?AC, t.ActNumber=0, t.DocNo=?NM, t.UnitValueChange=?UV, t.AmmountChange=?AM, t.TotalValueChange=?TV, t.NewAmortizationPeriod=?AP, t.AmortizationCalculations='', t.RevaluedPortionUnitValueChange=?RU, t.RevaluedPortionTotalValueChange=?RT, t.AcquisitionAccountChange=?DA, t.AcquisitionAccountChangePerUnit=?DB, t.AmortizationAccountChange=?DC, t.AmortizationAccountChangePerUnit=?DE, t.ValueDecreaseAccountChange=?DF, t.ValueDecreaseAccountChangePerUnit=?DG, t.ValueIncreaseAccountChange=0, t.ValueIncreaseAccountChangePerUnit=0, t.ValueIncreaseAmmortizationAccountChange=0, t.ValueIncreaseAmmortizationAccountChangePerUnit=0, t.AmortizationCalculatedForMonths=?UT WHERE t.ID=?OD ;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLongTermAssetOperationChildListParentLastNumber</Key>
    <Statement>SELECT MAX(t.IsComplexAct) FROM turtas_op t;</Statement>
    <Objects>Assets.OperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLongTermAssetComplexDocumentInfoList</Key>
    <Statement>SELECT t.IsComplexAct, t.OperationType, t.OperationDate, t.JE_ID, b.Op_Dok, b.Op_turinys, t.Content, t.AccountCorresponding, t.ActNumber FROM turtas_op t LEFT JOIN bz b ON b.Op_ID=t.JE_ID WHERE t.IsComplexAct&gt;0 AND t.OperationDate&gt;=?DF AND t.OperationDate&lt;=?DT GROUP BY t.IsComplexAct;</Statement>
    <Objects>ActiveReports.LongTermAssetComplexDocumentInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchPersonInfoList</Key>
    <Statement>SELECT a.ID, a.Pavad, a.Kodas, a.Adresas, a.SP_kodas, a.B_Sask, a.Bank, a.B_Kor, a.B_Kor_Tiek, a.E_Mail, a.SD_kodas, a.ContactInfo, a.InternalCode, a.IsObsolete, a.IsNaturalPerson, a.LanguageCode, a.CurrencyCode, a.IsClient, a.IsSupplier, a.IsWorker FROM asmenys a ORDER BY a.Pavad;</Statement>
    <Objects>HelperLists.PersonInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchPersonGroupAssignmentList</Key>
    <Statement>SELECT a.ID, g.ID, g.Name FROM persons_group g LEFT JOIN persons_group_assignments a ON a.GroupID=g.ID AND a.PersonsID=?PD ORDER BY g.Name;</Statement>
    <Objects>General.PersonGroupAssignmentList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchPerson</Key>
    <Statement>SELECT a.ID, a.Pavad, a.Kodas, a.Adresas, a.SP_kodas, a.B_Sask, a.Bank, a.B_Kor, a.B_Kor_Tiek, a.E_Mail, a.SD_kodas, COUNT(b.AK), a.ContactInfo, a.InternalCode, a.IsObsolete, a.IsNaturalPerson, a.LanguageCode, a.CurrencyCode, a.IsClient, a.IsSupplier, a.IsWorker, a.InsertDate, a.UpdateDate FROM asmenys a LEFT JOIN darbuotojai_d b ON b.AK=a.ID WHERE a.ID=?PD GROUP BY a.ID;</Statement>
    <Objects>General.Person</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchPersonGroupInfoList</Key>
    <Statement>SELECT p.ID, p.Name FROM persons_group p ORDER BY p.Name;</Statement>
    <Objects>HelperLists.PersonGroupInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchGoodsGroupInfoList</Key>
    <Statement>SELECT p.ID, p.Name FROM prekes_gr p ORDER BY p.Name;</Statement>
    <Objects>HelperLists.GoodsGroupInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>IsGoodsItemNameUnique</Key>
    <Statement>SELECT COUNT(g.ID) FROM goods g WHERE g.ID&lt;&gt;?IO AND TRIM(LOWER(g.Name))=TRIM(LOWER(?NM)) AND g.GroupID=?GR ;</Statement>
    <Objects>Goods.GoodsItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteGoodsOperation</Key>
    <Statement>DELETE FROM goodsoperations WHERE goodsoperations.ID=?OD ;</Statement>
    <Objects>Goods.OperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchCompanyDetails</Key>
    <Statement>SELECT 0, A.Code, A.AccountValue, 0 FROM CompanyAccounts A UNION SELECT 1, R.Code, 0, R.RateValue FROM CompanyRates R;</Statement>
    <Objects>General.Company, Settings.CompanyInfo</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchCompanyInfo</Key>
    <Statement>SELECT C.I_Kodas, C.I_Pavadinimas, C.I_PVM_kodas, C.I_Mail, C.I_Vadas, C.I_SD, C.NumbersInInvoice, C.AddDateToInvoiceNumber, C.DefaultInvoiceMadeContent, C.DefaultInvoiceReceivedContent, C.AccountClassPrefix11, C.AccountClassPrefix12, C.AccountClassPrefix21, C.AccountClassPrefix22, C.AccountClassPrefix31, C.AccountClassPrefix32, C.AccountClassPrefix41, C.AccountClassPrefix42, C.AccountClassPrefix51, C.AccountClassPrefix52, C.AccountClassPrefix61, C.AccountClassPrefix62, C.DefaultTaxNpdFormula, C.MeasureUnitInvoiceReceived, C.MeasureUnitInvoiceMade, C.I_Adresas, C.I_Bankas, C.I_Banko_sask, C.AddDateToTillIncomeOrderNumber, C.AddDateToTillSpendingsOrderNumber, C.BaseCurrency, C.Accountant, C.Cashier, (SELECT MAX(b.Op_data) FROM bz b WHERE b.Op_dok_rusis='uz' OR b.Op_dok_rusis='lik') FROM Imone C;</Statement>
    <Objects>Settings.CompanyInfo</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchRegionalDataLT</Key>
    <Statement>SELECT ?LC, c.I_Adresas, c.I_Bankas, c.I_Banko_sask, c.BankSWIFT, c.BankAddress, c.I_Koordinates, c.InvoiceInfoLine, c.MeasureUnitInvoiceMade, c.DiscountName, c.HeadTitle, (SELECT F.FormBytes FROM CompanyForms F WHERE UPPER(TRIM(F.LanguageCode))=UPPER(TRIM(?LC)) AND UPPER(TRIM(F.FormToken))=UPPER(TRIM(?IT))), (SELECT F.FormBytes FROM CompanyForms F WHERE UPPER(TRIM(F.LanguageCode))=UPPER(TRIM(?LC)) AND UPPER(TRIM(F.FormToken))=UPPER(TRIM(?LT))) FROM Imone c;</Statement>
    <Objects>General.CompanyRegionalData</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchRegionalData</Key>
    <Statement>SELECT c.LanguageCode, c.Address, c.Bank, c.BankAccount, c.BankSWIFT, c.BankAddress, c.Contacts, c.InvoiceInfoLine, c.MeasureUnitInvoiceMade, c.DiscountName, c.HeadTitle, (SELECT F.FormBytes FROM CompanyForms F WHERE UPPER(TRIM(F.LanguageCode))=UPPER(TRIM(c.LanguageCode)) AND UPPER(TRIM(F.FormToken))=UPPER(TRIM(?IT))), (SELECT F.FormBytes FROM CompanyForms F WHERE UPPER(TRIM(F.LanguageCode))=UPPER(TRIM(c.LanguageCode)) AND UPPER(TRIM(F.FormToken))=UPPER(TRIM(?LT))) FROM CompanyRegionalData c WHERE c.ID=?RD ;</Statement>
    <Objects>General.CompanyRegionalData</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertRegionalData</Key>
    <Statement>INSERT INTO CompanyRegionalData(LanguageCode,  Address,  Bank,  BankAccount,  BankSWIFT,  BankAddress,  Contacts,  InvoiceInfoLine,  MeasureUnitInvoiceMade,  DiscountName,  HeadTitle) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF, ?AG, ?AH, ?AI, ?AJ, ?AK);</Statement>
    <Objects>General.CompanyRegionalData</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteRegionalDataForms</Key>
    <Statement>DELETE FROM CompanyForms WHERE UPPER(TRIM(CompanyForms.LanguageCode))=UPPER(TRIM(?LC));</Statement>
    <Objects>General.CompanyRegionalData</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertRegionalDataForm</Key>
    <Statement>INSERT INTO CompanyForms(LanguageCode, FormToken, FormBytes) VALUES(?LC, ?FT, ?FB);</Statement>
    <Objects>General.CompanyRegionalData</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateCompanyRegionalData</Key>
    <Statement>UPDATE CompanyRegionalData SET Address=?AB, Bank=?AC, BankAccount=?AD, BankSWIFT=?AE, BankAddress=?AF, Contacts=?AG, InvoiceInfoLine=?AH, MeasureUnitInvoiceMade=?AI, DiscountName=?AJ, HeadTitle=?AK WHERE ID=?RD ;</Statement>
    <Objects>General.CompanyRegionalData</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateCompanyRegionalDataLT</Key>
    <Statement>UPDATE Imone SET I_Adresas=?AB, I_Bankas=?AC, I_Banko_sask=?AD, BankSWIFT=?AE, BankAddress=?AF, I_Koordinates=?AG, InvoiceInfoLine=?AH, MeasureUnitInvoiceMade=?AI, DiscountName=?AJ, HeadTitle=?AK;</Statement>
    <Objects>General.CompanyRegionalData</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfRegionalDataUnique</Key>
    <Statement>SELECT COUNT(R.ID) FROM CompanyRegionalData R WHERE R.ID&lt;&gt;?RD AND UPPER(TRIM(R.LanguageCode))=UPPER(TRIM(?LC));</Statement>
    <Objects>General.CompanyRegionalData</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteRegionalData</Key>
    <Statement>DELETE FROM CompanyRegionalData WHERE CompanyRegionalData.ID=?RD ;</Statement>
    <Objects>General.CompanyRegionalData</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteAllRegionalFormsByID</Key>
    <Statement>DELETE FROM CompanyForms WHERE UPPER(TRIM(CompanyForms.LanguageCode))=(SELECT UPPER(TRIM(R.LanguageCode)) FROM CompanyRegionalData R WHERE R.ID=?RD);</Statement>
    <Objects>General.CompanyRegionalData</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchCompanyRateList</Key>
    <Statement>SELECT C.ID, C.Code, C.RateValue FROM CompanyRates C;</Statement>
    <Objects>General.CompanyRateList, Settings.CompanyRateInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertCompanyRate</Key>
    <Statement>INSERT INTO CompanyRates(Code, RateValue) VALUES(?AA, ?AB);</Statement>
    <Objects>General.CompanyRate</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateCompanyRate</Key>
    <Statement>UPDATE CompanyRates SET RateValue=?AB WHERE ID=?RD ;</Statement>
    <Objects>General.CompanyRate</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchCompanyAccountList</Key>
    <Statement>SELECT C.ID, C.Code, C.AccountValue FROM CompanyAccounts C;</Statement>
    <Objects>General.CompanyAccountList, Settings.CompanyAccountInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertCompanyAccount</Key>
    <Statement>INSERT INTO CompanyAccounts(Code, AccountValue) VALUES(?AA, ?AB);</Statement>
    <Objects>General.CompanyAccount</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateCompanyAccount</Key>
    <Statement>UPDATE CompanyAccounts SET AccountValue=?AB WHERE ID=?AD ;</Statement>
    <Objects>General.CompanyAccount</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchCompanyRegionalInfoList</Key>
    <Statement>SELECT 0, ?LC, c.I_Adresas, c.I_Bankas, c.I_Banko_sask, c.BankSWIFT, c.BankAddress, c.I_Koordinates, c.InvoiceInfoLine, c.MeasureUnitInvoiceMade, c.DiscountName, c.HeadTitle, (SELECT F.FormBytes FROM CompanyForms F WHERE UPPER(TRIM(F.LanguageCode))=UPPER(TRIM(?LC)) AND UPPER(TRIM(F.FormToken))=UPPER(TRIM(?IT))), (SELECT F.FormBytes FROM CompanyForms F WHERE UPPER(TRIM(F.LanguageCode))=UPPER(TRIM(?LC)) AND UPPER(TRIM(F.FormToken))=UPPER(TRIM(?LT))) FROM Imone c UNION SELECT c.ID, c.LanguageCode, c.Address, c.Bank, c.BankAccount, c.BankSWIFT, c.BankAddress, c.Contacts, c.InvoiceInfoLine, c.MeasureUnitInvoiceMade, c.DiscountName, c.HeadTitle, (SELECT F.FormBytes FROM CompanyForms F WHERE UPPER(TRIM(F.LanguageCode))=UPPER(TRIM(c.LanguageCode)) AND UPPER(TRIM(F.FormToken))=UPPER(TRIM(?IT))), (SELECT F.FormBytes FROM CompanyForms F WHERE UPPER(TRIM(F.LanguageCode))=UPPER(TRIM(c.LanguageCode)) AND UPPER(TRIM(F.FormToken))=UPPER(TRIM(?LT))) FROM CompanyRegionalData c;</Statement>
    <Objects>HelperLists.CompanyRegionalInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchDocumentSerialInfoList</Key>
    <Statement>SELECT s.Serijos_ID, s.Serijos_dok, s.Serija FROM serijos s;</Statement>
    <Objects>HelperLists.DocumentSerialInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateTemplateBookEntry</Key>
    <Statement>UPDATE tipines_data SET T_saskaita=?AA WHERE D_ID=?TD ;</Statement>
    <Objects>General.TemplateBookEntry</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteTemplateBookEntry</Key>
    <Statement>DELETE FROM tipines_data WHERE tipines_data.D_ID=?TD ;</Statement>
    <Objects>General.TemplateBookEntry</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>SelectTemplateJournalEntry</Key>
    <Statement>SELECT t.Pavadinimas, t.Turinys, t.InsertDate, t.UpdateDate FROM tipines_op t WHERE t.T_ID=?BD ;</Statement>
    <Objects>General.TemplateJournalEntry</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>SelectTemplateBookEntryList</Key>
    <Statement>SELECT t.D_ID, t.T_tipas, t.T_saskaita FROM tipines_data t WHERE t.T_ID=?BD ;</Statement>
    <Objects>General.TemplateJournalEntry</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchTemplateJournalEntryInfoList</Key>
    <Statement>SELECT t.T_ID, t.Pavadinimas, t.Turinys, GROUP_CONCAT(CAST(d.T_tipas AS CHAR), CAST(d.T_saskaita AS CHAR) SEPARATOR ',') FROM tipines_op t LEFT JOIN tipines_data d ON d.T_ID=t.T_ID GROUP BY t.T_ID ORDER BY t.Pavadinimas</Statement>
    <Objects>HelperLists.TemplateJournalEntryInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateBookEntry</Key>
    <Statement>UPDATE bzdata SET Op_saskaita=?AC, Op_suma=?AD, Op_ana=?AE WHERE Nr=?BD ;</Statement>
    <Objects>General.BookEntry</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteBookEntry</Key>
    <Statement>DELETE FROM bzdata WHERE bzdata.Nr=?BD ;</Statement>
    <Objects>General.BookEntry</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfPersonMustBeEmployee</Key>
    <Statement>SELECT COUNT(b.AK) FROM darbuotojai_d b WHERE b.AK=?PD ;</Statement>
    <Objects>General.Person</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLastLabourContractNumber</Key>
    <Statement>SELECT MAX(d.DS_NR) FROM darbuotojai_d d WHERE LOWER(TRIM(d.DS_Serija))=LOWER(TRIM(?SR));</Statement>
    <Objects>Settings.CommandLastDocumentNumber</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchPayOutNaturalPerson</Key>
    <Statement>SELECT d.ID, b.Op_ID, b.Op_data, b.Op_Dok, b.Op_turinys, a.Pavad, a.Kodas, d.KodasSDA, d.Suma, d.Tar, d.TarPSDW, d.TarPSDE, d.TarSDW,d.TarSDE, d.SumaBruto, d.Kodas, d.KodasSD, d.BaseSODRA, d.InsertDate, d.UpdateDate, SUM(e.Op_suma) FROM d_kitos d LEFT JOIN bz b ON b.Op_ID = d.BZ_ID LEFT JOIN asmenys a ON a.ID = b.Op_analitika LEFT JOIN bzdata e ON e.Op_ID_BZ = b.Op_ID AND e.Op_tipas='Debetas' WHERE d.ID=?ND GROUP BY d.ID;</Statement>
    <Objects>Workers.PayOutNaturalPerson</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertCashAccount</Key>
    <Statement>INSERT INTO CashAccounts(Name, BankName, BankCode, IsLitasEsisCompliant, CurrencyCode, EnforceUniqueOperationID, BankFeeLimit, TypeID, BalanceAtBegining, IsObsolete, Account, BankAccountNumber, BankFeeCostsAccount, ManagingPersonID) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF, ?AG, ?AH, ?AI, ?AJ, ?AK, ?AL, ?AM, ?AN);</Statement>
    <Objects>Documents.CashAccount</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateCashAccount</Key>
    <Statement>UPDATE CashAccounts SET Name=?AA, BankName=?AB, BankCode=?AC, IsLitasEsisCompliant=?AD, CurrencyCode=?AE, EnforceUniqueOperationID=?AF, BankFeeLimit=?AG, BalanceAtBegining=?AI, IsObsolete=?AJ, Account=?AK, BankAccountNumber=?AL, BankFeeCostsAccount=?AM, ManagingPersonID=?AN WHERE ID=?CD ;</Statement>
    <Objects>Documents.CashAccount</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteCashAccount</Key>
    <Statement>DELETE FROM CashAccounts WHERE CashAccounts.ID=?CD ;</Statement>
    <Objects>Documents.CashAccount</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchCashAccountList</Key>
    <Statement>SELECT C.ID, C.Name, C.Account, C.BankAccountNumber, C.BankName, C.BankCode, C.IsLitasEsisCompliant, C.CurrencyCode, C.EnforceUniqueOperationID, C.BankFeeLimit, C.TypeID, C.BalanceAtBegining, C.IsObsolete, C.BankFeeCostsAccount, IFNULL(COUNT(b.ID), 0) + IFNULL(COUNT(i.BZ_ID), 0) + IFNULL(COUNT(p.BZ_ID), 0), a.ID, a.Pavad, a.Kodas, a.Adresas, a.SP_kodas, a.B_Sask, a.Bank, a.B_Kor, a.B_Kor_Tiek, a.E_Mail, a.SD_kodas, a.ContactInfo, a.InternalCode, a.IsObsolete, a.IsNaturalPerson, a.LanguageCode, a.CurrencyCode, a.IsClient, a.IsSupplier, a.IsWorker FROM CashAccounts C LEFT JOIN BankOperations b ON b.CashAccountID=C.ID LEFT JOIN kio i ON i.CashAccountID=C.ID LEFT JOIN kpo p ON p.CashAccountID=C.ID LEFT JOIN asmenys a ON a.ID=C.ManagingPersonID GROUP BY C.ID ORDER BY C.TypeID, C.Name;</Statement>
    <Objects>Documents.CashAccountList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchCashAccountInfoList</Key>
    <Statement>SELECT Z.ID, Z.Name, Z.Account, Z.BankAccountNumber, Z.BankName, Z.BankCode, Z.IsLitasEsisCompliant, Z.CurrencyCode, Z.EnforceUniqueOperationID, Z.BankFeeLimit, Z.TypeID, Z.IsObsolete, Z.BankFeeCostsAccount, Z.ManagingPersonID FROM CashAccounts Z ORDER BY CAST(Z.Account AS CHAR);</Statement>
    <Objects>HelperLists.CashAccountInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertInvoiceMadeItem</Key>
    <Statement>INSERT INTO sfd(SF_ID,  Rusis,  P_ID,  Preke,  NameAltLng, Kiekis,  Kaina,  SumOriginal,  Tar,  SumVatOriginal,  UnitValueLTL,  SumLTL,  SumVatLTL, Discount,  DiscountLTL,  DiscountVat,  DiscountVatLTL, Vnt, MeasureUnitAltLng, P_Sas, A_Sas, AccountDiscount, IncludeVatInObject, VatIsVirtual) VALUES(?AB, ?AC, ?AD, ?AE, ?AF, ?AG, ?AH, ?AI, ?AJ, ?AK, ?AL, ?AM, ?AN, ?AO, ?AQ, ?AP, ?AR, ?AT, ?AU, ?AV, ?AW, ?BA, ?BB, ?BC);</Statement>
    <Objects>Documents.InvoiceMadeItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateInvoiceMadeItem</Key>
    <Statement>UPDATE sfd SET Preke=?AE, NameAltLng=?AF, Kiekis=?AG, Kaina=?AH, SumOriginal=?AI, Tar=?AJ, SumVatOriginal=?AK, UnitValueLTL=?AL, SumLTL=?AM, SumVatLTL=?AN, Discount=?AO, DiscountLTL=?AQ, DiscountVat=?AP, DiscountVatLTL=?AR, Vnt=?AT, MeasureUnitAltLng=?AU, P_Sas=?AV, A_Sas=?AW, AccountDiscount=?BA, IncludeVatInObject=?BB, VatIsVirtual=?BC WHERE ID=?MD ;</Statement>
    <Objects>Documents.InvoiceMadeItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteInvoiceMadeItem</Key>
    <Statement>DELETE FROM sfd WHERE sfd.ID=?MD ;</Statement>
    <Objects>Documents.InvoiceMadeItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchInvoiceMadeItemList</Key>
    <Statement>SELECT O.ID, O.Preke, O.NameAltLng, O.Kiekis, O.Kaina, O.SumOriginal, O.Tar, O.SumVatOriginal, O.UnitValueLTL, O.SumLTL, O.SumVatLTL, O.Discount, O.DiscountLTL, O.DiscountVat, O.DiscountVatLTL, O.Rusis, O.P_ID, O.Vnt, O.MeasureUnitAltLng, O.P_Sas, O.A_Sas, O.AccountDiscount, O.IncludeVatInObject, O.VatIsVirtual FROM sfd O WHERE O.SF_ID=?MD GROUP BY O.ID;</Statement>
    <Objects>Documents.InvoiceMadeItemList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteAllInvoiceMadeItemsByOrder</Key>
    <Statement>DELETE FROM sfd WHERE sfd.SF_ID=?MD ;</Statement>
    <Objects>Documents.InvoiceMade</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchInvoiceMade</Key>
    <Statement>SELECT b.Op_data, O.InvoiceSerial, O.InvoiceNumber, b.Op_Dok, b.Op_turinys, O.CurrencyCode, O.CurrencyRate, O.LanguageCode, O.AddDateToNumberOptionWasUsed, O.NumbersInInvoice, O.CustomInfo, O.CustomInfoAltLng, O.CommentsInternal, O.VatExemptions, O.VatExemptionsAltLng, O.AccountPayer, O.InvoiceType, O.InsertDate, O.UpdateDate, O.ExternalID, O.DocumentState, a.ID, a.Pavad, a.Kodas, a.Adresas, a.SP_kodas, a.B_Sask, a.Bank, a.B_Kor, a.B_Kor_Tiek, a.E_Mail, a.SD_kodas, a.ContactInfo, a.InternalCode, a.IsObsolete, a.IsNaturalPerson, a.LanguageCode, a.CurrencyCode, a.IsClient, a.IsSupplier, a.IsWorker FROM bz b LEFT JOIN invoicesmade O ON O.ID=b.Op_ID LEFT JOIN asmenys a ON a.ID=b.Op_analitika WHERE O.ID=?MD GROUP BY b.Op_ID;</Statement>
    <Objects>Documents.InvoiceMade</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertInvoiceMade</Key>
    <Statement>INSERT INTO invoicesmade(ID,  InvoiceSerial,  InvoiceNumber,  CurrencyCode,   CurrencyRate,  LanguageCode,  VatExemptions,  VatExemptionsAltLng,  CustomInfo,  CustomInfoAltLng,  CommentsInternal,  AddDateToNumberOptionWasUsed,  NumbersInInvoice, AccountPayer, InvoiceType, ExternalID, InsertDate, UpdateDate, DocumentState) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF, ?AG, ?AH, ?AI, ?AJ, ?AK, ?AL, ?AM, ?AN, ?AO, ?AQ, ?AP, ?AP, ?AR);</Statement>
    <Objects>Documents.InvoiceMade</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateInvoiceMade</Key>
    <Statement>UPDATE invoicesmade SET InvoiceSerial=?AB, InvoiceNumber=?AC, CurrencyCode=?AD, CurrencyRate=?AE, LanguageCode=?AF, VatExemptions=?AG, VatExemptionsAltLng=?AH, CustomInfo=?AI, CustomInfoAltLng=?AJ, CommentsInternal=?AK, AddDateToNumberOptionWasUsed=?AL, NumbersInInvoice=?AM, AccountPayer=?AN, InvoiceType=?AO, ExternalID=?AQ, UpdateDate=?AP, DocumentState=?AR WHERE ID=?AA ;</Statement>
    <Objects>Documents.InvoiceMade</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteInvoiceMade</Key>
    <Statement>DELETE FROM invoicesmade WHERE invoicesmade.ID=?MD ;</Statement>
    <Objects>Documents.InvoiceMade</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertInvoiceReceivedItem</Key>
    <Statement>INSERT INTO sfg(BZ_ID,  Rus,  P_ID,  Preke,  Vnt,  V_KN,  V_KK,  Tarif,  PVM_S,  Sanaud,  SumOriginal,  SumVatOriginal,  UnitValueLTL,  SumLTL,  SumVatLTL, IncludeVatInObject) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF, ?AG, ?AH, ?AI, ?AJ, ?AK, ?AL, ?AM, ?AN, ?AO, ?AQ);</Statement>
    <Objects>Documents.InvoiceReceivedItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateInvoiceReceivedItem</Key>
    <Statement>UPDATE sfg SET Preke=?AD, Vnt=?AE, V_KN=?AF, V_KK=?AG, Tarif=?AH, PVM_S=?AI, Sanaud=?AJ, SumOriginal=?AK, SumVatOriginal=?AL, UnitValueLTL=?AM, SumLTL=?AN, SumVatLTL=?AO, IncludeVatInObject=?AQ WHERE ID=?MD ;</Statement>
    <Objects>Documents.InvoiceReceivedItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteInvoiceReceivedItem</Key>
    <Statement>DELETE FROM sfg WHERE sfg.ID=?MD ;</Statement>
    <Objects>Documents.InvoiceReceivedItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchInvoiceReceivedItemList</Key>
    <Statement>SELECT I.ID, I.Preke, I.V_KK, I.UnitValueLTL, I.SumLTL, I.Tarif, I.SumVatLTL, I.V_KN, I.SumOriginal, I.SumVatOriginal, I.Vnt, I.Rus, I.P_ID, I.PVM_S, I.Sanaud, I.IncludeVatInObject FROM sfg I WHERE I.BZ_ID=?MD GROUP BY I.ID;</Statement>
    <Objects>Documents.InvoiceReceivedItemList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchInvoiceReceived</Key>
    <Statement>SELECT b.Op_data, b.Op_Dok, b.Op_turinys, I.CurrencyCode, I.CurrencyRate, I.CommentsInternal, I.AccountSupplier, I.InvoiceType, I.InsertDate, I.UpdateDate, I.ExternalID, I.IndirectVatSum, I.IndirectVatAccount, I.IndirectVatCostsAccount, I.ActualDate, a.ID, a.Pavad, a.Kodas, a.Adresas, a.SP_kodas, a.B_Sask, a.Bank, a.B_Kor, a.B_Kor_Tiek, a.E_Mail, a.SD_kodas, a.ContactInfo, a.InternalCode, a.IsObsolete, a.IsNaturalPerson, a.LanguageCode, a.CurrencyCode, a.IsClient, a.IsSupplier, a.IsWorker FROM bz b LEFT JOIN invoicesreceived I ON I.ID=b.Op_ID LEFT JOIN asmenys a ON a.ID=b.Op_analitika WHERE I.ID=?MD GROUP BY b.Op_ID;</Statement>
    <Objects>Documents.InvoiceReceived</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertInvoiceReceived</Key>
    <Statement>INSERT INTO invoicesreceived(ID,  CurrencyCode,  CurrencyRate,  CommentsInternal,  AccountSupplier, InvoiceType, ExternalID, InsertDate, UpdateDate, IndirectVatSum, IndirectVatAccount, IndirectVatCostsAccount, ActualDate) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF, ?AG, ?AH, ?AH, ?AI, ?AJ, ?AK, ?AL);</Statement>
    <Objects>Documents.InvoiceReceived</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateInvoiceReceived</Key>
    <Statement>UPDATE invoicesreceived SET CurrencyCode=?AB, CurrencyRate=?AC, CommentsInternal=?AD, AccountSupplier=?AE, InvoiceType=?AF, ExternalID=?AG, UpdateDate=?AH, IndirectVatSum=?AI, IndirectVatAccount=?AJ, IndirectVatCostsAccount=?AK, ActualDate=?AL WHERE ID=?AA ;</Statement>
    <Objects>Documents.InvoiceReceived</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteInvoiceReceived</Key>
    <Statement>DELETE FROM InvoicesReceived WHERE InvoicesReceived.ID=?MD ;</Statement>
    <Objects>Documents.InvoiceReceived</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeInvoiceMade1</Key>
    <Statement>UPDATE sfd SET Tar=CROUND(Tar * 100, 0);</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeInvoiceMade2</Key>
    <Statement>UPDATE sfd SET SumOriginal=CROUND(Kaina * Kiekis, 2), SumVatOriginal=CROUND(CROUND(Kaina * Kiekis, 2) * Tar / 100, 2), UnitValueLTL=Kaina, SumLTL=CROUND(Kaina * Kiekis, 2), SumVatLTL=CROUND(CROUND(Kaina * Kiekis, 2) * Tar / 100, 2);</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeInvoiceMade3</Key>
    <Statement>INSERT INTO invoicesmade(ID, InvoiceSerial, InvoiceNumber, CurrencyCode, CurrencyRate, LanguageCode, VatExemptions, VatExemptionsAltLng, CustomInfo, CustomInfoAltLng, CommentsInternal, AddDateToNumberOptionWasUsed, NumbersInInvoice, AccountPayer, InsertDate, UpdateDate, InvoiceType, ExternalID, DocumentState) SELECT b.Op_ID, s.Serija, SUBSTRING(b.Op_Dok, LENGTH(s.Serija)+1), 'LTL', 1, 'LT', '', '', '', '', '', 0, 0, IFNULL(IF(f.ID IS NULL, d.Op_saskaita, 0), 0), UTC_TIMESTAMP(), UTC_TIMESTAMP(), 0, '', '' FROM bz b LEFT JOIN serijos s ON s.Serijos_dok='Sąskaita - faktūra' AND LOCATE(s.Serija, b.Op_Dok)=1 AND SUBSTRING(b.Op_Dok, LENGTH(s.Serija)+1,1) REGEXP '^[0-9]+$' LEFT JOIN bzdata d ON d.Op_tipas='Debetas' AND d.Op_ID_BZ=b.Op_ID LEFT JOIN sfd f ON f.SF_ID=b.Op_ID AND (f.S_Sas=d.Op_saskaita OR f.P_Sas=d.Op_saskaita) WHERE b.Op_dok_rusis='sf' GROUP BY b.Op_ID;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeInvoiceReceived1</Key>
    <Statement>UPDATE sfg SET Tarif=CROUND(Tarif * 100, 0);</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeInvoiceReceived2</Key>
    <Statement>UPDATE sfg SET SumOriginal=CROUND(CROUND(V_KN * V_KK, 2) + IFNULL(KorSum, 0) / 100, 2), SumVatOriginal=CROUND(CROUND(CROUND(CROUND(V_KN * V_KK, 2) + IFNULL(KorSum, 0) / 100, 2) * Tarif / 100, 2) + IFNULL(KorPVM, 0) / 100, 2), UnitValueLTL=V_KN, SumLTL=CROUND(CROUND(V_KN * V_KK, 2) + IFNULL(KorSum, 0) / 100, 2), SumVatLTL=CROUND(CROUND(CROUND(CROUND(V_KN * V_KK, 2) + IFNULL(KorSum, 0) / 100, 2) * Tarif / 100, 2) + IFNULL(KorPVM, 0) / 100, 2);</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeInvoiceReceived3</Key>
    <Statement>INSERT INTO invoicesreceived(ID, CurrencyCode, CurrencyRate, CommentsInternal, AccountSupplier, InsertDate, UpdateDate, InvoiceType, ExternalID, IndirectVatSum, IndirectVatAccount, IndirectVatCostsAccount, ActualDate) SELECT b.Op_ID, 'LTL', 1, '', IFNULL(d.Op_saskaita, 0), UTC_TIMESTAMP(), UTC_TIMESTAMP(), 0, '', 0, 0, 0, null FROM bz b LEFT JOIN bzdata d ON d.Op_tipas='Kreditas' AND d.Op_ID_BZ=b.Op_ID LEFT JOIN sfg f ON f.BZ_ID=b.Op_ID WHERE b.Op_dok_rusis='sg' GROUP BY b.Op_ID;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeCashAccounts1</Key>
    <Statement>INSERT INTO cashaccounts(Name, Account, BankAccountNumber, BankName, BankCode, IsLitasEsisCompliant, CurrencyCode, EnforceUniqueOperationID, BankFeeLimit, TypeID, BalanceAtBegining, IsObsolete) SELECT DISTINCT CONCAT('Kasos sąskaita ', CAST(d.Op_saskaita AS CHAR)), d.Op_saskaita, '', '', '', 0, 'LTL', 0, 0, 2, 0, 0 FROM bzdata d LEFT JOIN bz b ON b.Op_ID=d.Op_ID_BZ AND (b.Op_dok_rusis='kio' OR b.Op_dok_rusis='kpo') WHERE (b.Op_dok_rusis='kio' AND d.Op_tipas='Kreditas') OR (b.Op_dok_rusis='kpo' AND d.Op_tipas='Debetas');</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeCashAccounts2</Key>
    <Statement>INSERT INTO cashaccounts(Name, Account, BankAccountNumber, BankName, BankCode, IsLitasEsisCompliant, CurrencyCode, EnforceUniqueOperationID, BankFeeLimit, TypeID, BalanceAtBegining, IsObsolete) SELECT DISTINCT CONCAT('Banko sąskaita ', CAST(d.Op_saskaita AS CHAR)), d.Op_saskaita, '', '', '', 1, 'LTL', 1, 5, 0, 0, 0 FROM bzdata d LEFT JOIN bz b ON b.Op_ID=d.Op_ID_BZ AND b.Op_dok_rusis='b' LEFT JOIN banko c ON c.ID=b.Op_ID WHERE ((c.Tip='Kreditas' AND d.Op_tipas='Kreditas') OR (c.Tip='Debetas' AND d.Op_tipas='Debetas'));</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchInvoiceInfoItemListForInvoiceReceived</Key>
    <Statement>SELECT O.ID, C.ID, C.Pavad, C.Kodas, C.SP_kodas, C.E_Mail, b.Op_data, b.Op_Dok, b.Op_turinys, O.CurrencyCode, O.CurrencyRate, 'LT', O.CommentsInternal, MAX(I.Tarif), SUM(I.SumOriginal), SUM(I.SumVatOriginal), SUM(I.SumLTL), SUM(I.SumVatLTL), 0, 0, 0, 0, O.AccountSupplier, 0, O.IndirectVatSum FROM bz b LEFT JOIN InvoicesReceived O ON O.ID=b.Op_ID LEFT JOIN sfg as I ON I.BZ_ID=O.ID LEFT JOIN asmenys C ON C.ID=b.Op_analitika WHERE b.Op_data&gt;=?DF AND b.Op_data&lt;=?DT AND NOT O.ID IS NULL GROUP BY O.ID ORDER BY b.Op_data, b.Op_Dok;</Statement>
    <Objects>ActiveReports.InvoiceInfoItemList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchInvoiceInfoItemListForInvoiceReceivedByClient</Key>
    <Statement>SELECT O.ID, C.ID, C.Pavad, C.Kodas, C.SP_kodas, C.E_Mail, b.Op_data, b.Op_Dok, b.Op_turinys, O.CurrencyCode, O.CurrencyRate, 'LT', O.CommentsInternal, MAX(I.Tarif), SUM(I.SumOriginal), SUM(I.SumVatOriginal), SUM(I.SumLTL), SUM(I.SumVatLTL), 0, 0, 0, 0, O.AccountSupplier, 0, O.IndirectVatSum FROM bz b LEFT JOIN InvoicesReceived O ON O.ID=b.Op_ID LEFT JOIN sfg as I ON I.BZ_ID=O.ID LEFT JOIN asmenys C ON C.ID=b.Op_analitika WHERE b.Op_data&gt;=?DF AND b.Op_data&lt;=?DT AND NOT O.ID IS NULL AND B.Op_analitika=?PD GROUP BY O.ID ORDER BY b.Op_data, b.Op_Dok;</Statement>
    <Objects>ActiveReports.InvoiceInfoItemList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchInvoiceInfoItemListForInvoiceMade</Key>
    <Statement>SELECT O.ID, C.ID, C.Pavad, C.Kodas, C.SP_kodas, C.E_Mail, b.Op_data, b.Op_Dok, b.Op_turinys, O.CurrencyCode, O.CurrencyRate, O.LanguageCode, O.CommentsInternal, MAX(I.Tar), SUM(I.SumOriginal), SUM(I.SumVatOriginal), SUM(I.SumLTL), SUM(I.SumVatLTL), SUM(I.Discount), SUM(I.DiscountVat), SUM(I.DiscountLTL), SUM(I.DiscountVatLTL), O.AccountPayer, SUM(CASE WHEN I.VatIsVirtual&gt;0 THEN I.SumVatOriginal - I.DiscountVat ELSE 0 END) AS VirtualVat, SUM(CASE WHEN I.VatIsVirtual&gt;0 THEN I.SumVatLTL - I.DiscountVatLTL ELSE 0 END) AS VirtualVatLTL FROM bz b LEFT JOIN InvoicesMade O ON O.ID=b.Op_ID LEFT JOIN sfd as I ON I.SF_ID=O.ID LEFT JOIN asmenys C ON C.ID=b.Op_analitika WHERE b.Op_data&gt;=?DF AND b.Op_data&lt;=?DT AND NOT O.ID IS NULL GROUP BY O.ID ORDER BY b.Op_data, b.Op_Dok;</Statement>
    <Objects>ActiveReports.InvoiceInfoItemList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchInvoiceInfoItemListForInvoiceMadeByClient</Key>
    <Statement>SELECT O.ID, C.ID, C.Pavad, C.Kodas, C.SP_kodas, C.E_Mail, b.Op_data, b.Op_Dok, b.Op_turinys, O.CurrencyCode, O.CurrencyRate, O.LanguageCode, O.CommentsInternal, MAX(I.Tar), SUM(I.SumOriginal), SUM(I.SumVatOriginal), SUM(I.SumLTL), SUM(I.SumVatLTL), SUM(I.Discount), SUM(I.DiscountVat), SUM(I.DiscountLTL), SUM(I.DiscountVatLTL), O.AccountPayer, SUM(CASE WHEN I.VatIsVirtual&gt;0 THEN I.SumVatOriginal - I.DiscountVat ELSE 0 END) AS VirtualVat, SUM(CASE WHEN I.VatIsVirtual&gt;0 THEN I.SumVatLTL - I.DiscountVatLTL ELSE 0 END) AS VirtualVatLTL FROM bz b LEFT JOIN InvoicesMade O ON O.ID=b.Op_ID LEFT JOIN sfd as I ON I.SF_ID=O.ID LEFT JOIN asmenys C ON C.ID=b.Op_analitika WHERE b.Op_data&gt;=?DF AND b.Op_data&lt;=?DT AND NOT O.ID IS NULL AND B.Op_analitika=?PD GROUP BY O.ID ORDER BY b.Op_data, b.Op_Dok;</Statement>
    <Objects>ActiveReports.InvoiceInfoItemList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchTillSpendingsOrder</Key>
    <Statement>SELECT b.Op_data, b.Op_Dok, b.Op_turinys, k.Serija, k.Nr, k.AddDateToNumberOptionWasUsed, k.CurrencyRateInAccount, k.SumOriginal, k.SumLTL, k.IsUnderPayRoll, k.AccountCurrencyRateChangeImpact, k.CurrencyRateChangeImpact, k.Asmuo, k.Aprasas, k.Priedas, k.DocumentState, b.InsertDate, b.UpdateDate, k.Apysk, l.Op_data, l.Op_Dok, l.Op_turinys, Z.ID, Z.Name, Z.Account, Z.BankAccountNumber, Z.BankName, Z.BankCode, Z.IsLitasEsisCompliant, Z.CurrencyCode, Z.EnforceUniqueOperationID, Z.BankFeeLimit, Z.TypeID, Z.IsObsolete, Z.BankFeeCostsAccount, Z.ManagingPersonID, a.ID, a.Pavad, a.Kodas, a.Adresas, a.SP_kodas, a.B_Sask, a.Bank, a.B_Kor, a.B_Kor_Tiek, a.E_Mail, a.SD_kodas, a.ContactInfo, a.InternalCode, a.IsObsolete, a.IsNaturalPerson, a.LanguageCode, a.CurrencyCode, a.IsClient, a.IsSupplier, a.IsWorker FROM bz b LEFT JOIN kio k ON k.BZ_ID=b.Op_ID LEFT JOIN bz l ON l.Op_ID=k.Apysk LEFT JOIN CashAccounts Z ON Z.ID=k.CashAccountID LEFT JOIN asmenys a ON a.ID=b.Op_analitika WHERE k.BZ_ID=?BD GROUP BY b.Op_ID;</Statement>
    <Objects>Documents.TillSpendingsOrder</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertTillSpendingsOrder</Key>
    <Statement>INSERT INTO kio(BZ_ID,  AddDateToNumberOptionWasUsed,  CashAccountID,  Nr,  Serija,  Asmuo,  Priedas,  Aprasas,  Apysk,  CurrencyRateInAccount,  SumOriginal,  SumLTL,  IsUnderPayRoll,  AccountCurrencyRateChangeImpact,  CurrencyRateChangeImpact, DocumentState) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF, ?AG, ?AH, ?AI, ?AJ, ?AK, ?AL, ?AM, ?AN, ?AO, ?AQ);</Statement>
    <Objects>Documents.TillSpendingsOrder</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateTillSpendingsOrder</Key>
    <Statement>UPDATE kio SET CashAccountID=?AC, Nr=?AD, Serija=?AE, Asmuo=?AF, Priedas=?AG, Aprasas=?AH, Apysk=?AI, CurrencyRateInAccount=?AJ, SumOriginal=?AK, SumLTL=?AL, IsUnderPayRoll=?AM, AccountCurrencyRateChangeImpact=?AN, CurrencyRateChangeImpact=?AO, DocumentState=?AQ WHERE BZ_ID=?AA ;</Statement>
    <Objects>Documents.TillSpendingsOrder</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteTillSpendingsOrder</Key>
    <Statement>DELETE FROM kio WHERE kio.BZ_ID=?BD ;</Statement>
    <Objects>Documents.TillSpendingsOrder</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchTillIncomeOrder</Key>
    <Statement>SELECT b.Op_data, b.Op_Dok, b.Op_turinys, k.Serija, k.Nr, k.AddDateToNumberOptionWasUsed, k.CurrencyRateInAccount, k.SumOriginal, k.SumLTL, k.IsUnderPayRoll, k.AccountCurrencyRateChangeImpact, k.CurrencyRateChangeImpact, k.Asmuo, k.Aprasas, k.Priedas, k.DocumentState, b.InsertDate, b.UpdateDate, k.Apysk, l.Op_data, l.Op_Dok, l.Op_turinys, Z.ID, Z.Name, Z.Account, Z.BankAccountNumber, Z.BankName, Z.BankCode, Z.IsLitasEsisCompliant, Z.CurrencyCode, Z.EnforceUniqueOperationID, Z.BankFeeLimit, Z.TypeID, Z.IsObsolete, Z.BankFeeCostsAccount, Z.ManagingPersonID, a.ID, a.Pavad, a.Kodas, a.Adresas, a.SP_kodas, a.B_Sask, a.Bank, a.B_Kor, a.B_Kor_Tiek, a.E_Mail, a.SD_kodas, a.ContactInfo, a.InternalCode, a.IsObsolete, a.IsNaturalPerson, a.LanguageCode, a.CurrencyCode, a.IsClient, a.IsSupplier, a.IsWorker FROM bz b LEFT JOIN kpo k ON k.BZ_ID=b.Op_ID LEFT JOIN bz l ON l.Op_ID=k.Apysk LEFT JOIN CashAccounts Z ON Z.ID=k.CashAccountID LEFT JOIN asmenys a ON a.ID=b.Op_analitika WHERE k.BZ_ID=?BD GROUP BY b.Op_ID;</Statement>
    <Objects>Documents.TillIncomeOrder</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertTillIncomeOrder</Key>
    <Statement>INSERT INTO kpo(BZ_ID,  AddDateToNumberOptionWasUsed,  CashAccountID,  Nr,  Serija,  Asmuo,  Priedas,  Aprasas,  Apysk,  CurrencyRateInAccount,  SumOriginal,  SumLTL,  IsUnderPayRoll,  AccountCurrencyRateChangeImpact,  CurrencyRateChangeImpact, DocumentState) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF, ?AG, ?AH, ?AI, ?AJ, ?AK, ?AL, ?AM, ?AN, ?AO, ?AQ);</Statement>
    <Objects>Documents.TillIncomeOrder</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateTillIncomeOrder</Key>
    <Statement>UPDATE kpo SET CashAccountID=?AC, Nr=?AD, Serija=?AE, Asmuo=?AF, Priedas=?AG, Aprasas=?AH, Apysk=?AI, CurrencyRateInAccount=?AJ, SumOriginal=?AK, SumLTL=?AL, IsUnderPayRoll=?AM, AccountCurrencyRateChangeImpact=?AN, CurrencyRateChangeImpact=?AO, DocumentState=?AQ WHERE BZ_ID=?AA ;</Statement>
    <Objects>Documents.TillIncomeOrder</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteTillIncomeOrder</Key>
    <Statement>DELETE FROM kpo WHERE kpo.BZ_ID=?BD ;</Statement>
    <Objects>Documents.TillIncomeOrder</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchBankOperation</Key>
    <Statement>SELECT k.ID, b.Op_data, b.Op_Dok, b.Op_turinys, k.U_ID, k.CurrencyCode, k.CurrencyRate, k.CurrencyRateInAccount, k.SumOriginal, k.SumLTL, k.SumInAccount, k.AccountCurrencyRateChangeImpact, k.CurrencyRateChangeImpact, k.OriginalPerson, k.OriginalContent, k.AccountBankCurrencyConversionCosts, b.InsertDate, b.UpdateDate, Z.ID, Z.Name, Z.Account, Z.BankAccountNumber, Z.BankName, Z.BankCode, Z.IsLitasEsisCompliant, Z.CurrencyCode, Z.EnforceUniqueOperationID, Z.BankFeeLimit, Z.TypeID, Z.IsObsolete, Z.BankFeeCostsAccount, Z.ManagingPersonID, a.ID, a.Pavad, a.Kodas, a.Adresas, a.SP_kodas, a.B_Sask, a.Bank, a.B_Kor, a.B_Kor_Tiek, a.E_Mail, a.SD_kodas, a.ContactInfo, a.InternalCode, a.IsObsolete, a.IsNaturalPerson, a.LanguageCode, a.CurrencyCode, a.IsClient, a.IsSupplier, a.IsWorker FROM bz b LEFT JOIN BankOperations k ON k.ParentID=b.Op_ID LEFT JOIN CashAccounts Z ON Z.ID=k.CashAccountID LEFT JOIN asmenys a ON a.ID=b.Op_analitika WHERE b.Op_ID=?BD AND NOT Z.ID IS NULL GROUP BY k.ID ORDER BY k.SumOriginal DESC;</Statement>
    <Objects>Documents.BankOperation</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertBankOperation</Key>
    <Statement>INSERT INTO BankOperations(ParentID,  OriginalPerson,  OriginalContent,  CashAccountID,  U_ID,  CurrencyCode,  CurrencyRate,  CurrencyRateInAccount,  SumOriginal,  SumLTL,  SumInAccount,  AccountCurrencyRateChangeImpact,  CurrencyRateChangeImpact, AccountBankCurrencyConversionCosts) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF, ?AG, ?AH, ?AI, ?AJ, ?AK, ?AL, ?AM, ?AN);</Statement>
    <Objects>Documents.BankOperation</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateBankOperation</Key>
    <Statement>UPDATE BankOperations SET CashAccountID=?AD, U_ID=?AE, CurrencyCode=?AF, CurrencyRate=?AG, CurrencyRateInAccount=?AH, SumOriginal=?AI, SumLTL=?AJ, SumInAccount=?AK, AccountCurrencyRateChangeImpact=?AL, CurrencyRateChangeImpact=?AM, AccountBankCurrencyConversionCosts=?AN WHERE ID=?BD ;</Statement>
    <Objects>Documents.BankOperation</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteBankOperation</Key>
    <Statement>DELETE FROM BankOperations WHERE BankOperations.ParentID=?BD ;</Statement>
    <Objects>Documents.BankOperation</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfBankOperationUniqueCodeIsUnique</Key>
    <Statement>SELECT COUNT(b.ID) FROM BankOperations b WHERE b.ID&lt;&gt;?OD AND b.CashAccountID=?AD AND LOWER(TRIM(b.U_ID))=LOWER(TRIM(?UC));</Statement>
    <Objects>Documents.BankOperation</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>RecognizeBankOperationItemByUniqueCode</Key>
    <Statement>SELECT * FROM (SELECT d.Op_ID_BZ, d.Op_saskaita, a.ID, a.Pavad, a.Kodas, a.Adresas, a.SP_kodas, a.B_Sask, a.Bank, a.B_Kor, a.B_Kor_Tiek, a.E_Mail, a.SD_kodas, a.ContactInfo, a.InternalCode, a.IsObsolete, a.IsNaturalPerson, a.LanguageCode, a.CurrencyCode, a.IsClient, a.IsSupplier, a.IsWorker FROM BankOperations s LEFT JOIN bz b ON b.Op_ID=s.ParentID LEFT JOIN bzdata d ON d.Op_ID_BZ=b.Op_ID LEFT JOIN asmenys a ON a.ID=b.Op_analitika WHERE s.CashAccountID=?AD AND UPPER(TRIM(s.U_ID))=UPPER(TRIM(?UC)) AND d.Op_tipas=(CASE WHEN s.SumOriginal&lt;0 THEN 'Debetas' ELSE 'Kreditas' END) LIMIT 1) w UNION SELECT * FROM (SELECT 0 AS Op_ID_BZ, 0 AS Op_saskaita, a.ID, a.Pavad, a.Kodas, a.Adresas, a.SP_kodas, a.B_Sask, a.Bank, a.B_Kor, a.B_Kor_Tiek, a.E_Mail, a.SD_kodas, a.ContactInfo, a.InternalCode, a.IsObsolete, a.IsNaturalPerson, a.LanguageCode, a.CurrencyCode, a.IsClient, a.IsSupplier, a.IsWorker FROM asmenys a WHERE UPPER(TRIM(a.Kodas))=UPPER(TRIM(?CD)) OR (TRIM(?DC)&lt;&gt;'' AND UPPER(TRIM(a.B_Sask))=UPPER(TRIM(?DC))) LIMIT 1) q;</Statement>
    <Objects>Documents.BankOperationItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>RecognizeBankOperationItemByBestGuess</Key>
    <Statement>SELECT * FROM (SELECT d.Op_ID_BZ, d.Op_saskaita, a.ID, a.Pavad, a.Kodas, a.Adresas, a.SP_kodas, a.B_Sask, a.Bank, a.B_Kor, a.B_Kor_Tiek, a.E_Mail, a.SD_kodas, a.ContactInfo, a.InternalCode, a.IsObsolete, a.IsNaturalPerson, a.LanguageCode, a.CurrencyCode, a.IsClient, a.IsSupplier, a.IsWorker FROM BankOperations s LEFT JOIN bz b ON b.Op_ID=s.ParentID LEFT JOIN bzdata d ON d.Op_ID_BZ=b.Op_ID LEFT JOIN asmenys a ON a.ID=b.Op_analitika WHERE s.CashAccountID=?AD AND s.SumInAccount&gt;?BF AND s.SumInAccount=?SM AND UPPER(TRIM(S.OriginalPerson))=UPPER(TRIM(?OC)) AND b.Op_data=?DT AND d.Op_tipas=(CASE WHEN s.SumOriginal&lt;0 THEN 'Debetas' ELSE 'Kreditas' END) LIMIT 1) w UNION SELECT * FROM (SELECT 0 AS Op_ID_BZ, 0 AS Op_saskaita, a.ID, a.Pavad, a.Kodas, a.Adresas, a.SP_kodas, a.B_Sask, a.Bank, a.B_Kor, a.B_Kor_Tiek, a.E_Mail, a.SD_kodas, a.ContactInfo, a.InternalCode, a.IsObsolete, a.IsNaturalPerson, a.LanguageCode, a.CurrencyCode, a.IsClient, a.IsSupplier, a.IsWorker FROM asmenys a WHERE UPPER(TRIM(a.Kodas))=UPPER(TRIM(?CD)) OR (TRIM(?DC)&lt;&gt;'' AND UPPER(TRIM(a.B_Sask))=UPPER(TRIM(?DC))) LIMIT 1) q;</Statement>
    <Objects>Documents.BankOperationItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchCashOperationInfoList</Key>
    <Statement>SELECT b.Op_ID, b.Op_dok_rusis, a.Name, a.CurrencyCode, b.Op_data, b.Op_Dok, d.U_ID, b.Op_turinys, c.Pavad, c.Kodas, CASE WHEN NOT d.ID IS NULL THEN d.CurrencyCode ELSE CASE WHEN NOT k.BZ_ID IS NULL OR NOT p.BZ_ID IS NULL THEN a.CurrencyCode ELSE '' END END AS OperationCurrencyCode, CASE WHEN NOT d.ID IS NULL THEN d.CurrencyRate ELSE CASE WHEN NOT k.BZ_ID IS NULL THEN k.CurrencyRateInAccount ELSE CASE WHEN NOT p.BZ_ID IS NULL THEN p.CurrencyRateInAccount ELSE 1 END END END AS OperationCurrencyRate, SUM(CASE WHEN g.Op_tipas='Debetas' THEN g.Op_suma ELSE -g.Op_suma END) AS SumBookEntry, CASE WHEN NOT d.ID IS NULL THEN d.SumOriginal ELSE CASE WHEN NOT k.BZ_ID IS NULL THEN -k.SumOriginal ELSE CASE WHEN NOT p.BZ_ID IS NULL THEN p.SumOriginal ELSE 0 END END END AS SumOriginal, CASE WHEN NOT d.ID IS NULL THEN d.SumLTL ELSE CASE WHEN NOT k.BZ_ID IS NULL THEN -k.SumLTL ELSE CASE WHEN NOT p.BZ_ID IS NULL THEN p.SumLTL ELSE 0 END END END AS SumLTL, CASE WHEN NOT d.ID IS NULL THEN d.SumInAccount ELSE CASE WHEN NOT k.BZ_ID IS NULL THEN -k.SumOriginal ELSE CASE WHEN NOT p.BZ_ID IS NULL THEN p.SumOriginal ELSE 0 END END END AS SumInAccount, CASE WHEN NOT d.ID IS NULL THEN d.CurrencyRateInAccount ELSE CASE WHEN NOT k.BZ_ID IS NULL THEN k.CurrencyRateInAccount ELSE CASE WHEN NOT p.BZ_ID IS NULL THEN p.CurrencyRateInAccount ELSE 1 END END END AS CurrencyRateInAccount, CASE WHEN NOT d.ID IS NULL THEN d.CurrencyRateChangeImpact ELSE CASE WHEN NOT k.BZ_ID IS NULL THEN k.CurrencyRateChangeImpact ELSE CASE WHEN NOT p.BZ_ID IS NULL THEN p.CurrencyRateChangeImpact ELSE 0 END END END AS CurrencyRateChangeImpact, d.OriginalContent, d.OriginalPerson, b.Op_korespond FROM bz b LEFT JOIN asmenys c ON c.ID=b.Op_analitika LEFT JOIN bzdata g ON g.Op_ID_BZ=b.Op_ID LEFT JOIN cashaccounts a ON a.Account=g.Op_saskaita LEFT JOIN BankOperations d ON d.ParentID=b.Op_ID AND d.CashAccountID=a.ID LEFT JOIN kio k ON k.BZ_ID=b.Op_ID LEFT JOIN kpo p ON p.BZ_ID=b.Op_ID WHERE NOT a.ID IS NULL AND b.Op_data&gt;=?DF AND b.Op_data&lt;=?DT AND (?AD&lt;1 OR a.ID=?AD) AND (?CD&lt;1 OR c.ID=?CD) AND b.Op_dok_rusis&lt;&gt;'lik' GROUP BY d.ID, b.Op_ID ORDER BY b.Op_data;</Statement>
    <Objects>ActiveReports.CashOperationInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchCashOperationInfoListBalance</Key>
    <Statement>SELECT SUM(CASE WHEN b.Op_data&lt;?DF OR b.Op_dok_rusis='lik' THEN CASE WHEN h.Op_tipas='Debetas' THEN h.Op_suma ELSE -h.Op_suma END ELSE 0 END) AS BookEntryBalance, SUM(CASE WHEN b.Op_data&lt;?DF THEN IFNULL(d.SumInAccount, 0) - IFNULL(i.SumOriginal, 0) + IFNULL(p.SumOriginal, 0) ELSE 0 END) + a.BalanceAtBegining AS SumInAccountBalance, (SUM(CASE WHEN b.Op_data&lt;?DF THEN IFNULL(d.SumLTL, 0) - IFNULL(i.SumLTL, 0) + IFNULL(p.SumLTL, 0) ELSE 0 END) + SUM(CASE WHEN b.Op_dok_rusis='lik' THEN h.Op_suma ELSE 0 END)) AS SumLTLBalance, SUM(CASE WHEN b.Op_data&gt;=?DF AND b.Op_dok_rusis&lt;&gt;'lik' AND h.Op_tipas='Debetas' THEN h.Op_suma ELSE 0 END) AS TurnoverBookEntryDebit, SUM(CASE WHEN b.Op_data&gt;=?DF AND b.Op_dok_rusis&lt;&gt;'lik' AND h.Op_tipas&lt;&gt;'Debetas' THEN h.Op_suma ELSE 0 END) AS TurnoverBookEntryCredit, SUM(CASE WHEN b.Op_data&gt;=?DF AND h.Op_tipas='Debetas' THEN IFNULL(d.SumInAccount, 0) + IFNULL(p.SumOriginal, 0) ELSE 0 END) AS TurnoverInAccountDebit, SUM(CASE WHEN b.Op_data&gt;=?DF AND h.Op_tipas&lt;&gt;'Debetas' THEN -IFNULL(d.SumInAccount, 0) + IFNULL(i.SumOriginal, 0) ELSE 0 END) AS TurnoverInAccountCredit, SUM(CASE WHEN b.Op_data&gt;=?DF AND h.Op_tipas='Debetas' THEN IFNULL(d.SumLTL, 0) + IFNULL(p.SumLTL, 0) ELSE 0 END) AS TurnoverLTLDebit, SUM(CASE WHEN b.Op_data&gt;=?DF AND h.Op_tipas&lt;&gt;'Debetas' THEN IFNULL(-d.SumLTL, 0) + IFNULL(i.SumLTL, 0) ELSE 0 END) AS TurnoverLTLCredit FROM CashAccounts a LEFT JOIN bzdata h ON h.Op_saskaita=a.Account LEFT JOIN bz b ON b.Op_ID=h.Op_ID_BZ LEFT JOIN BankOperations d ON d.ParentID=b.Op_ID AND d.CashAccountID=A.ID LEFT JOIN kio i ON i.BZ_ID=b.Op_ID LEFT JOIN kpo p ON p.BZ_ID=b.Op_ID LEFT JOIN asmenys k ON k.ID=h.Op_ana OR (h.Op_ana=0 AND k.ID=b.Op_analitika) WHERE a.ID=?AD AND NOT h.Nr IS NULL AND (b.Op_dok_rusis='lik' OR b.Op_data&lt;=?DT) GROUP BY a.ID;</Statement>
    <Objects>ActiveReports.CashOperationInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchService</Key>
    <Statement>SELECT S.ID, S.Tip, S.TrPav, S.Amount, S.PVM, S.RateVatPurchase, S.Obsol, S.S_Sask, S.P_Sask, S.AccountPurchase, S.AccountVatPurchase, S.ServiceCode, S.InsertDate, S.UpdateDate, (SELECT IFNULL((SELECT COUNT(Q.ID) FROM sfd Q WHERE Q.Rusis=2 AND Q.P_ID=S.ID), 0) + IFNULL((SELECT COUNT(Q.ID) FROM sfg Q WHERE Q.Rus=2 AND Q.P_ID=S.ID), 0)) FROM Paslaugos S WHERE S.ID=?CD ;</Statement>
    <Objects>Documents.Service</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertService</Key>
    <Statement>INSERT INTO Paslaugos(Tip, TrPav, Amount, PVM, RateVatPurchase, Obsol, S_Sask, P_Sask, AccountPurchase, AccountVatPurchase, ServiceCode, InsertDate, UpdateDate) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF, ?AG, ?AH, ?AI, ?AJ, ?AK, ?AL, ?AL);</Statement>
    <Objects>Documents.Service</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateService</Key>
    <Statement>UPDATE Paslaugos SET Tip=?AA, TrPav=?AB, Amount=?AC, PVM=?AD, RateVatPurchase=?AE, Obsol=?AF, S_Sask=?AG, P_Sask=?AH, AccountPurchase=?AI, AccountVatPurchase=?AJ, ServiceCode=?AK, UpdateDate=?AL WHERE ID=?CD ;</Statement>
    <Objects>Documents.Service</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteService</Key>
    <Statement>DELETE FROM Paslaugos WHERE Paslaugos.ID=?CD ;</Statement>
    <Objects>Documents.Service</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteAllItemsInRegionalContents</Key>
    <Statement>DELETE FROM RegionalContents WHERE RegionalContents.ParentType=?CT AND RegionalContents.ParentID=?CD ;</Statement>
    <Objects>Documents.RegionalContentList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteAllItemsInRegionalPrices</Key>
    <Statement>DELETE FROM RegionalPrices WHERE RegionalPrices.ParentType=?CT AND RegionalPrices.ParentID=?CD ;</Statement>
    <Objects>Documents.RegionalPriceList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchServiceInfoList</Key>
    <Statement>SELECT S.ID, S.Tip, S.TrPav, S.Amount, S.PVM, S.RateVatPurchase, S.Obsol, S.S_Sask, S.P_Sask, S.AccountPurchase, S.AccountVatPurchase, R.ContentInvoice, R.MeasureUnit, R.VatExempt FROM Paslaugos S LEFT JOIN RegionalContents R ON R.ParentID=S.ID AND R.ParentType=0 AND UPPER(TRIM(R.LanguageCode))=UPPER(TRIM(?LN)) GROUP BY S.ID ORDER BY S.TrPav;</Statement>
    <Objects>HelperLists.ServiceInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertRegionalPrice</Key>
    <Statement>INSERT INTO RegionalPrices(ParentID, ParentType, CurrencyCode, ValuePerUnitSales, ValuePerUnitPurchases) VALUES(?AA, ?AB, ?AC, ?AD, ?AE);</Statement>
    <Objects>Documents.RegionalPrice</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateRegionalPrice</Key>
    <Statement>UPDATE RegionalPrices SET CurrencyCode=?AC, ValuePerUnitSales=?AD, ValuePerUnitPurchases=?AE WHERE ID=?CD ;</Statement>
    <Objects>Documents.RegionalPrice</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteRegionalPrice</Key>
    <Statement>DELETE FROM RegionalPrices WHERE RegionalPrices.ID=?CD ;</Statement>
    <Objects>Documents.RegionalPrice</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertRegionalContent</Key>
    <Statement>INSERT INTO RegionalContents(ParentID, ParentType, LanguageCode, ContentInvoice, MeasureUnit, VatExempt) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF);</Statement>
    <Objects>Documents.RegionalContent</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateRegionalContent</Key>
    <Statement>UPDATE RegionalContents SET LanguageCode=?AC, ContentInvoice=?AD, MeasureUnit=?AE, VatExempt=?AF WHERE ID=?CD ;</Statement>
    <Objects>Documents.RegionalContent</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteRegionalContent</Key>
    <Statement>DELETE FROM RegionalContents WHERE RegionalContents.ID=?CD ;</Statement>
    <Objects>Documents.RegionalContent</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchAdvanceReportItemList</Key>
    <Statement>SELECT R.ID, R.Dt, R.DocNr, R.Aprasas, R.Tipas, R.Suma, R.PVMTarifas, R.SumVat, R.SumLTL, R.SumVatLTL, R.CurrencyRateChangeEffect, R.AccountCurrencyRateChangeEffect, R.Sask, R.PVMSask, R.SG, IFNULL(M.ID, N.ID) AS InvoiceID, IFNULL(M.AccountPayer, N.AccountSupplier) AS InvoiceAccount, IFNULL(Q.Op_turinys, W.Op_turinys) AS InvoiceContent, (CASE WHEN NOT M.ID IS NULL THEN 1 ELSE 0 END) AS IsInvoiceMade, IFNULL(Q.Op_data, W.Op_data) AS InvoiceDate, IFNULL(Q.Op_Dok, W.Op_Dok) AS InvoiceNumber, IFNULL(M.CurrencyCode, N.CurrencyCode) AS InvoiceCurrency, IFNULL(M.CurrencyRate, N.CurrencyRate) AS InvoiceCurrencyRate, IFNULL(SUM(S.SumOriginal), SUM(T.SumOriginal)) AS InvoiceSum, IFNULL(SUM(S.SumVatOriginal), SUM(T.SumVatOriginal)) AS InvoiceSumVat, IFNULL(SUM(S.SumLTL), SUM(T.SumLTL)) AS InvoiceSumLTL, IFNULL(SUM(S.SumVatLTL), SUM(T.SumVatLTL)) AS InvoiceSumVatLTL, a.ID, a.Pavad, a.Kodas, a.Adresas, a.SP_kodas, a.B_Sask, a.Bank, a.B_Kor, a.B_Kor_Tiek, a.E_Mail, a.SD_kodas, a.ContactInfo, a.InternalCode, a.IsObsolete, a.IsNaturalPerson, a.LanguageCode, a.CurrencyCode, a.IsClient, a.IsSupplier, a.IsWorker, c.ID, c.Pavad, c.Kodas, c.Adresas, c.SP_kodas, c.B_Sask, c.Bank, c.B_Kor, c.B_Kor_Tiek, c.E_Mail, c.SD_kodas, c.ContactInfo, c.InternalCode, c.IsObsolete, c.IsNaturalPerson, c.LanguageCode, c.CurrencyCode, c.IsClient, c.IsSupplier, c.IsWorker FROM Apyskaitos R LEFT JOIN InvoicesMade M ON M.ID=R.SG LEFT JOIN InvoicesReceived N ON N.ID=R.SG LEFT JOIN SFD S ON S.SF_ID=M.ID LEFT JOIN SFG T ON T.BZ_ID=N.ID LEFT JOIN BZ Q ON Q.Op_ID=M.ID LEFT JOIN BZ W ON W.Op_ID=N.ID LEFT JOIN asmenys a ON a.ID=R.Analit LEFT JOIN asmenys c ON c.ID=Q.Op_analitika OR (Q.Op_analitika IS NULL AND c.ID=W.Op_analitika) WHERE R.BZ_ID=?CD GROUP BY R.ID;</Statement>
    <Objects>Documents.AdvanceReport</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertAdvanceReportItem</Key>
    <Statement>INSERT INTO Apyskaitos(BZ_ID, DocNr, Aprasas, Tipas, Suma, PVMTarifas, SumVat, SumLTL, SumVatLTL, SG, Dt, Analit, Sask, PVMSask, CurrencyRateChangeEffect, AccountCurrencyRateChangeEffect) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF, ?AG, ?AH, ?AI, ?AJ, ?AK, ?AL, ?AM, ?AN, ?AO, ?AP);</Statement>
    <Objects>Documents.AdvanceReportItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAdvanceReportItem</Key>
    <Statement>UPDATE Apyskaitos SET DocNr=?AB, Aprasas=?AC, Tipas=?AD, Suma=?AE, PVMTarifas=?AF, SumVat=?AG, SumLTL=?AH, SumVatLTL=?AI, Dt=?AK, Analit=?AL, Sask=?AM, PVMSask=?AN, CurrencyRateChangeEffect=?AO, AccountCurrencyRateChangeEffect=?AP WHERE ID=?CD ;</Statement>
    <Objects>Documents.AdvanceReportItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteAdvanceReportItem</Key>
    <Statement>DELETE FROM Apyskaitos WHERE Apyskaitos.ID=?CD ;</Statement>
    <Objects>Documents.AdvanceReportItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteAllAdvanceReportItems</Key>
    <Statement>DELETE FROM Apyskaitos WHERE Apyskaitos.BZ_ID=?CD ;</Statement>
    <Objects>Documents.AdvanceReport</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchAdvanceReport</Key>
    <Statement>SELECT b.Op_data, b.Op_Dok, b.Op_turinys, R.CurrencyCode, R.CurrencyRate, R.Account, R.Comments, R.CommentsInternal, R.DocumentState, b.InsertDate, b.UpdateDate, a.ID, a.Pavad, a.Kodas, a.Adresas, a.SP_kodas, a.B_Sask, a.Bank, a.B_Kor, a.B_Kor_Tiek, a.E_Mail, a.SD_kodas, a.ContactInfo, a.InternalCode, a.IsObsolete, a.IsNaturalPerson, a.LanguageCode, a.CurrencyCode, a.IsClient, a.IsSupplier, a.IsWorker FROM AdvanceReports R LEFT JOIN bz b ON b.Op_ID = R.ID LEFT JOIN asmenys a ON a.ID=b.Op_analitika WHERE R.ID=?CD GROUP BY R.ID;</Statement>
    <Objects>Documents.AdvanceReport</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertAdvanceReport</Key>
    <Statement>INSERT INTO AdvanceReports(ID, CurrencyCode, CurrencyRate, Account, Comments, CommentsInternal, DocumentState) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF, ?AG);</Statement>
    <Objects>Documents.AdvanceReport</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAdvanceReport</Key>
    <Statement>UPDATE AdvanceReports SET CurrencyCode=?AB, CurrencyRate=?AC, Account=?AD, Comments=?AE, CommentsInternal=?AF, DocumentState=?AG WHERE ID=?AA ;</Statement>
    <Objects>Documents.AdvanceReport</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteAdvanceReport</Key>
    <Statement>DELETE FROM AdvanceReports WHERE AdvanceReports.ID=?CD ;</Statement>
    <Objects>Documents.AdvanceReport</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchAdvanceReportInfoList</Key>
    <Statement>SELECT A.ID, B.Op_data, B.Op_Dok, B.Op_turinys, A.CurrencyCode, A.CurrencyRate, A.Comments, A.CommentsInternal, SUM(CASE WHEN D.Tipas = 'Debetas' THEN D.Suma ELSE 0 END), SUM(CASE WHEN D.Tipas = 'Debetas' THEN D.SumVat ELSE 0 END), SUM(CASE WHEN D.Tipas = 'Debetas' THEN D.SumLTL ELSE 0 END), SUM(CASE WHEN D.Tipas = 'Debetas' THEN D.SumVatLTL ELSE 0 END), SUM(CASE WHEN D.Tipas &lt;&gt; 'Debetas' THEN D.Suma ELSE 0 END), SUM(CASE WHEN D.Tipas &lt;&gt; 'Debetas' THEN D.SumVat ELSE 0 END), SUM(CASE WHEN D.Tipas &lt;&gt; 'Debetas' THEN D.SumLTL ELSE 0 END), SUM(CASE WHEN D.Tipas &lt;&gt; 'Debetas' THEN D.SumVatLTL ELSE 0 END), C.ID, C.Pavad, C.Kodas, A.Account, CASE WHEN NOT K.BZ_ID IS NULL THEN K.BZ_ID ELSE L.BZ_ID END, CASE WHEN NOT K.BZ_ID IS NULL THEN F.Op_data ELSE G.Op_data END, CASE WHEN NOT K.BZ_ID IS NULL THEN F.Op_Dok ELSE G.Op_Dok END, CASE WHEN NOT K.BZ_ID IS NULL THEN 0 ELSE 1 END FROM AdvanceReports A LEFT JOIN bz B ON B.Op_ID = A.ID LEFT JOIN asmenys C ON C.ID = B.Op_analitika LEFT JOIN Apyskaitos D ON D.BZ_ID = A.ID LEFT JOIN kio K ON K.Apysk = A.ID LEFT JOIN kpo L ON L.Apysk = A.ID LEFT JOIN bz F ON F.Op_ID = K.BZ_ID LEFT JOIN bz G ON G.Op_ID = L.BZ_ID WHERE B.Op_data&gt;=?DF AND B.Op_data&lt;=?DT AND (B.Op_analitika=?CD OR NOT ?CD &gt; 0) GROUP BY A.ID ORDER BY B.Op_data;</Statement>
    <Objects>ActiveReports.AdvanceReportInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeOldVersionRegionalContents1</Key>
    <Statement>INSERT INTO RegionalContents(ParentID, ParentType, LanguageCode, ContentInvoice, MeasureUnit, VatExempt) SELECT p.ID, 0, 'LT', p.Pav, p.Vnt, '' FROM paslaugos p;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeOldVersionRegionalPrices1</Key>
    <Statement>INSERT INTO RegionalPrices(ParentID, ParentType, CurrencyCode, ValuePerUnitSales, ValuePerUnitPurchases) SELECT p.ID, 0, 'LTL', p.Kaina, p.Kaina FROM paslaugos p;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeOldVersionAdvanceReports</Key>
    <Statement>UPDATE Apyskaitos SET SumVat=CROUND(CROUND(Suma * PVMTarifas / 100, 2) + PVMKor / 100, 2), SumLTL=Suma, SumVatLTL=CROUND(CROUND(Suma * PVMTarifas / 100, 2) + PVMKor / 100, 2);</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeOldVersionAdvanceReports2</Key>
    <Statement>INSERT INTO AdvanceReports(ID, CurrencyCode, CurrencyRate, Comments, CommentsInternal, Account, DocumentState) SELECT b.Op_ID, 'LT', 1, '', '', (SELECT d.Op_saskaita FROM bzdata d WHERE d.Op_ID_BZ = b.Op_ID AND d.Op_saskaita &lt;&gt; ALL(SELECT a.Sask FROM Apyskaitos a WHERE a.BZ_ID=b.Op_ID) AND d.Op_saskaita &lt;&gt; ALL(SELECT a.PVMSask FROM Apyskaitos a WHERE a.BZ_ID=b.Op_ID) LIMIT 1), '' FROM bz b WHERE b.Op_dok_rusis='ap';</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeCashAccounts</Key>
    <Statement>INSERT INTO CashAccounts(Name, Account, BankAccountNumber, BankName, BankCode, IsLitasEsisCompliant, CurrencyCode, EnforceUniqueOperationID, BankFeeLimit, TypeID, BalanceAtBegining, IsObsolete, BankFeeCostsAccount, ManagingPersonID) SELECT DISTINCT CONCAT('Banko sąskaita ', d.Op_saskaita), d.Op_saskaita, '', '', '', 1, 'LTL', 1, 10, 0, 0, 0, 0, 0 FROM bzdata d LEFT JOIN banko b ON b.ID = d.Op_ID_BZ WHERE NOT b.ID IS NULL AND b.Tip=d.Op_tipas UNION SELECT DISTINCT CONCAT('Kasa ', d.Op_saskaita), d.Op_saskaita, '', '', '', 0, 'LTL', 0, 0, 2, 0, 0, 0, 0 FROM bzdata d LEFT JOIN kio k ON k.BZ_ID = d.Op_ID_BZ LEFT JOIN kpo p ON p.BZ_ID = d.Op_ID_BZ WHERE (NOT k.BZ_ID IS NULL AND d.Op_tipas='Kreditas') OR (NOT p.BZ_ID IS NULL AND d.Op_tipas='Debetas');</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeBankOperations</Key>
    <Statement>INSERT INTO BankOperations(ParentID, U_ID, CashAccountID, OriginalPerson, OriginalContent, CurrencyCode, CurrencyRate, CurrencyRateInAccount, SumOriginal, SumLTL, SumInAccount, AccountCurrencyRateChangeImpact, CurrencyRateChangeImpact, AccountBankCurrencyConversionCosts) SELECT b.Op_ID, g.U_ID, c.ID, '', '', 'LTL', 1, 1, CASE WHEN g.Tip='Debetas' THEN d.Op_suma ELSE -d.Op_suma END, CASE WHEN g.Tip='Debetas' THEN d.Op_suma ELSE -d.Op_suma END, CASE WHEN g.Tip='Debetas' THEN d.Op_suma ELSE -d.Op_suma END, 0, 0, 0 FROM bzdata d LEFT JOIN CashAccounts c ON c.Account=d.Op_saskaita LEFT JOIN bz b ON b.Op_ID=d.Op_ID_BZ LEFT JOIN banko g ON g.ID=b.Op_ID WHERE NOT g.ID IS NULL AND NOT c.ID IS NULL;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeTillSpendingsOrders</Key>
    <Statement>UPDATE kio k SET CashAccountID=(SELECT c.ID FROM CashAccounts c LEFT JOIN bzdata d ON d.Op_saskaita=c.Account WHERE d.Op_ID_BZ=k.BZ_ID AND d.Op_tipas='Kreditas'), CurrencyRateInAccount=1, IsUnderPayRoll=(SELECT CASE WHEN b.Op_analitika IS NULL OR NOT b.Op_analitika &gt; 0 THEN 0 ELSE 1 END FROM bz b WHERE b.Op_ID=k.BZ_ID), SumOriginal=(SELECT SUM(d.Op_suma) FROM bzdata d WHERE d.Op_ID_BZ=k.BZ_ID AND d.Op_tipas='Kreditas'), SumLTL=(SELECT SUM(d.Op_suma) FROM bzdata d WHERE d.Op_ID_BZ=k.BZ_ID AND d.Op_tipas='Kreditas');</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeTillIncomeOrders</Key>
    <Statement>UPDATE kpo k SET CashAccountID=(SELECT c.ID FROM CashAccounts c LEFT JOIN bzdata d ON d.Op_saskaita=c.Account WHERE d.Op_ID_BZ=k.BZ_ID AND d.Op_tipas='Debetas'), CurrencyRateInAccount=1, IsUnderPayRoll=(SELECT CASE WHEN b.Op_analitika IS NULL OR NOT b.Op_analitika &gt; 0 THEN 0 ELSE 1 END FROM bz b WHERE b.Op_ID=k.BZ_ID), SumOriginal=(SELECT SUM(d.Op_suma) FROM bzdata d WHERE d.Op_ID_BZ=k.BZ_ID AND d.Op_tipas='Debetas'), SumLTL=(SELECT SUM(d.Op_suma) FROM bzdata d WHERE d.Op_ID_BZ=k.BZ_ID AND d.Op_tipas='Debetas');</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLastInvoiceNumber</Key>
    <Statement>SELECT IFNULL(MAX(O.InvoiceNumber), 0) FROM InvoicesMade O WHERE UPPER(TRIM(O.InvoiceSerial))=UPPER(TRIM(?SR)) AND AddDateToNumberOptionWasUsed&lt;1;</Statement>
    <Objects>Settings.CommandLastDocumentNumber</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLastInvoiceNumberWithDate</Key>
    <Statement>SELECT IFNULL(MAX(O.InvoiceNumber), 0) FROM InvoicesMade O LEFT JOIN bz B ON B.Op_ID=O.ID WHERE UPPER(TRIM(O.InvoiceSerial))=UPPER(TRIM(?SR)) AND B.Op_data=?DT AND AddDateToNumberOptionWasUsed&gt;0;</Statement>
    <Objects>Settings.CommandLastDocumentNumber</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLastTillIncomeOrderNumber</Key>
    <Statement>SELECT IFNULL(MAX(O.Nr), 0) FROM kpo O WHERE UPPER(TRIM(O.Serija))=UPPER(TRIM(?SR)) AND AddDateToNumberOptionWasUsed&lt;1;</Statement>
    <Objects>Settings.CommandLastDocumentNumber</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLastTillIncomeOrderNumberWithDate</Key>
    <Statement>SELECT IFNULL(MAX(O.Nr), 0) FROM kpo O LEFT JOIN bz b ON b.Op_ID=O.BZ_ID WHERE UPPER(TRIM(O.Serija))=UPPER(TRIM(?SR)) AND b.Op_data=?DT AND AddDateToNumberOptionWasUsed&gt;0;</Statement>
    <Objects>Settings.CommandLastDocumentNumber</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLastTillSpendingsOrderNumber</Key>
    <Statement>SELECT IFNULL(MAX(O.Nr), 0) FROM kio O WHERE UPPER(TRIM(O.Serija))=UPPER(TRIM(?SR)) AND AddDateToNumberOptionWasUsed&lt;1;</Statement>
    <Objects>Settings.CommandLastDocumentNumber</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLastTillSpendingsOrderNumberWithDate</Key>
    <Statement>SELECT IFNULL(MAX(O.Nr), 0) FROM kio O LEFT JOIN bz b ON b.Op_ID=O.BZ_ID WHERE UPPER(TRIM(O.Serija))=UPPER(TRIM(?SR)) AND b.Op_data=?DT AND AddDateToNumberOptionWasUsed&gt;0;</Statement>
    <Objects>Settings.CommandLastDocumentNumber</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteCreditAccountBankOperation</Key>
    <Statement>DELETE FROM BankOperations WHERE BankOperations.ID=?BD ;</Statement>
    <Objects>Documents.BankOperation</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchCurrentProfit</Key>
    <Statement>SELECT SUM(CASE WHEN d.Op_tipas='Debetas' THEN d.Op_suma ELSE 0 END) AS SumDebit, SUM(CASE WHEN d.Op_tipas='Kreditas' THEN d.Op_suma ELSE 0 END) AS SumCredit FROM bzdata d LEFT JOIN bz b ON b.Op_ID=d.Op_ID_BZ WHERE d.Op_saskaita=?AC AND b.Op_data&lt;=?DT GROUP BY d.Op_saskaita;</Statement>
    <Objects>General.ClosingEntriesCommand</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchOffsetItemList</Key>
    <Statement>SELECT O.ID, O.SumOriginal, O.CurrencyCode, O.CurrencyRate, O.CurrencyRateChangeImpact, O.OffsetType, O.Account, O.AccountCurrencyRateChangeImpact, O.Comments, a.ID, a.Pavad, a.Kodas, a.Adresas, a.SP_kodas, a.B_Sask, a.Bank, a.B_Kor, a.B_Kor_Tiek, a.E_Mail, a.SD_kodas, a.ContactInfo, a.InternalCode, a.IsObsolete, a.IsNaturalPerson, a.LanguageCode, a.CurrencyCode, a.IsClient, a.IsSupplier, a.IsWorker FROM OffsetItems O LEFT JOIN asmenys a ON a.ID=O.PersonID WHERE O.ParentID = ?BD GROUP BY O.ID;</Statement>
    <Objects>Documents.OffsetItemList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertOffsetItem</Key>
    <Statement>INSERT INTO OffsetItems(ParentID, SumOriginal, CurrencyCode, CurrencyRate, CurrencyRateChangeImpact, OffsetType, PersonID, Account, AccountCurrencyRateChangeImpact, Comments) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF, ?AG, ?AH, ?AI, ?AJ);</Statement>
    <Objects>Documents.OffsetItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateOffsetItem</Key>
    <Statement>UPDATE OffsetItems SET SumOriginal=?AB, CurrencyCode=?AC, CurrencyRate=?AD, CurrencyRateChangeImpact=?AE, OffsetType=?AF, PersonID=?AG, Account=?AH, AccountCurrencyRateChangeImpact=?AI, Comments=?AJ WHERE ID=?CD ;</Statement>
    <Objects>Documents.OffsetItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteOffsetItem</Key>
    <Statement>DELETE FROM OffsetItems WHERE OffsetItems.ID=?CD ;</Statement>
    <Objects>Documents.OffsetItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteAllOffsetItems</Key>
    <Statement>DELETE FROM OffsetItems WHERE OffsetItems.ParentID=?CD ;</Statement>
    <Objects>Documents.Offset</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchOffset</Key>
    <Statement>SELECT b.Op_data, b.Op_Dok, b.Op_turinys, b.Op_dok_rusis, b.InsertDate, b.UpdateDate FROM bz b WHERE b.Op_ID=?BD ;</Statement>
    <Objects>Documents.Offset</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeOldVersionOffsets</Key>
    <Statement>INSERT INTO OffsetItems(ParentID, PersonID, Account, OffsetType, SumOriginal, CurrencyCode, CurrencyRate, CurrencyRateChangeImpact, AccountCurrencyRateChangeImpact, Comments) SELECT b.Op_ID, CASE WHEN d.Op_ana IS NULL OR NOT d.Op_ana&gt;0 THEN b.Op_analitika ELSE d.Op_ana END, d.Op_saskaita, d.Op_tipas, d.Op_suma, 'LTL', 1, 0, 0, '' FROM bzdata d LEFT JOIN bz b ON b.Op_ID = d.Op_ID_BZ WHERE b.Op_dok_rusis='sk';</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeOldVersionFinancialStructure</Key>
    <Statement>INSERT INTO FinancialStatementsStructure(Name, IsCredit, StatementType, Lft, Rgt) VALUES(?AA, ?AB, ?AC, ?AD, ?AE);</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertConsolidatedReportItem</Key>
    <Statement>INSERT INTO FinancialStatementsStructure(Name, IsCredit, StatementType, Lft, Rgt) VALUES(?AB, ?AC, ?AD, ?AE, ?AF);</Statement>
    <Objects>General.ConsolidatedReportItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateConsolidatedReportItem</Key>
    <Statement>UPDATE FinancialStatementsStructure SET Name=?AB, IsCredit=?AC, StatementType=?AD, Lft=?AE, Rgt=?AF WHERE ID=?AA;</Statement>
    <Objects>General.ConsolidatedReportItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteConsolidatedReportItem</Key>
    <Statement>DELETE FROM FinancialStatementsStructure WHERE FinancialStatementsStructure.ID=?AA ;</Statement>
    <Objects>General.ConsolidatedReportItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchConsolidatedReport</Key>
    <Statement>SELECT node.ID, node.Name, (COUNT(parent.name) - 1) AS depth, node.StatementType, node.IsCredit, (SELECT COUNT(*) FROM SaskaituPl s WHERE UPPER(TRIM(s.Rusis)) = UPPER(TRIM(node.Name))), node.Lft, node.Rgt FROM FinancialStatementsStructure AS node, FinancialStatementsStructure AS parent WHERE node.lft BETWEEN parent.lft AND parent.rgt GROUP BY node.ID ORDER BY node.lft;</Statement>
    <Objects>General.ConsolidatedReport</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteAllConsolidatedReportItems</Key>
    <Statement>DELETE FROM FinancialStatementsStructure;</Statement>
    <Objects>General.ConsolidatedReport</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAllConsolidatedReportAccounts</Key>
    <Statement>UPDATE SaskaituPl SET fs_id=0;</Statement>
    <Objects>General.ConsolidatedReport</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchAssignableCRItemList</Key>
    <Statement>SELECT ID, Name FROM FinancialStatementsStructure WHERE Rgt = lft + 1 ORDER BY Lft;</Statement>
    <Objects>HelperLists.AssignableCRItemList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchAccountTurnoverInfoList</Key>
    <Statement>SELECT s.SaskaitosNr, s.Saskaita, f.Name, f.StatementType, k.DebitFirstPeriodStart, k.CreditFirstPeriodStart, k.DebitFirstPeriodTurnover, k.CreditFirstPeriodTurnover, k.DebitFirstPeriodTurnoverClosing, k.CreditFirstPeriodTurnoverClosing, k.DebitSecondPeriodTurnover, k.CreditSecondPeriodTurnover, k.DebitSecondPeriodTurnoverClosing, k.CreditSecondPeriodTurnoverClosing FROM saskaitupl s LEFT JOIN financialstatementsstructure f ON f.ID = s.fs_id LEFT JOIN (SELECT d.Op_saskaita AS LedgerAccount, SUM(CASE WHEN b.Op_Data&lt;?DF AND d.Op_tipas='Debetas' THEN d.Op_suma ELSE 0 END) AS DebitFirstPeriodStart, SUM(CASE WHEN b.Op_Data&lt;?DF AND d.Op_tipas='Kreditas' THEN d.Op_suma ELSE 0 END) AS CreditFirstPeriodStart, SUM(CASE WHEN b.Op_Data&gt;=?DF AND b.Op_Data&lt;?DT AND d.Op_tipas='Debetas' THEN d.Op_suma ELSE 0 END) AS DebitFirstPeriodTurnover, SUM(CASE WHEN b.Op_Data&gt;=?DF AND b.Op_Data&lt;?DT AND d.Op_tipas='Kreditas' THEN d.Op_suma ELSE 0 END) AS CreditFirstPeriodTurnover, SUM(CASE WHEN b.Op_Data&gt;=?DF AND b.Op_Data&lt;?DT AND d.Op_tipas='Debetas' AND b.Op_dok_rusis='uz' THEN d.Op_suma ELSE 0 END) AS DebitFirstPeriodTurnoverClosing, SUM(CASE WHEN b.Op_Data&gt;=?DF AND b.Op_Data&lt;?DT AND d.Op_tipas='Kreditas' AND b.Op_dok_rusis='uz' THEN d.Op_suma ELSE 0 END) AS CreditFirstPeriodTurnoverClosing, SUM(CASE WHEN b.Op_Data&gt;=?DT AND d.Op_tipas='Debetas' THEN d.Op_suma ELSE 0 END) AS DebitSecondPeriodTurnover, SUM(CASE WHEN b.Op_Data&gt;=?DT AND d.Op_tipas='Kreditas' THEN d.Op_suma ELSE 0 END) AS CreditSecondPeriodTurnover, SUM(CASE WHEN b.Op_Data&gt;=?DT AND d.Op_tipas='Debetas' AND b.Op_dok_rusis='uz' THEN d.Op_suma ELSE 0 END) AS DebitSecondPeriodTurnoverClosing, SUM(CASE WHEN b.Op_Data&gt;=?DT AND d.Op_tipas='Kreditas' AND b.Op_dok_rusis='uz' THEN d.Op_suma ELSE 0 END) AS CreditSecondPeriodTurnoverClosing FROM bzdata d LEFT JOIN bz b ON b.Op_ID=d.Op_ID_BZ WHERE b.Op_Data&lt;=?DE GROUP BY d.Op_saskaita) AS k ON k.LedgerAccount=s.SaskaitosNr GROUP BY s.SaskaitosNr ORDER BY CAST(s.SaskaitosNr AS CHAR);</Statement>
    <Objects>ActiveReports.FinancialStatementsInfo</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchFinancialStatementsBalance</Key>
    <Statement>SELECT f.RowType, f.RowID, f.RowName, f.Lft, f.Rgt, f.IsCredit, f.Depth, f.RelatedAccounts, CROUND(SUM(CASE WHEN b.Op_data&lt;?DF THEN CROUND(CASE WHEN (d.Op_tipas='Debetas' AND f.IsCredit=0) OR (d.Op_tipas='Kreditas' AND f.IsCredit=1) THEN d.Op_suma ELSE -d.Op_suma END, 2) ELSE 0 END), 2) AS BalanceStart, CROUND(SUM(CASE WHEN b.Op_data&lt;=?DT THEN CROUND(CASE WHEN (d.Op_tipas='Debetas' AND f.IsCredit=0) OR (d.Op_tipas='Kreditas' AND f.IsCredit=1) THEN d.Op_suma ELSE -d.Op_suma END, 2) ELSE 0 END), 2) AS BalanceEnd FROM (SELECT node.StatementType AS RowType, node.ID AS RowID, node.Name AS RowName, node.Lft AS Lft, node.Rgt AS Rgt, node.IsCredit AS IsCredit, CASE WHEN node.IsCredit&gt;0 THEN 'Kreditas' ELSE 'Debetas' END AS RowSumType, (COUNT(parent.name) - 1) AS Depth, (SELECT GROUP_CONCAT(CAST(s.SaskaitosNr AS CHAR) SEPARATOR ', ') FROM saskaitupl s WHERE s.fs_id = node.ID) AS RelatedAccounts FROM FinancialStatementsStructure AS node, FinancialStatementsStructure AS parent WHERE node.lft BETWEEN parent.lft AND parent.rgt GROUP BY node.ID ORDER BY node.lft) AS f LEFT JOIN FinancialStatementsStructure g ON g.Lft &gt;= f.Lft AND g.Rgt &lt;= f.Rgt LEFT JOIN saskaitupl s ON s.fs_ID = g.ID LEFT JOIN bzdata d ON d.Op_saskaita = s.SaskaitosNr LEFT JOIN bz b ON b.Op_ID=d.Op_ID_BZ GROUP BY f.RowID ORDER BY f.Lft;</Statement>
    <Objects>ActiveReports.FinancialStatementsInfo</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments1</Key>
    <Statement>UPDATE AdvanceReports SET Account=?AA WHERE Account=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments2</Key>
    <Statement>UPDATE Apyskaitos SET Sask=?AA WHERE Sask=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments3</Key>
    <Statement>UPDATE Apyskaitos SET PVMSask=?AA WHERE PVMSask=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments4</Key>
    <Statement>UPDATE Apyskaitos SET AccountCurrencyRateChangeEffect=?AA WHERE AccountCurrencyRateChangeEffect=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments5</Key>
    <Statement>UPDATE Asmenys SET B_Kor=?AA WHERE B_Kor=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments6</Key>
    <Statement>UPDATE Asmenys SET B_Kor_Tiek=?AA WHERE B_Kor_Tiek=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments7</Key>
    <Statement>UPDATE BankOperations SET AccountCurrencyRateChangeImpact=?AA WHERE AccountCurrencyRateChangeImpact=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments8</Key>
    <Statement>UPDATE BankOperations SET AccountBankCurrencyConversionCosts=?AA WHERE AccountBankCurrencyConversionCosts=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments9</Key>
    <Statement>UPDATE bzdata SET Op_saskaita=?AA WHERE Op_saskaita=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments10</Key>
    <Statement>UPDATE CashAccounts SET Account=?AA WHERE Account=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments11</Key>
    <Statement>UPDATE CashAccounts SET BankFeeCostsAccount=?AA WHERE BankFeeCostsAccount=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments12</Key>
    <Statement>UPDATE CompanyAccounts SET AccountValue=?AA WHERE AccountValue=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments13</Key>
    <Statement>UPDATE du_ziniarastis SET Saskaita=?AA WHERE Saskaita=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments14</Key>
    <Statement>UPDATE kio SET AccountCurrencyRateChangeImpact=?AA WHERE AccountCurrencyRateChangeImpact=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments15</Key>
    <Statement>UPDATE kpo SET AccountCurrencyRateChangeImpact=?AA WHERE AccountCurrencyRateChangeImpact=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments16</Key>
    <Statement>UPDATE OffsetItems SET Account=?AA WHERE Account=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments17</Key>
    <Statement>UPDATE OffsetItems SET AccountCurrencyRateChangeImpact=?AA WHERE AccountCurrencyRateChangeImpact=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments18</Key>
    <Statement>UPDATE Paslaugos SET P_Sask=?AA WHERE P_Sask=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments19</Key>
    <Statement>UPDATE Paslaugos SET S_Sask=?AA WHERE S_Sask=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments20</Key>
    <Statement>UPDATE Paslaugos SET AccountPurchase=?AA WHERE AccountPurchase=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments21</Key>
    <Statement>UPDATE Paslaugos SET AccountVatPurchase=?AA WHERE AccountVatPurchase=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments22</Key>
    <Statement>UPDATE Tipines_data SET T_saskaita=?AA WHERE T_saskaita=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments23</Key>
    <Statement>UPDATE Turtas SET Saskaita=?AA WHERE Saskaita=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments24</Key>
    <Statement>UPDATE Turtas SET AccountAmortization=?AA WHERE AccountAmortization=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments25</Key>
    <Statement>UPDATE Turtas SET AccountValueIncrease=?AA WHERE AccountValueIncrease=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments26</Key>
    <Statement>UPDATE Turtas SET AccountValueDecrease=?AA WHERE AccountValueDecrease=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments27</Key>
    <Statement>UPDATE Turtas SET AccountRevaluedPortionAmmortization=?AA WHERE AccountRevaluedPortionAmmortization=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments28</Key>
    <Statement>UPDATE Turtas_op SET AccountCorresponding=?AA WHERE AccountCorresponding=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchDebtInfoList</Key>
    <Statement>SELECT a.ID, a.Pavad, a.Kodas, a.SP_kodas, a.Adresas, (SELECT CONVERT(GROUP_CONCAT(g.Name SEPARATOR ', '), CHAR) FROM persons_group_assignments d LEFT JOIN persons_group g ON g.ID=d.GroupID WHERE d.PersonsID=a.ID  GROUP BY d.PersonsID) AS PersonGroups, SUM(CASE WHEN f.Op_tipas='Debetas' AND b.Op_data&lt;?DF THEN f.Op_suma ELSE 0 END) AS DebetTurnoverStart, SUM(CASE WHEN f.Op_tipas='Kreditas' AND b.Op_data&lt;?DF THEN f.Op_suma ELSE 0 END) AS CreditTurnoverStart, SUM(CASE WHEN f.Op_tipas='Debetas' AND b.Op_data&gt;=?DF THEN f.Op_suma ELSE 0 END) AS DebetTurnover, SUM(CASE WHEN f.Op_tipas='Kreditas' AND b.Op_data&gt;=?DF THEN f.Op_suma ELSE 0 END) AS CreditTurnover FROM bzdata f LEFT JOIN bz b ON b.Op_ID=f.Op_ID_BZ LEFT JOIN asmenys a ON a.ID=f.Op_ana OR (f.Op_ana&lt;1 AND a.ID=b.Op_analitika) WHERE f.Op_saskaita=?AC AND b.Op_data&lt;=?DT AND (?CG&lt;1 OR (SELECT COUNT(z.GroupID) FROM persons_group_assignments z WHERE z.PersonsID=a.ID AND z.GroupID=?CG)&gt;0) AND NOT a.ID IS NULL AND (?GT&gt;0 OR ((?FC&gt;0 AND a.IsClient) OR (?FS&gt;0 AND a.IsSupplier))) GROUP BY a.ID ORDER BY a.Pavad;</Statement>
    <Objects>ActiveReports.DebtInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeInvoiceReceived4</Key>
    <Statement>UPDATE sfg SET Rus=4 WHERE Rus=3;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeInvoiceReceived5</Key>
    <Statement>UPDATE sfg SET Rus=5 WHERE Rus=1;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfInvoiceMadeUpdateDateChanged</Key>
    <Statement>SELECT I.UpdateDate FROM invoicesmade I WHERE I.ID=?SD ;</Statement>
    <Objects>Documents.InvoiceMade</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfInvoiceReceivedUpdateDateChanged</Key>
    <Statement>SELECT I.UpdateDate FROM invoicesreceived I WHERE I.ID=?SD ;</Statement>
    <Objects>Documents.InvoiceReceived</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchServiceInfo</Key>
    <Statement>SELECT S.ID, S.Tip, S.TrPav, S.Amount, S.PVM, S.RateVatPurchase, S.Obsol, S.S_Sask, S.P_Sask, S.AccountPurchase, S.AccountVatPurchase, R.ContentInvoice, R.MeasureUnit, R.VatExempt FROM Paslaugos S LEFT JOIN RegionalContents R ON R.ParentID=S.ID AND R.ParentType=0 AND UPPER(TRIM(R.LanguageCode))=UPPER(TRIM(?LN)) WHERE S.ID=?SD GROUP BY S.ID ORDER BY S.TrPav;</Statement>
    <Objects>HelperLists.ServiceInfo</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchInvoiceReceivedIdByExternalID</Key>
    <Statement>SELECT I.ID FROM InvoicesReceived I WHERE I.ID&lt;&gt;?ND AND UPPER(TRIM(I.ExternalID))=UPPER(TRIM(?ED));</Statement>
    <Objects>Documents.InvoiceReceived</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchInvoiceMadeIdByExternalID</Key>
    <Statement>SELECT I.ID FROM InvoicesMade I WHERE I.ID&lt;&gt;?ND AND UPPER(TRIM(I.ExternalID))=UPPER(TRIM(?ED));</Statement>
    <Objects>Documents.InvoiceMade</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfInvoiceNumberUnique</Key>
    <Statement>SELECT InvoiceSerial, InvoiceNumber FROM InvoicesMade WHERE Upper(TRIM(InvoiceSerial))=Upper(TRIM(?SR)) AND InvoiceNumber=?NM AND ID&lt;&gt;?IN AND AddDateToNumberOptionWasUsed&lt;1;</Statement>
    <Objects>Documents.InvoiceMade</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfInvoiceNumberUniqueWithDate</Key>
    <Statement>SELECT I.InvoiceSerial, I.InvoiceNumber FROM InvoicesMade I LEFT JOIN bz B ON B.Op_ID=I.ID WHERE I.InvoiceNumber=?NM AND I.ID&lt;&gt;?IN AND B.Op_data=?ND AND Upper(TRIM(I.InvoiceSerial))=Upper(TRIM(?SR)) AND I.AddDateToNumberOptionWasUsed&gt;0;</Statement>
    <Objects>Documents.InvoiceMade</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfTillIncomeOrderNumberUnique</Key>
    <Statement>SELECT Serija, Nr FROM kpo WHERE Nr=?NM AND BZ_ID&lt;&gt;?IN AND Upper(TRIM(Serija))=Upper(TRIM(?SR));</Statement>
    <Objects>Documents.TillIncomeOrder</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfTillIncomeOrderNumberUniqueWithDate</Key>
    <Statement>SELECT I.Serija, I.Nr FROM kpo I LEFT JOIN bz B ON B.Op_ID=I.BZ_ID WHERE I.Nr=?NM AND I.BZ_ID&lt;&gt;?IN AND B.Op_data=?ND AND Upper(TRIM(I.Serija))=Upper(TRIM(?SR));</Statement>
    <Objects>Documents.TillIncomeOrder</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfTillSpendingsOrderNumberUnique</Key>
    <Statement>SELECT Serija, Nr FROM kio WHERE Nr=?NM AND BZ_ID&lt;&gt;?IN AND Upper(TRIM(Serija))=Upper(TRIM(?SR));</Statement>
    <Objects>Documents.TillSpendingsOrder</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfTillSpendingsOrderNumberUniqueWithDate</Key>
    <Statement>SELECT I.Serija, I.Nr FROM kio I LEFT JOIN bz B ON B.Op_ID=I.BZ_ID WHERE I.Nr=?NM AND I.BZ_ID&lt;&gt;?IN AND B.Op_data=?ND AND Upper(TRIM(I.Serija))=Upper(TRIM(?SR));</Statement>
    <Objects>Documents.TillSpendingsOrder</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchWorkTimeClassList</Key>
    <Statement>SELECT W.ID, W.Code, W.Name, W.InclusionPercentage, W.TypeID, W.SpecialWageShemaApplicable, W.SpecialWageShema, W.WithoutWorkHours, W.AlreadyIncludedInGeneralTime, COUNT(S.ID) + COUNT(D.ID) FROM WorkTimeClasss W LEFT JOIN SpecialWorkTimeItems S ON S.TypeID=W.ID LEFT JOIN DayWorkTimes D ON D.TypeID=W.ID GROUP BY W.ID ORDER BY W.TypeID, W.Code;</Statement>
    <Objects>Workers.WorkTimeClassList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertWorkTimeClass</Key>
    <Statement>INSERT INTO WorkTimeClasss(Code, Name, InclusionPercentage, TypeID, SpecialWageShemaApplicable, SpecialWageShema, WithoutWorkHours, AlreadyIncludedInGeneralTime) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF, ?AG, ?AH);</Statement>
    <Objects>Workers.WorkTimeClass</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateWorkTimeClass</Key>
    <Statement>UPDATE WorkTimeClasss SET Code=?AA, Name=?AB, InclusionPercentage=?AC, TypeID=?AD, SpecialWageShemaApplicable=?AE, SpecialWageShema=?AF, WithoutWorkHours=?AG, AlreadyIncludedInGeneralTime=?AH WHERE ID=?CD ;</Statement>
    <Objects>Workers.WorkTimeClass</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteWorkTimeClass</Key>
    <Statement>DELETE FROM WorkTimeClasss WHERE WorkTimeClasss.ID=?CD ;</Statement>
    <Objects>Workers.WorkTimeClass</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateWorkTimeClassLimited</Key>
    <Statement>UPDATE WorkTimeClasss SET Code=?AA, Name=?AB, SpecialWageShema=?AF WHERE ID=?CD ;</Statement>
    <Objects>Workers.WorkTimeClass</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchWorkTimeClassInfoList</Key>
    <Statement>SELECT W.ID, W.Code, W.Name, W.InclusionPercentage, W.TypeID, W.SpecialWageShemaApplicable, W.SpecialWageShema, W.WithoutWorkHours, W.AlreadyIncludedInGeneralTime FROM WorkTimeClasss W ORDER BY W.TypeID, W.Code;</Statement>
    <Objects>HelperLists.WorkTimeClassInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchSpecialWorkTimeItemList</Key>
    <Statement>SELECT S.ID, S.ContractSerial, S.ContractNumber, S.Day1, S.Day2, S.Day3, S.Day4, S.Day5, S.Day6, S.Day7, S.Day8, S.Day9, S.Day10, S.Day11, S.Day12, S.Day13, S.Day14, S.Day15, S.Day16, S.Day17, S.Day18, S.Day19, S.Day20, S.Day21, S.Day22, S.Day23, S.Day24, S.Day25, S.Day26, S.Day27, S.Day28, S.Day29, S.Day30, S.Day31, S.TotalHours, S.WorkerID, A.Pavad,  D.DU_tipas, W.ID, W.Code, W.Name, W.InclusionPercentage, W.TypeID, W.SpecialWageShemaApplicable, W.SpecialWageShema, W.WithoutWorkHours, W.AlreadyIncludedInGeneralTime FROM SpecialWorkTimeItems S LEFT JOIN Asmenys A ON A.ID=S.WorkerID LEFT JOIN Darbuotojai_D D ON D.AK=S.WorkerID AND D.Tipas='d' AND D.DS_NR=S.ContractNumber AND D.DS_Serija=S.ContractSerial LEFT JOIN WorkTimeClasss W ON W.ID=S.TypeID WHERE S.ParentID=?PD ORDER BY A.Pavad, S.ContractSerial, S.ContractNumber, W.Code;</Statement>
    <Objects>Workers.SpecialWorkTimeItemList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertSpecialWorkTimeItem</Key>
    <Statement>INSERT INTO SpecialWorkTimeItems(ParentID, ContractSerial, ContractNumber, Day1, Day2, Day3, Day4, Day5, Day6, Day7, Day8, Day9, Day10, Day11, Day12, Day13, Day14, Day15, Day16, Day17, Day18, Day19, Day20, Day21, Day22, Day23, Day24, Day25, Day26, Day27, Day28, Day29, Day30, Day31, TotalHours, WorkerID, TypeID) VALUES(?PD, ?AA, ?AB, ?AC, ?AD, ?AE, ?AF, ?AG, ?AH, ?AI, ?AJ, ?AK, ?AL, ?AM, ?AN, ?AO, ?AQ, ?AP, ?AR, ?AT, ?AU, ?AV, ?AZ, ?AW, ?BA, ?BB, ?BC, ?BD, ?BE, ?BF, ?BG, ?BH, ?BI, ?BJ, ?BK, ?BL, ?BM);</Statement>
    <Objects>Workers.SpecialWorkTimeItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateSpecialWorkTimeItem</Key>
    <Statement>UPDATE SpecialWorkTimeItems SET Day1=?AC, Day2=?AD, Day3=?AE, Day4=?AF, Day5=?AG, Day6=?AH, Day7=?AI, Day8=?AJ, Day9=?AK, Day10=?AL, Day11=?AM, Day12=?AN, Day13=?AO, Day14=?AQ, Day15=?AP, Day16=?AR, Day17=?AT, Day18=?AU, Day19=?AV, Day20=?AZ, Day21=?AW, Day22=?BA, Day23=?BB, Day24=?BC, Day25=?BD, Day26=?BE, Day27=?BF, Day28=?BG, Day29=?BH, Day30=?BI, Day31=?BJ, TotalHours=?BK WHERE ID=?CD ;</Statement>
    <Objects>Workers.SpecialWorkTimeItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteSpecialWorkTimeItem</Key>
    <Statement>DELETE FROM SpecialWorkTimeItems WHERE SpecialWorkTimeItems.ID=?CD ;</Statement>
    <Objects>Workers.SpecialWorkTimeItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchWorkTimeSheet</Key>
    <Statement>SELECT W.SheetDate, W.Number, W.SubDivision, W.SheetYear, W.SheetMonth, W.SignedByPosition, W.SignedByName, W.PreparedByPosition, W.PreparedByName, W.InsertDate, W.UpdateDate, V.ID, V.Code, V.Name, V.InclusionPercentage, V.TypeID, V.SpecialWageShemaApplicable, V.SpecialWageShema, V.WithoutWorkHours, V.AlreadyIncludedInGeneralTime, Q.ID, Q.Code, Q.Name, Q.InclusionPercentage, Q.TypeID, Q.SpecialWageShemaApplicable, Q.SpecialWageShema, Q.WithoutWorkHours, Q.AlreadyIncludedInGeneralTime FROM WorkTimeSheets W LEFT JOIN WorkTimeClasss V ON V.ID=W.RestTypeID LEFT JOIN WorkTimeClasss Q ON Q.ID=W.PublicHolidaysTypeID WHERE W.ID=?PD ;</Statement>
    <Objects>Workers.WorkTimeSheet</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertWorkTimeSheet</Key>
    <Statement>INSERT INTO WorkTimeSheets(SheetDate, Number, SubDivision, SheetYear, SheetMonth, SignedByPosition, SignedByName, PreparedByPosition, PreparedByName, InsertDate, UpdateDate, RestTypeID, PublicHolidaysTypeID) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF, ?AG, ?AH, ?AI, ?AJ, ?AJ, ?AK, ?AL);</Statement>
    <Objects>Workers.WorkTimeSheet</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateWorkTimeSheet</Key>
    <Statement>UPDATE WorkTimeSheets SET SheetDate=?AA, Number=?AB, SubDivision=?AC, SignedByPosition=?AF, SignedByName=?AG, PreparedByPosition=?AH, PreparedByName=?AI, UpdateDate=?AJ WHERE ID=?CD ;</Statement>
    <Objects>Workers.WorkTimeSheet</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteWorkTimeSheet</Key>
    <Statement>DELETE FROM WorkTimeSheets WHERE WorkTimeSheets.ID=?CD ;</Statement>
    <Objects>Workers.WorkTimeSheet</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteSpecialWorkTimeItemList</Key>
    <Statement>DELETE FROM SpecialWorkTimeItems WHERE SpecialWorkTimeItems.ParentID=?CD ;</Statement>
    <Objects>Workers.WorkTimeSheet</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchDayWorkTimeList</Key>
    <Statement>SELECT D.ParentID, D.ID, D.DayNumber, D.Length, W.ID, W.Code, W.Name, W.InclusionPercentage, W.TypeID, W.SpecialWageShemaApplicable, W.SpecialWageShema, W.WithoutWorkHours, W.AlreadyIncludedInGeneralTime FROM DayWorkTimes D LEFT JOIN WorkTimeClasss W ON W.ID=D.TypeID LEFT JOIN WorkTimeItems G ON G.ID=D.ParentID WHERE G.ParentID=?PD ORDER BY D.ParentID, D.DayNumber;</Statement>
    <Objects>Workers.DayWorkTimeList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertDayWorkTime</Key>
    <Statement>INSERT INTO DayWorkTimes(ParentID, DayNumber, Length, TypeID) VALUES(?PD, ?AA, ?AB, ?AC);</Statement>
    <Objects>Workers.DayWorkTime</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateDayWorkTime</Key>
    <Statement>UPDATE DayWorkTimes SET Length=?AB, TypeID=?AC WHERE ID=?CD ;</Statement>
    <Objects>Workers.DayWorkTime</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteDayWorkTimeForWorkTimeSheet</Key>
    <Statement>DELETE FROM DayWorkTimes WHERE (SELECT COUNT(D.ID) FROM WorkTimeItems D WHERE D.ParentID=?PD AND D.ID=DayWorkTimes.ParentID)&gt;0;</Statement>
    <Objects>Workers.DayWorkTime</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchWorkTimeItemList</Key>
    <Statement>SELECT G.ID, G.WorkerID, A.Pavad, (SELECT T.DU_tipas FROM Darbuotojai_D T WHERE T.Tipas='f' AND T.AK=G.WorkerID AND T.Nuo&lt;=?DT AND T.DS_NR=G.ContractNumber AND UPPER(TRIM(T.DS_Serija))=UPPER(TRIM(G.ContractSerial)) ORDER BY T.Nuo DESC LIMIT 1), IFNULL((SELECT T.Dydis FROM Darbuotojai_D T WHERE T.Tipas='k' AND T.AK=G.WorkerID AND T.Nuo&lt;=?DT AND T.DS_NR=G.ContractNumber AND UPPER(TRIM(T.DS_Serija))=UPPER(TRIM(G.ContractSerial)) ORDER BY T.Nuo DESC LIMIT 1), 0), G.ContractSerial, G.ContractNumber, G.QuotaDays, G.QuotaHours, G.TotalDays, G.TotalHours FROM WorkTimeItems G LEFT JOIN Asmenys A ON A.ID=G.WorkerID WHERE G.ParentID=?PD ORDER BY A.Pavad, G.ContractSerial, G.ContractNumber;</Statement>
    <Objects>Workers.WorkTimeItemList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertWorkTimeItem</Key>
    <Statement>INSERT INTO WorkTimeItems(ParentID, WorkerID, ContractSerial, ContractNumber, QuotaDays, QuotaHours, TotalDays, TotalHours) VALUES(?PD, ?AA, ?AB, ?AC, ?AD, ?AE, ?AF, ?AG);</Statement>
    <Objects>Workers.WorkTimeItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateWorkTimeItem</Key>
    <Statement>UPDATE WorkTimeItems SET QuotaDays=?AD, QuotaHours=?AE, TotalDays=?AF, TotalHours=?AG WHERE ID=?CD ;</Statement>
    <Objects>Workers.WorkTimeItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteWorkTimeItem</Key>
    <Statement>DELETE FROM WorkTimeItems WHERE WorkTimeItems.ID=?CD ;</Statement>
    <Objects>Workers.WorkTimeItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteDayWorkTimeListForWorkTimeItem</Key>
    <Statement>DELETE FROM DayWorkTimes WHERE DayWorkTimes.ParentID=?CD ;</Statement>
    <Objects>Workers.WorkTimeSheet</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteWorkTimeItemList</Key>
    <Statement>DELETE FROM WorkTimeItems WHERE WorkTimeItems.ParentID=?PD ;</Statement>
    <Objects>Workers.WorkTimeSheet</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CreateWorkTimeItemList</Key>
    <Statement>SELECT p.WorkerID, p.WorkerName, p.WorkerPosition, p.ContractSerial, p.ContractNum, p.WorkLoad, p.StartDate, p.EndDate FROM (SELECT t.AK AS WorkerID, a.Pavad AS WorkerName, t.DS_Serija AS ContractSerial, t.DS_NR AS ContractNum, MIN(CASE WHEN t.Tipas='d' THEN d.ID ELSE null END) AS ContractID, CAST(MIN(CASE WHEN t.Tipas='d' THEN t.MaxDate ELSE null END) AS Date) AS StartDate, CAST(MAX(CASE WHEN t.Tipas='n' THEN t.MaxDate ELSE null END) AS Date) As EndDate, MAX(CASE WHEN t.Tipas='k' THEN d.Dydis ELSE null END) AS WorkLoad, MAX(CASE WHEN t.Tipas='f' THEN d.DU_tipas ELSE null END) AS WorkerPosition FROM (SELECT AK AS AK, DS_Serija AS DS_Serija, DS_NR AS DS_NR, Tipas AS Tipas, MAX(Nuo) AS MaxDate FROM darbuotojai_d WHERE Nuo&lt;=?DT GROUP BY AK, DS_Serija, DS_NR, Tipas) t LEFT JOIN darbuotojai_d d ON d.AK=t.AK AND t.DS_Serija=d.DS_Serija AND t.DS_NR=d.DS_NR AND t.MaxDate=d.Nuo AND t.Tipas=d.Tipas LEFT JOIN asmenys a ON a.ID=t.AK GROUP BY t.AK, t.DS_Serija, t.DS_NR HAVING StartDate&lt;=?DT AND (EndDate IS NULL OR EndDate&gt;=?DF)) AS p LEFT JOIN worktimeitems w ON w.WorkerID=p.WorkerID AND w.ContractSerial=p.ContractSerial AND w.ContractNumber=p.ContractNum LEFT JOIN worktimesheets z ON z.ID=w.ParentID AND z.SheetYear=?YR AND z.SheetMonth=?MN WHERE z.ID IS NULL GROUP BY p.WorkerID, p.ContractSerial, p.ContractNum;</Statement>
    <Objects>Workers.WorkTimeItemList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfWorkTimeClassIsInUse</Key>
    <Statement>SELECT (SELECT COUNT(S.ID) FROM SpecialWorkTimeItems S WHERE S.TypeID=?TD) + (SELECT COUNT(D.ID) FROM DayWorkTimes D WHERE D.TypeID=?TD);</Statement>
    <Objects>Workers.WorkTimeClass</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchWorkTimeSheetInfoList</Key>
    <Statement>SELECT W.ID, W.SheetDate, W.SheetYear, W.SheetMonth, W.Subdivision, CASE WHEN NOT W.ID IS NULL THEN COUNT(DISTINCT I.ID) ELSE null END AS WorkersCount, SUM(I.TotalDays) AS TotalWorkDays, SUM(I.TotalHours) AS TotalWorkTime, S.NightWork,S. OvertimeWork, S.PublicHolidaysAndRestDayWork, S.UnusualWork, S.Truancy, S.DownTime, S.OtherExcluded, S.OtherIncluded, (SELECT COUNT(D.ID) FROM DayWorkTimes D LEFT JOIN WorkTimeItems J ON J.ID=D.ParentID LEFT JOIN WorkTimeClasss T ON T.ID=D.TypeID WHERE J.ParentID=W.ID AND T.TypeID=8) AS SickDays, (SELECT COUNT(D.ID) FROM DayWorkTimes D LEFT JOIN WorkTimeItems J ON J.ID=D.ParentID LEFT JOIN WorkTimeClasss T ON T.ID=D.TypeID WHERE J.ParentID=W.ID AND T.TypeID=9) AS AnnualHolidays, (SELECT COUNT(D.ID) FROM DayWorkTimes D LEFT JOIN WorkTimeItems J ON J.ID=D.ParentID LEFT JOIN WorkTimeClasss T ON T.ID=D.TypeID WHERE J.ParentID=W.ID AND T.TypeID=10) AS OtherHolidays FROM WorkTimeSheets W LEFT JOIN WorkTimeItems I ON I.ParentID=W.ID LEFT JOIN (SELECT S.ParentID AS ParentID, SUM(CASE WHEN C.TypeID=0 THEN S.TotalHours ELSE 0 END) AS NightWork, SUM(CASE WHEN C.TypeID=3 THEN S.TotalHours ELSE 0 END) AS OvertimeWork, SUM(CASE WHEN C.TypeID=4 THEN S.TotalHours ELSE 0 END) AS PublicHolidaysAndRestDayWork, SUM(CASE WHEN C.TypeID=6 THEN S.TotalHours ELSE 0 END) AS UnusualWork, SUM(CASE WHEN C.TypeID=5 THEN S.TotalHours ELSE 0 END) AS Truancy, SUM(CASE WHEN C.TypeID=7 THEN S.TotalHours ELSE 0 END) AS DownTime, SUM(CASE WHEN C.TypeID=1 THEN S.TotalHours ELSE 0 END) AS OtherExcluded, SUM(CASE WHEN C.TypeID=2 THEN S.TotalHours ELSE 0 END) AS OtherIncluded FROM SpecialWorkTimeItems S LEFT JOIN WorkTimeClasss C ON C.ID=S.TypeID LEFT JOIN WorkTimeSheets K ON K.ID=S.ParentID WHERE K.SheetDate&gt;=?DF AND K.SheetDate&lt;=?DT GROUP BY S.ParentID) S ON S.ParentID=W.ID WHERE W.SheetDate&gt;=?DF AND W.SheetDate&lt;=?DT GROUP BY W.ID ORDER BY W.SheetYear, W.SheetMonth;</Statement>
    <Objects>ActiveReports.WorkTimeSheetInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfWorkTimeSheetUpdateDateChanged</Key>
    <Statement>SELECT W.UpdateDate FROM WorkTimeSheets W WHERE W.ID=?CD ;</Statement>
    <Objects>Workers.WorkTimeSheet</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfImprestSheetUpdateDateChanged</Key>
    <Statement>SELECT A.UpdateDate FROM d_avansai A WHERE A.ID=?CD ;</Statement>
    <Objects>Workers.ImprestSheet, Workers.WagePayOutDocument</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfPayOutNaturalPersonUpdateDateChanged</Key>
    <Statement>SELECT D.UpdateDate FROM d_kitos D WHERE D.ID=?CD ;</Statement>
    <Objects>Workers.PayOutNaturalPerson</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateImprestSheetUpdateDate</Key>
    <Statement>UPDATE d_avansai SET UpdateDate=?UD ;</Statement>
    <Objects>Workers.WagePayOutDocument</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateWageSheetUpdateDate</Key>
    <Statement>UPDATE du_ziniarastis SET UpdateDate=?UD ;</Statement>
    <Objects>Workers.WagePayOutDocument</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfWageSheetUpdateDateChanged</Key>
    <Statement>SELECT D.UpdateDate FROM du_ziniarastis D WHERE D.ID=?CD ;</Statement>
    <Objects>Workers.WageSheet, Workers.WagePayOutDocument</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfJournalEntryUpdateDateChanged</Key>
    <Statement>SELECT B.UpdateDate FROM bz B WHERE B.Op_ID=?CD ;</Statement>
    <Objects>General.JournalEntry</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfTemplateJournalEntryUpdateDateChanged</Key>
    <Statement>SELECT T.UpdateDate FROM tipines_op T WHERE T.T_ID=?CD ;</Statement>
    <Objects>General.TemplateJournalEntry</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfPersonUpdateDateChanged</Key>
    <Statement>SELECT A.UpdateDate FROM asmenys A WHERE a.ID=?CD ;</Statement>
    <Objects>General.Person</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfServiceUpdateDateChanged</Key>
    <Statement>SELECT S.UpdateDate FROM Paslaugos S WHERE S.ID=?CD ;</Statement>
    <Objects>Documents.Service</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfServiceWasUsed</Key>
    <Statement>SELECT IFNULL((SELECT COUNT(Q.ID) FROM sfd Q WHERE Q.Rusis=2 AND Q.P_ID=?SD), 0) + IFNULL((SELECT COUNT(Q.ID) FROM sfg Q WHERE Q.Rus=2 AND Q.P_ID=?SD), 0);</Statement>
    <Objects>Documents.Service</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfLongTermAssetUpdateDateChanged</Key>
    <Statement>SELECT t.UpdateDate FROM turtas t WHERE t.ID=?CD ;</Statement>
    <Objects>Assets.LongTermAsset</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchIndirectRelationInfoList</Key>
    <Statement>SELECT 0, D.ID, B.Op_data, B.Op_Dok, B.Op_turinys, null FROM d_kitos D LEFT JOIN bz B ON B.Op_ID=D.BZ_ID WHERE D.BZ_ID=?JD UNION SELECT 2, T.ID, B.Op_data, B.Op_Dok, T.Turtas, null FROM turtas T LEFT JOIN bz B ON B.Op_ID=T.Isigijimo_dok LEFT JOIN sfd I ON I.SF_ID=T.Isigijimo_dok AND I.Rusis=4 AND I.P_ID=T.ID LEFT JOIN sfg G ON G.BZ_ID=T.Isigijimo_dok AND G.Rus=4 AND G.P_ID=T.ID WHERE T.Isigijimo_dok=?JD AND I.ID IS NULL AND G.ID IS NULL UNION SELECT 1, T.ID, T.OperationDate, B.Op_Dok, CONCAT(D.Turtas, ' - ', T.Content), CAST(T.OperationType AS CHAR) FROM turtas_op T LEFT JOIN turtas D ON D.ID=T.T_ID LEFT JOIN bz B ON B.Op_ID=T.JE_ID LEFT JOIN sfd I ON I.SF_ID=T.JE_ID AND (I.Rusis=3 OR I.Rusis=6) AND I.P_ID=T.ID LEFT JOIN sfg G ON G.BZ_ID=T.JE_ID AND (G.Rus=3 OR G.Rus=6) AND G.P_ID=T.ID WHERE T.OperationType&lt;&gt;'aac' AND T.OperationType&lt;&gt;'amo' AND T.OperationType&lt;&gt;'nur' AND T.JE_ID=?JD AND I.ID IS NULL AND G.ID IS NULL UNION SELECT 3, T.ID, T.OperationDate, T.DocNo, T.Content, CAST(T.OperationType AS CHAR) FROM goodsoperations T LEFT JOIN goodscomplexoperations C ON C.ID=T.ComplexOperationID LEFT JOIN sfd I ON I.SF_ID=T.JournalEntryID AND I.Rusis IN (1, 5, 7, 8) AND I.P_ID=T.ID LEFT JOIN sfg G ON G.BZ_ID=T.JournalEntryID AND G.Rus IN (1, 5, 7, 8) AND G.P_ID=T.ID WHERE C.OperationType IS NULL AND NOT T.OperationType IN (3, 4, 7, 9, 10, 11, 12) AND T.JournalEntryID=?JD AND I.ID IS NULL AND G.ID IS NULL UNION SELECT 4, A.BZ_ID, B.Op_data, B.Op_Dok, B.Op_turinys, null FROM apyskaitos A LEFT JOIN bz B ON B.Op_ID=A.BZ_ID WHERE A.SG=?JD;</Statement>
    <Objects>HelperLists.IndirectRelationInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchIndirectRelationInfoGeneral</Key>
    <Statement>SELECT b.Op_data, b.Op_Dok, b.Op_turinys, b.Op_dok_rusis, b.InsertDate, b.UpdateDate, a.Pavad, a.Kodas, b.Op_korespond, SUM(CASE WHEN d.Op_tipas='Debetas' THEN d.Op_suma ELSE 0 END) AS DebitSum FROM bz b LEFT JOIN asmenys a ON a.ID=b.Op_analitika LEFT JOIN bzdata d ON d.Op_ID_BZ=b.Op_ID WHERE b.Op_ID=?JD GROUP BY b.Op_ID;</Statement>
    <Objects>HelperLists.IndirectRelationInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchOldVersionSettings</Key>
    <Statement>SELECT n.Kasa, n.Pirkejai, n.Tiekejai, n.PVM, n.GPM, n.SODRA, n.Garant, n.DU, n.D_avans, n.Issk, n.Banko_S, n.PSD, n.PSDV, n.N_V, n.P_S, n.Y_S, n.Nedarb FROM nustatymai n;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments29</Key>
    <Statement>UPDATE InvoicesMade SET AccountPayer=?AA WHERE AccountPayer=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments30</Key>
    <Statement>UPDATE InvoicesReceived SET AccountSupplier=?AA WHERE AccountSupplier=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments31</Key>
    <Statement>UPDATE sfd SET P_Sas=?AA WHERE P_Sas=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments32</Key>
    <Statement>UPDATE sfd SET A_Sas=?AA WHERE A_Sas=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments33</Key>
    <Statement>UPDATE goodsaccounts SET AccountValue=?AA WHERE AccountValue=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments34</Key>
    <Statement>UPDATE sfd SET AccountDiscount=?AA WHERE AccountDiscount=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments35</Key>
    <Statement>UPDATE sfg SET PVM_S=?AA WHERE PVM_S=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments36</Key>
    <Statement>UPDATE sfg SET Sanaud=?AA WHERE Sanaud=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchTaxRateListInUse</Key>
    <Statement>SELECT DISTINCT 'PVM', PVMTarifas FROM Apyskaitos UNION SELECT DISTINCT 'GPM', Tar FROM d_kitos UNION SELECT DISTINCT 'PSDP', TarPSDE FROM d_kitos UNION SELECT DISTINCT 'PSDI', TarPSDW FROM d_kitos UNION SELECT DISTINCT 'SODRAP', TarSDE FROM d_kitos UNION SELECT DISTINCT 'SODRAI', TarSDW FROM d_kitos UNION SELECT DISTINCT 'GPM', GPM FROM du_ziniarastis UNION SELECT DISTINCT 'PSDP', PSDE FROM du_ziniarastis UNION SELECT DISTINCT 'PSDI', PSDW FROM du_ziniarastis UNION SELECT DISTINCT 'SODRAP', SD_v FROM du_ziniarastis UNION SELECT DISTINCT 'SODRAI', SD_d FROM du_ziniarastis UNION SELECT DISTINCT 'PVM', PVM FROM paslaugos UNION SELECT DISTINCT 'PVM', Tar FROM sfd UNION SELECT DISTINCT 'PVM', Tarif FROM sfg UNION SELECT 'PVM', RateValue FROM CompanyRates WHERE Code=6 UNION SELECT DISTINCT 'PVM', DefaultVatRateSales FROM goods UNION SELECT DISTINCT 'PVM', DefaultVatRatePurchase FROM goods;</Statement>
    <Objects>HelperLists.TaxRateInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchPersonInfoItemList</Key>
    <Statement>SELECT a.ID, a.Pavad, a.Kodas, a.Adresas, a.SP_kodas, a.B_Sask, a.Bank, a.B_Kor, a.B_Kor_Tiek, a.E_Mail, a.SD_kodas, a.ContactInfo, a.InternalCode, a.IsObsolete, a.IsNaturalPerson, a.LanguageCode, a.CurrencyCode, a.IsClient, a.IsSupplier, a.IsWorker FROM asmenys a WHERE (a.Pavad LIKE ?LS OR a.Kodas LIKE ?LS OR a.Adresas LIKE ?LS) AND ((?IC&gt;0 AND ?IP&gt;0 AND ?IW&gt;0) OR (a.IsClient&gt;0 AND ?IC&gt;0) OR (a.IsSupplier&gt;0 AND ?IP&gt;0) OR (a.IsWorker&gt;0 AND ?IW&gt;0)) ORDER BY a.Pavad;</Statement>
    <Objects>ActiveReports.PersonInfoItemList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchPersonInfoByID</Key>
    <Statement>SELECT a.ID, a.Pavad, a.Kodas, a.Adresas, a.SP_kodas, a.B_Sask, a.Bank, a.B_Kor, a.B_Kor_Tiek, a.E_Mail, a.SD_kodas, a.ContactInfo, a.InternalCode, a.IsObsolete, a.IsNaturalPerson, a.LanguageCode, a.CurrencyCode, a.IsClient, a.IsSupplier, a.IsWorker FROM asmenys a WHERE a.ID=?CD ;</Statement>
    <Objects>Documents.BankOperationItemList,Workers.Contract</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeBZTable4</Key>
    <Statement>UPDATE bz SET UpdateDate=UTC_TIMESTAMP, InsertDate=UTC_TIMESTAMP;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradePersonsTable1</Key>
    <Statement>UPDATE asmenys SET LanguageCode='LT', CurrencyCode='LTL', InsertDate=UTC_TIMESTAMP, UpdateDate=UTC_TIMESTAMP;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradePersonsTable2</Key>
    <Statement>UPDATE asmenys SET SD_kodas=SP_kodas WHERE Grupe='Darbuotojai';</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradePersonsTable3</Key>
    <Statement>UPDATE asmenys SET SP_kodas='' WHERE Grupe='Darbuotojai';</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradePersonsTable4</Key>
    <Statement>UPDATE asmenys b, (SELECT TRIM(UPPER(Kodas)) AS ClientCode, B_Kor AS SupplierAccount FROM asmenys WHERE Grupe='Tiekėjai' AND B_Kor&gt;0 GROUP BY ClientCode) c SET b.B_Kor_Tiek=c.SupplierAccount WHERE TRIM(UPPER(b.Kodas))=c.ClientCode;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradePersonsTable5</Key>
    <Statement>UPDATE asmenys SET IsClient=(CASE WHEN Grupe='Pirkėjai' THEN 1 ELSE 0 END), IsSupplier=(CASE WHEN Grupe='Tiekėjai' THEN 1 ELSE 0 END), IsWorker=(CASE WHEN Grupe='Darbuotojai' THEN 1 ELSE 0 END);</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradePersonsTable6</Key>
    <Statement>UPDATE asmenys b,(SELECT TRIM(UPPER(Kodas)) AS ClientCode FROM asmenys WHERE IsClient&gt;0) c SET b.IsClient=1 WHERE TRIM(UPPER(b.Kodas))=c.ClientCode;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradePersonsTable7</Key>
    <Statement>UPDATE asmenys b,(SELECT TRIM(UPPER(Kodas)) AS ClientCode FROM asmenys WHERE IsSupplier&gt;0) c SET b.IsSupplier=1 WHERE TRIM(UPPER(b.Kodas))=c.ClientCode;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradePersonsTable8</Key>
    <Statement>UPDATE asmenys b,(SELECT TRIM(UPPER(Kodas)) AS ClientCode FROM asmenys WHERE IsWorker&gt;0) c SET b.IsWorker=1 WHERE TRIM(UPPER(b.Kodas))=c.ClientCode;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradePersonsTable9</Key>
    <Statement>UPDATE asmenys b,(SELECT TRIM(UPPER(Kodas)) AS ClientCode, TRIM(UPPER(SP_kodas)) AS VatCode FROM asmenys WHERE (IsClient&gt;0 OR IsSupplier&gt;0) AND TRIM(SP_kodas)&lt;&gt;'' GROUP BY ClientCode) c SET b.SP_kodas=c.VatCode WHERE (b.IsClient&gt;0 OR b.IsSupplier&gt;0) AND TRIM(UPPER(b.Kodas))=c.ClientCode;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradePersonsTable10</Key>
    <Statement>UPDATE apyskaitos p, (SELECT a.ID CurID, MIN(b.ID) MinID FROM asmenys a LEFT JOIN asmenys b ON TRIM(UPPER(b.Kodas))=TRIM(UPPER(a.Kodas)) GROUP BY a.ID HAVING MinID&lt;&gt;CurID) c SET p.Analit=c.MinID WHERE p.Analit=c.CurID;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradePersonsTable11</Key>
    <Statement>UPDATE bz p, (SELECT a.ID CurID, MIN(b.ID) MinID FROM asmenys a LEFT JOIN asmenys b ON TRIM(UPPER(b.Kodas))=TRIM(UPPER(a.Kodas)) GROUP BY a.ID HAVING MinID&lt;&gt;CurID) c SET p.Op_analitika=c.MinID WHERE p.Op_analitika=c.CurID;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradePersonsTable12</Key>
    <Statement>UPDATE bzdata SET Op_ana=0 WHERE Op_ana IS NULL;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradePersonsTable13</Key>
    <Statement>UPDATE bzdata p, (SELECT a.ID CurID, MIN(b.ID) MinID FROM asmenys a LEFT JOIN asmenys b ON TRIM(UPPER(b.Kodas))=TRIM(UPPER(a.Kodas)) GROUP BY a.ID HAVING MinID&lt;&gt;CurID) c SET p.Op_ana=c.MinID WHERE p.Op_ana=c.CurID;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradePersonsTable14</Key>
    <Statement>UPDATE d_avansai_d p, (SELECT a.ID CurID, MIN(b.ID) MinID FROM asmenys a LEFT JOIN asmenys b ON TRIM(UPPER(b.Kodas))=TRIM(UPPER(a.Kodas)) GROUP BY a.ID HAVING MinID&lt;&gt;CurID) c SET p.AK=c.MinID WHERE p.AK=c.CurID;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradePersonsTable15</Key>
    <Statement>UPDATE darbuotojai_d p, (SELECT a.ID CurID, MIN(b.ID) MinID FROM asmenys a LEFT JOIN asmenys b ON TRIM(UPPER(b.Kodas))=TRIM(UPPER(a.Kodas)) GROUP BY a.ID HAVING MinID&lt;&gt;CurID) c SET p.AK=c.MinID WHERE p.AK=c.CurID;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradePersonsTable16</Key>
    <Statement>UPDATE du_ziniarastis_d p, (SELECT a.ID CurID, MIN(b.ID) MinID FROM asmenys a LEFT JOIN asmenys b ON TRIM(UPPER(b.Kodas))=TRIM(UPPER(a.Kodas)) GROUP BY a.ID HAVING MinID&lt;&gt;CurID) c SET p.AK=c.MinID WHERE p.AK=c.CurID;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradePersonsTable17</Key>
    <Statement>DELETE n1 FROM asmenys n1, asmenys n2 WHERE n1.ID &gt; n2.ID AND TRIM(UPPER(n1.Kodas)) = TRIM(UPPER(n2.Kodas));</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchContract</Key>
    <Statement>SELECT d.ID, d.Tipas, d.Nuo, d.Dydis, d.DU_tipas, d.Pagrindas, d.InsertDate, d.UpdateDate, d.DS_Serija, d.DS_NR, d.AK, a.Pavad, a.Kodas, a.Adresas, a.SD_kodas FROM (SELECT AK, DS_NR, DS_Serija, Nuo FROM darbuotojai_d WHERE ID=?CD AND Tipas='d') t LEFT JOIN darbuotojai_d d ON d.AK=t.AK AND d.DS_NR=t.DS_NR AND d.DS_Serija=t.DS_Serija AND (d.Nuo=t.Nuo OR d.Tipas='n') LEFT JOIN asmenys a ON a.ID=d.AK;</Statement>
    <Objects>Workers.Contract</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchContractBySerialNumber</Key>
    <Statement>SELECT d.ID, d.Tipas, d.Nuo, d.Dydis, d.DU_tipas, d.Pagrindas, d.InsertDate, d.UpdateDate, d.DS_Serija, d.DS_NR, d.AK, a.Pavad, a.Kodas, a.Adresas, a.SD_kodas FROM (SELECT AK, DS_NR, DS_Serija, Nuo FROM darbuotojai_d WHERE DS_NR=?DN AND UPPER(TRIM(DS_Serija))=UPPER(TRIM(?DS)) AND Tipas='d') t LEFT JOIN darbuotojai_d d ON d.AK=t.AK AND d.DS_NR=t.DS_NR AND d.DS_Serija=t.DS_Serija AND (d.Nuo=t.Nuo OR d.Tipas='n') LEFT JOIN asmenys a ON a.ID=d.AK;</Statement>
    <Objects>Workers.Contract</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchContractSerialNumber</Key>
    <Statement>SELECT d.DS_Serija, d.DS_NR FROM darbuotojai_d d WHERE d.ID=?CD AND d.Tipas='d';</Statement>
    <Objects>Workers.Contract</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteContract</Key>
    <Statement>DELETE FROM darbuotojai_d WHERE darbuotojai_d.DS_NR=?DN AND UPPER(TRIM(darbuotojai_d.DS_Serija)) = UPPER(TRIM(?DS));</Statement>
    <Objects>Workers.Contract</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfContractSerialNumberUnique</Key>
    <Statement>SELECT COUNT(d.ID) FROM darbuotojai_d d WHERE d.DS_NR=?DN AND UPPER(TRIM(d.DS_Serija)) = UPPER(TRIM(?DS)) AND d.Tipas='d' AND d.ID&lt;&gt;?CD ;</Statement>
    <Objects>Workers.Contract</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfContractUpdateDateChanged</Key>
    <Statement>SELECT d.UpdateDate FROM darbuotojai_d d WHERE d.ID=?CD AND d.Tipas='d';</Statement>
    <Objects>Workers.Contract</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CreateNewContractUpdate</Key>
    <Statement>SELECT d.DS_Serija, d.DS_NR, d.AK, a.Pavad, a.Kodas, a.Adresas, a.SD_kodas FROM darbuotojai_d d LEFT JOIN asmenys a ON a.ID=d.AK WHERE d.ID=?CD AND d.Tipas='d';</Statement>
    <Objects>Workers.ContractUpdate</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CreateNewContractUpdateBySerialNumber</Key>
    <Statement>SELECT d.DS_Serija, d.DS_NR, d.AK, a.Pavad, a.Kodas, a.Adresas, a.SD_kodas FROM darbuotojai_d d LEFT JOIN asmenys a ON a.ID=d.AK WHERE d.DS_NR=?DN AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(?DS)) AND d.Tipas='d';</Statement>
    <Objects>Workers.ContractUpdate</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchContractUpdate</Key>
    <Statement>SELECT d.ID, d.Tipas, d.Nuo, d.Dydis, d.DU_tipas, d.Pagrindas, d.InsertDate, d.UpdateDate, d.DS_Serija, d.DS_NR, d.AK, a.Pavad, a.Kodas, a.Adresas, a.SD_kodas FROM (SELECT AK, DS_NR, DS_Serija, Nuo FROM darbuotojai_d WHERE ID=?CD) t LEFT JOIN darbuotojai_d d ON d.AK=t.AK AND d.DS_NR=t.DS_NR AND d.DS_Serija=t.DS_Serija AND d.Nuo=t.Nuo LEFT JOIN asmenys a ON a.ID=d.AK;</Statement>
    <Objects>Workers.ContractUpdate</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchContractUpdateBySerialNumber</Key>
    <Statement>SELECT d.ID, d.Tipas, d.Nuo, d.Dydis, d.DU_tipas, d.Pagrindas, d.InsertDate, d.UpdateDate, d.DS_Serija, d.DS_NR, d.AK, a.Pavad, a.Kodas, a.Adresas, a.SD_kodas FROM darbuotojai_d d LEFT JOIN asmenys a ON a.ID=d.AK WHERE d.DS_NR=?DN AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(?DS)) AND d.Nuo=?DT;</Statement>
    <Objects>Workers.ContractUpdate</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchContractUpdateLimitations</Key>
    <Statement>SELECT (SELECT MIN(a.Z_data) FROM du_ziniarastis_d d LEFT JOIN du_ziniarastis a ON a.ID=d.Z_ID WHERE d.DS_NR=?DN AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(?DS)) AND a.Z_data&gt;=?DT) AS MinAfterWage, (SELECT MAX(a.Z_data) FROM du_ziniarastis_d d LEFT JOIN du_ziniarastis a ON a.ID=d.Z_ID WHERE d.DS_NR=?DN AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(?DS)) AND a.Z_data&lt;=?DT) AS MaxBeforeWage, (SELECT COUNT(d.ID) FROM du_ziniarastis_d d WHERE d.DS_NR=?DN AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(?DS)) AND d.AT_K&gt;0) AS HolidayCompensation, (SELECT MIN(d.Nuo) FROM darbuotojai_d d WHERE d.DS_NR=?DN AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(?DS)) AND d.Tipas='d') AS StartDate, (SELECT MIN(d.Nuo) FROM darbuotojai_d d WHERE d.DS_NR=?DN AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(?DS)) AND d.Tipas='n') AS EndDate;</Statement>
    <Objects>Workers.ContractUpdate</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfContractUpdateUpdateDateChanged</Key>
    <Statement>SELECT d.UpdateDate FROM darbuotojai_d d WHERE d.ID=?CD AND d.Tipas&lt;&gt;'d' AND d.Tipas&lt;&gt;'n';</Statement>
    <Objects>Workers.ContractUpdate</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchContractUpdateSerialNumber</Key>
    <Statement>SELECT d.DS_Serija, d.DS_NR, d.Nuo FROM darbuotojai_d d WHERE d.ID=?CD AND d.Tipas&lt;&gt;'d' AND d.Tipas&lt;&gt;'n';</Statement>
    <Objects>Workers.ContractUpdate</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfContractUpdateCanBeDeleted</Key>
    <Statement>SELECT (SELECT COUNT(d.ID) FROM darbuotojai_d d WHERE d.DS_NR=?DN AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(?DS)) AND d.Nuo=?DT) AS ContractUpdateExists, (SELECT COUNT(d.ID) FROM darbuotojai_d d WHERE d.DS_NR=?DN AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(?DS)) AND d.Nuo=?DT AND (d.Tipas='d' OR d.Tipas='n')) AS NotContractUpdate, (SELECT MIN(a.Z_data) FROM du_ziniarastis_d d LEFT JOIN du_ziniarastis a ON a.ID=d.Z_ID WHERE d.DS_NR=?DN AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(?DS)) AND a.Z_data&gt;'2007-04-02') AS MinAfterWage;</Statement>
    <Objects>Workers.ContractUpdate</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteContractUpdate</Key>
    <Statement>DELETE FROM darbuotojai_d WHERE darbuotojai_d.DS_NR=?DN AND UPPER(TRIM(darbuotojai_d.DS_Serija)) = UPPER(TRIM(?DS)) AND darbuotojai_d.Nuo=?DT ;</Statement>
    <Objects>Workers.ContractUpdate</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfContractUpdateSerialNumberUnique</Key>
    <Statement>SELECT COUNT(d.ID) FROM darbuotojai_d d WHERE d.DS_NR=?DN AND UPPER(TRIM(d.DS_Serija)) = UPPER(TRIM(?DS)) AND d.Nuo=?DT AND d.Nuo&lt;&gt;?OD ;</Statement>
    <Objects>Workers.ContractUpdate</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateWorkerStatusWithoutValue</Key>
    <Statement>UPDATE darbuotojai_d SET Nuo=?DT, Pagrindas=?CN, UpdateDate=?UD WHERE ID=?SD ;</Statement>
    <Objects>Workers.Contract</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLabourContractUpdateInfoList</Key>
    <Statement>SELECT t.AK, t.DS_Serija, t.DS_NR, MIN(t.ID), t.Nuo, MAX(t.Pagrindas), MIN(t.InsertDate), MAX(t.UpdateDate), SUM(CASE WHEN t.Tipas='n' OR t.Tipas='d' THEN 1 ELSE 0 END) AS SysCount, MAX(CASE WHEN t.Tipas='i' THEN t.Dydis ELSE null END) AS ExtraPay, MAX(CASE WHEN t.Tipas='a' THEN t.Dydis ELSE null END) AS Holiday, MAX(CASE WHEN t.Tipas='o' THEN t.Dydis ELSE null END) AS HolidayCorrection, MAX(CASE WHEN t.Tipas='p' THEN t.Dydis ELSE null END) AS NPD, MAX(CASE WHEN t.Tipas='r' THEN t.Dydis ELSE null END) AS PNPD, MAX(CASE WHEN t.Tipas='u' THEN t.Dydis ELSE null END) AS Wage, MAX(CASE WHEN t.Tipas='u' THEN t.DU_tipas ELSE null END) AS WageType, MAX(CASE WHEN t.Tipas='k' THEN t.Dydis ELSE null END) AS WorkLoad, MAX(CASE WHEN t.Tipas='f' THEN t.DU_tipas ELSE null END) AS WorkerPosition FROM darbuotojai_d t WHERE t.Nuo&lt;=?DT GROUP BY t.AK, t.DS_Serija, t.DS_NR, t.Nuo HAVING SysCount&lt;1;</Statement>
    <Objects>ActiveReports.ContractInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchContractInfoListConsolidated</Key>
    <Statement>SELECT t.AK, a.Pavad, a.Kodas, a.SD_kodas, a.Adresas, t.DS_Serija, t.DS_NR, MIN(CASE WHEN t.Tipas='d' THEN d.ID ELSE null END) AS ID, CAST(MIN(CASE WHEN t.Tipas='d' THEN t.MaxDate ELSE null END) AS Date) AS StartDate, MIN(CASE WHEN t.Tipas='d' THEN d.Pagrindas ELSE null END) AS Content, MIN(CASE WHEN t.Tipas='d' THEN d.InsertDate ELSE null END) AS InsertDate, MAX(CASE WHEN t.Tipas='d' THEN d.UpdateDate ELSE null END) AS UpdateDateDate, CAST(MAX(CASE WHEN t.Tipas='n' THEN t.MaxDate ELSE null END) AS Date) As EndDate, MAX(CASE WHEN t.Tipas='i' THEN d.Dydis ELSE null END) AS ExtraPay, MAX(CASE WHEN t.Tipas='a' THEN d.Dydis ELSE null END) AS Holiday, MAX(CASE WHEN t.Tipas='o' THEN d.Dydis ELSE null END) AS HolidayCorrection, MAX(CASE WHEN t.Tipas='p' THEN d.Dydis ELSE null END) AS NPD, MAX(CASE WHEN t.Tipas='r' THEN d.Dydis ELSE null END) AS PNPD, MAX(CASE WHEN t.Tipas='u' THEN d.Dydis ELSE null END) AS Wage, MAX(CASE WHEN t.Tipas='u' THEN d.DU_tipas ELSE null END) AS WageType, MAX(CASE WHEN t.Tipas='k' THEN d.Dydis ELSE null END) AS WorkLoad, MAX(CASE WHEN t.Tipas='f' THEN d.DU_tipas ELSE null END) AS WorkerPosition FROM (SELECT AK, DS_Serija, DS_NR, Tipas, MAX(Nuo) AS MaxDate FROM darbuotojai_d WHERE Nuo&lt;=?DT OR ?AL&gt;0 GROUP BY AK, DS_Serija, DS_NR, Tipas) t LEFT JOIN darbuotojai_d d ON d.AK=t.AK AND t.DS_Serija=d.DS_Serija AND t.DS_NR=d.DS_NR AND t.MaxDate=d.Nuo AND t.Tipas=d.Tipas LEFT JOIN asmenys a ON a.ID=t.AK GROUP BY t.AK, t.DS_Serija, t.DS_NR HAVING EndDate IS NULL OR EndDate&gt;=?DT OR ?AL&gt;0;</Statement>
    <Objects>ActiveReports.ContractInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchContractInfoList</Key>
    <Statement>SELECT t.AK, a.Pavad, a.Kodas, a.SD_kodas, a.Adresas, t.DS_Serija, t.DS_NR, t.ContractID, t.ContractDate, t.ContractContent, t.InsertDate, t.UpdateDate, t.ContractEndDate, MAX(CASE WHEN d.Tipas='i' THEN d.Dydis ELSE null END) AS ExtraPay, MAX(CASE WHEN d.Tipas='a' THEN d.Dydis ELSE null END) AS Holiday, MAX(CASE WHEN d.Tipas='o' THEN d.Dydis ELSE null END) AS HolidayCorrection, MAX(CASE WHEN d.Tipas='p' THEN d.Dydis ELSE null END) AS NPD, MAX(CASE WHEN d.Tipas='r' THEN d.Dydis ELSE null END) AS PNPD, MAX(CASE WHEN d.Tipas='u' THEN d.Dydis ELSE null END) AS Wage, MAX(CASE WHEN d.Tipas='u' THEN d.DU_tipas ELSE null END) AS WageType, MAX(CASE WHEN d.Tipas='k' THEN d.Dydis ELSE null END) AS WorkLoad, MAX(CASE WHEN d.Tipas='f' THEN d.DU_tipas ELSE null END) AS WorkerPosition FROM (SELECT AK, DS_Serija, DS_NR, CAST(MIN(CASE WHEN Tipas='d' THEN Nuo ELSE NULL END) AS Date) AS ContractDate, MIN(CASE WHEN Tipas='d' THEN ID ELSE NULL END) AS ContractID, MIN(CASE WHEN Tipas='d' THEN Pagrindas ELSE NULL END) AS ContractContent, CAST(MIN(CASE WHEN Tipas='n' THEN Nuo ELSE null END) AS Date) AS ContractEndDate, MIN(CASE WHEN Tipas='d' THEN InsertDate ELSE NULL END) AS InsertDate, MIN(CASE WHEN Tipas='d' THEN UpdateDate ELSE NULL END) AS UpdateDate FROM darbuotojai_d WHERE Tipas='d' OR Tipas='n' GROUP BY AK, DS_Serija, DS_NR HAVING ?AL&gt;0 OR (ContractDate&lt;=?DT AND (ContractEndDate IS NULL OR ContractEndDate&gt;=?DT))) t LEFT JOIN darbuotojai_d d ON d.AK=t.AK AND d.DS_Serija=t.DS_Serija AND d.DS_NR=t.DS_NR AND d.Nuo=t.ContractDate LEFT JOIN asmenys a ON a.ID=t.AK GROUP BY t.AK, t.DS_Serija, t.DS_NR;</Statement>
    <Objects>ActiveReports.ContractInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchContractInfoListWorkersWithoutContract</Key>
    <Statement>SELECT a.ID, a.Pavad, a.Kodas, a.SD_kodas, a.Adresas, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL FROM asmenys a LEFT JOIN darbuotojai_d d ON d.AK=a.ID WHERE a.IsWorker&gt;0 AND d.AK IS NULL;</Statement>
    <Objects>ActiveReports.ContractInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>ShowBaseDir</Key>
    <Statement>SHOW VARIABLES LIKE 'basedir';</Statement>
    <Objects>Administration.CharSetDir</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfUpgradeSucceded</Key>
    <Statement>SELECT (SELECT COUNT(*) FROM apyskaitos a LEFT JOIN asmenys b ON b.ID=a.Analit WHERE b.ID IS NULL and a.Analit&gt;0) AS LostPersonApysk, (SELECT COUNT(*) FROM bz a LEFT JOIN asmenys b ON b.ID=a.Op_analitika WHERE b.ID IS NULL and a.Op_analitika&gt;0) AS LostPersonBZ, (SELECT COUNT(*) FROM bzdata a LEFT JOIN asmenys b ON b.ID=a.Op_ana WHERE b.ID IS NULL and a.Op_ana&gt;0) AS LostPersonBZDATA, (SELECT COUNT(*) FROM d_avansai_d a LEFT JOIN asmenys b ON b.ID=a.AK WHERE b.ID IS NULL and a.AK&gt;0) AS LostPersonAvansai, (SELECT COUNT(*) FROM darbuotojai_d a LEFT JOIN asmenys b ON b.ID=a.AK WHERE b.ID IS NULL and a.AK&gt;0) AS LostPersonDarbuotojai, (SELECT COUNT(*) FROM du_ziniarastis_d a LEFT JOIN asmenys b ON b.ID=a.AK WHERE b.ID IS NULL and a.AK&gt;0) AS LostPersonDUZ, (SELECT COUNT(*) FROM offsetitems a LEFT JOIN asmenys b ON b.ID=a.PersonID WHERE b.ID IS NULL and a.PersonID&gt;0) AS LostPersonOffsets, (SELECT COUNT(*) FROM advancereports a WHERE NOT a.Account&gt;0) AS AdvanceReportsWithoutAccount, (SELECT COUNT(*) FROM kio k WHERE NOT k.CashAccountID&gt;0) AS KioWithoutCashAccount, (SELECT COUNT(*) FROM kpo k WHERE NOT k.CashAccountID&gt;0) AS KpoWithoutCashAccount, (SELECT COUNT(*) FROM bankoperations b WHERE NOT b.CashAccountID&gt;0) AS BankWithoutCashAccount, (SELECT COUNT(*) FROM bz b LEFT JOIN kio d ON d.BZ_ID=b.Op_ID WHERE b.Op_dok_rusis='kio' AND d.BZ_ID IS NULL) AS LostKio, (SELECT COUNT(*) FROM bz b LEFT JOIN kpo d ON d.BZ_ID=b.Op_ID WHERE b.Op_dok_rusis='kpo' AND d.BZ_ID IS NULL) AS LostKpo, (SELECT COUNT(*) FROM bz b LEFT JOIN bankoperations d ON d.ParentID=b.Op_ID WHERE b.Op_dok_rusis='b' AND d.ParentID IS NULL) AS LostBank, (SELECT COUNT(*) FROM bz b LEFT JOIN invoicesmade d ON d.ID=b.Op_ID WHERE b.Op_dok_rusis='sf' AND d.ID IS NULL) AS LostInvoicesMade, (SELECT COUNT(*) FROM bz b LEFT JOIN invoicesreceived d ON d.ID=b.Op_ID WHERE b.Op_dok_rusis='sg' AND d.ID IS NULL) AS LostInvoicesReceived, (SELECT COUNT(*) FROM bz b LEFT JOIN offsetitems d ON d.ParentID=b.Op_ID WHERE b.Op_dok_rusis='sk' AND d.ParentID IS NULL) AS LostOffsets, (SELECT COUNT(*) FROM invoicesmade i WHERE NOT i.InvoiceNumber&gt;0 OR TRIM(i.InvoiceSerial)='') AS InvoicesWithoutNumber, (SELECT COUNT(*) FROM invoicesreceived i WHERE NOT i.AccountSupplier&gt;0) AS InvoicesReceivedWithoutAccount, (SELECT COUNT(*) FROM bz b LEFT JOIN turtas_op d ON d.JE_ID=b.Op_ID WHERE (b.Op_dok_rusis='amo' OR b.Op_dok_rusis='t' OR b.Op_dok_rusis='tsp') AND d.JE_ID IS NULL) AS LostAssetOperations, (SELECT COUNT(*) FROM turtas_op d LEFT JOIN bz b ON b.Op_ID=d.JE_ID WHERE (d.OperationType='aac' OR d.OperationType='amo' OR d.OperationType='nur' OR d.OperationType='per') AND b.Op_ID IS NULL) AS LostAssetOperations2, (SELECT COUNT(*) FROM turtas t LEFT JOIN bz b ON b.Op_ID=t.Isigijimo_dok WHERE b.Op_ID IS NULL) AS LostAssets;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchDeclarationSAM(3)_1</Key>
    <Statement>SELECT a.Pavad, a.Kodas, a.SD_kodas, CROUND(IFNULL(s.TaxableWage, 0.0), 2) AS TaxableWage, CROUND(IFNULL(s.TotalContributions, 0.0), 2) AS TotalContributions, CROUND(IFNULL((SELECT CROUND(e.SD_d + e.SD_v + e.PSDW + e.PSDE, 2) FROM du_ziniarastis e LEFT JOIN du_ziniarastis_d f ON f.Z_ID = e.ID WHERE f.AK = p.WorkerID AND e.Z_Data&lt;=?DT ORDER BY e.Z_Data DESC LIMIT 1), 0.0), 2) AS LastKnownRate FROM (SELECT t.AK AS WorkerID FROM (SELECT AK, DS_Serija, DS_NR, MIN(CASE WHEN Tipas='d' THEN Nuo ELSE NULL END) AS ContractDate, MIN(CASE WHEN Tipas='n' THEN Nuo ELSE null END) AS ContractEndDate FROM darbuotojai_d WHERE Tipas='d' OR Tipas='n' GROUP BY AK, DS_Serija, DS_NR HAVING ContractDate&lt;=?DT AND (ContractEndDate IS NULL OR ContractEndDate&gt;?DT)) t GROUP BY t.AK) AS p LEFT JOIN asmenys a ON a.ID=p.WorkerID LEFT JOIN (SELECT d.AK AS WorkerID, SUM(d.BaseSODRA) AS TaxableWage, SUM(CROUND(d.DeductedPSD + d.DeductedSODRA + d.ContributionPSD + d.ContributionSODRA, 2)) AS TotalContributions FROM du_ziniarastis_d d LEFT JOIN du_ziniarastis b ON b.ID=d.Z_ID AND b.Metai = ?YR AND b.Men=?MN AND CROUND(b.SD_d + b.SD_v + b.PSDW + b.PSDE, 2) = ?RT WHERE NOT b.ID IS NULL GROUP BY d.AK) AS s ON s.WorkerID = a.ID GROUP BY p.WorkerID HAVING TotalContributions&gt;0 OR TaxableWage &gt; 0 OR LastKnownRate = ?RT;</Statement>
    <Objects>ActiveReports.Declaration</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchOperationalLimitListNew</Key>
    <Statement>SELECT GoodsID, OperationType, WarehouseID, MAX(OperationDate), 0 FROM goodsoperations WHERE GoodsID=?GD GROUP BY GoodsID, OperationType, WareHouseID UNION SELECT GoodsID, 13, 0, MAX(ChangeDate), 0 FROM goodsvaluationmethods WHERE GoodsID=?GD GROUP BY GoodsID UNION SELECT GoodsID, AccountType, 0, MAX(ChangeDate), 0 FROM goodsaccounts WHERE GoodsID=?GD GROUP BY GoodsID;</Statement>
    <Objects>Goods.OperationalLimitList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchWarehouseList</Key>
    <Statement>SELECT w.ID, w.Name, w.Location, w.Description, w.IsProduction, w.IsObsolete, w.WarehouseAccount, MAX(o.OperationDate) AS LastOperationDate FROM warehouses w LEFT JOIN goodsoperations o ON o.WarehouseID=w.ID GROUP BY w.ID ORDER BY w.Name;</Statement>
    <Objects>Goods.WarehouseList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertWarehouse</Key>
    <Statement>INSERT INTO warehouses(Name, Location, Description, IsProduction, IsObsolete, WarehouseAccount) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF);</Statement>
    <Objects>Goods.Warehouse</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateWarehouse</Key>
    <Statement>UPDATE warehouses SET Name=?AA, Location=?AB, Description=?AC, IsProduction=?AD, IsObsolete=?AE, WarehouseAccount=?AF WHERE ID=?WD ;</Statement>
    <Objects>Goods.Warehouse</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteWarehouse</Key>
    <Statement>DELETE FROM warehouses WHERE warehouses.ID=?WD ;</Statement>
    <Objects>Goods.Warehouse</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchUsedWarehouses</Key>
    <Statement>SELECT g.WarehouseID, MAX(g.OperationDate) FROM goodsoperations g WHERE g.WarehouseID &gt; 0 GROUP BY g.WarehouseID;</Statement>
    <Objects>Goods.WarehouseList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchWarehouseInfoList</Key>
    <Statement>SELECT w.ID, w.Name, w.IsProduction, w.IsObsolete, w.WarehouseAccount FROM warehouses w ORDER BY w.Name;</Statement>
    <Objects>HelperLists.WarehouseInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchGoodsSummary</Key>
    <Statement>SELECT g.ID, g.Name, g.MeasureUnit, p.AccountSalesNetCosts, p.AccountPurchases, p.AccountDiscounts, p.AccountValueReduction, g.PriceSale, g.PricePurchase, g.DefaultVatRateSales, g.DefaultVatRatePurchase, IFNULL(f.Name,''), g.DefaultAccountingMethod, IFNULL((SELECT v.MethodCode FROM goodsvaluationmethods v WHERE v.GoodsID=g.ID ORDER BY v.ChangeDate DESC LIMIT 1), g.DefaultValuationMethod), w.ID, w.Name, w.IsProduction, w.IsObsolete, w.WarehouseAccount FROM goods g LEFT JOIN prekes_gr f ON f.ID=g.GroupID LEFT JOIN warehouses w ON w.ID=g.DefaultWarehouseID LEFT JOIN (SELECT go.ID, IFNULL(MAX(CASE WHEN ro.AccountType=9 THEN ro.AccountValue ELSE null END), go.AccountSalesNetCosts) AS AccountSalesNetCosts, IFNULL(MAX(CASE WHEN ro.AccountType=10 THEN ro.AccountValue ELSE null END), go.AccountPurchases) AS AccountPurchases, IFNULL(MAX(CASE WHEN ro.AccountType=11 THEN ro.AccountValue ELSE null END), go.AccountDiscounts) AS AccountDiscounts, IFNULL(MAX(CASE WHEN ro.AccountType=12 THEN ro.AccountValue ELSE null END), go.AccountValueReduction) AS AccountValueReduction FROM goods go LEFT JOIN (SELECT po.GoodsID, po.AccountType, po.AccountValue FROM (SELECT ac.GoodsID, ac.AccountType, MAX(ac.ChangeDate) AS MaxDate FROM goodsaccounts ac GROUP BY ac.GoodsID, ac.AccountType) AS vo LEFT JOIN goodsaccounts po ON po.GoodsID=vo.GoodsID AND po.AccountType=vo.AccountType AND po.ChangeDate=vo.MaxDate WHERE NOT po.GoodsID IS NULL) AS ro ON ro.GoodsID=go.ID GROUP BY go.ID) AS p ON p.ID=g.ID WHERE g.ID=?GD GROUP BY g.ID;</Statement>
    <Objects>Goods.GoodsSummary</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfGoodsOperationUpdateDateChanged</Key>
    <Statement>SELECT o.UpdateDate FROM goodsoperations o WHERE o.ID=?CD ;</Statement>
    <Objects>Goods.OperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchOperationalLimitListOld</Key>
    <Statement>SELECT GoodsID, OperationType, WarehouseID, MAX(OperationDate), 0 FROM goodsoperations WHERE GoodsID=?GD AND ID&lt;&gt;?OD GROUP BY GoodsID, OperationType, WareHouseID UNION SELECT GoodsID, OperationType, WarehouseID, MAX(OperationDate), 1 FROM goodsoperations WHERE GoodsID=?GD AND ID&lt;&gt;?OD AND OperationDate&lt;=?DT GROUP BY GoodsID, OperationType, WareHouseID UNION SELECT GoodsID, OperationType, WarehouseID, MIN(OperationDate), 2 FROM goodsoperations WHERE GoodsID=?GD AND ID&lt;&gt;?OD AND OperationDate&gt;=?DT GROUP BY GoodsID, OperationType, WareHouseID UNION SELECT GoodsID, 13, 0, MAX(ChangeDate), 0 FROM goodsvaluationmethods WHERE GoodsID=?GD AND ID&lt;&gt;?VD GROUP BY GoodsID UNION SELECT GoodsID, 13, 0, MAX(ChangeDate), 1 FROM goodsvaluationmethods WHERE GoodsID=?GD AND ID&lt;&gt;?VD AND ChangeDate&lt;=?DT GROUP BY GoodsID UNION SELECT GoodsID, 13, 0, MIN(ChangeDate), 2 FROM goodsvaluationmethods WHERE GoodsID=?GD AND ID&lt;&gt;?VD AND ChangeDate&gt;=?DT GROUP BY GoodsID UNION SELECT GoodsID, AccountType, 0, MAX(ChangeDate), 0 FROM goodsaccounts WHERE GoodsID=?GD AND ID&lt;&gt;?AD GROUP BY GoodsID UNION SELECT GoodsID, AccountType, 0, MAX(ChangeDate), 1 FROM goodsaccounts WHERE GoodsID=?GD AND ID&lt;&gt;?AD AND ChangeDate&lt;=?DT GROUP BY GoodsID UNION SELECT GoodsID, AccountType, 0, MIN(ChangeDate), 2 FROM goodsaccounts WHERE GoodsID=?GD AND ID&lt;&gt;?AD AND ChangeDate&gt;=?DT GROUP BY GoodsID UNION SELECT p.GoodsID, 999, COUNT(u.ID), MIN(o.OperationDate), 0 FROM goodsoperations p LEFT JOIN consignments c ON c.ParentID=p.ID LEFT JOIN consignmentdiscards u ON u.ConsignmentID=c.ID LEFT JOIN goodsoperations o ON o.ID=u.ParentID WHERE p.ID=?OD GROUP BY p.ID;</Statement>
    <Objects>Goods.OperationalLimitList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteConsignmentsByParent</Key>
    <Statement>DELETE FROM consignments WHERE consignments.ParentID=?OD ;</Statement>
    <Objects>Goods.OperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteConsignmentDiscardsByParent</Key>
    <Statement>DELETE FROM consignmentdiscards WHERE consignmentdiscards.ParentID=?OD ;</Statement>
    <Objects>Goods.OperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchOperationPersistenceObject</Key>
    <Statement>SELECT g.ID, g.OperationDate, g.OperationType, g.JournalEntryID, g.DocNo, g.Content, g.GoodsID, g.Amount, g.AmountInWarehouse, g.UnitValue, g.TotalValue, g.AccountGeneral, g.AccountSalesNetCosts, g.AccountPurchases, g.AccountDiscounts, g.AccountPriceCut, g.ComplexOperationID, f.OperationType, g.InsertDate, g.UpdateDate, g.AccountOperation, g.AccountOperationValue, b.Op_data, b.Op_turinys, b.Op_dok_rusis, b.Op_Dok, b.Op_korespond, CONCAT(a.Pavad, ', ', a.Kodas), g.AmountInPurchases, w.ID, w.Name, w.IsProduction, w.IsObsolete, w.WarehouseAccount, d.ID, d.Name, d.MeasureUnit, l.AccountSalesNetCosts, l.AccountPurchases, l.AccountDiscounts, l.AccountValueReduction, d.PriceSale, d.PricePurchase, d.DefaultVatRateSales, d.DefaultVatRatePurchase, IFNULL(p.Name,''), d.DefaultAccountingMethod, IFNULL((SELECT v.MethodCode FROM goodsvaluationmethods v WHERE v.GoodsID=g.GoodsID AND v.ChangeDate&lt;=g.OperationDate ORDER BY v.ChangeDate DESC LIMIT 1), d.DefaultValuationMethod), v.ID, v.Name, v.IsProduction, v.IsObsolete, v.WarehouseAccount FROM goodsoperations g LEFT JOIN bz b ON b.Op_ID=g.JournalEntryID LEFT JOIN asmenys a ON a.ID=b.Op_analitika LEFT JOIN goodscomplexoperations f ON f.ID=g.ComplexOperationID LEFT JOIN goods d ON d.ID=g.GoodsID LEFT JOIN prekes_gr p ON p.ID=d.ID LEFT JOIN warehouses v ON v.ID=d.DefaultWarehouseID LEFT JOIN warehouses w ON w.ID=g.WarehouseID LEFT JOIN (SELECT go.ID, IFNULL(MAX(CASE WHEN ro.AccountType=9 THEN ro.AccountValue ELSE null END), go.AccountSalesNetCosts) AS AccountSalesNetCosts, IFNULL(MAX(CASE WHEN ro.AccountType=10 THEN ro.AccountValue ELSE null END), go.AccountPurchases) AS AccountPurchases, IFNULL(MAX(CASE WHEN ro.AccountType=11 THEN ro.AccountValue ELSE null END), go.AccountDiscounts) AS AccountDiscounts, IFNULL(MAX(CASE WHEN ro.AccountType=12 THEN ro.AccountValue ELSE null END), go.AccountValueReduction) AS AccountValueReduction FROM goods go LEFT JOIN (SELECT po.GoodsID, po.AccountType, po.AccountValue FROM (SELECT ac.GoodsID, ac.AccountType, MAX(ac.ChangeDate) AS MaxDate FROM goodsaccounts ac WHERE ac.ChangeDate &lt; (SELECT hj.OperationDate FROM goodsoperations hj WHERE hj.ID=?OD) GROUP BY ac.GoodsID, ac.AccountType) AS vo LEFT JOIN goodsaccounts po ON po.GoodsID=vo.GoodsID AND po.AccountType=vo.AccountType AND po.ChangeDate=vo.MaxDate WHERE NOT po.GoodsID IS NULL) AS ro ON ro.GoodsID=go.ID GROUP BY go.ID) AS l ON l.ID=g.GoodsID WHERE g.ID=?OD ;</Statement>
    <Objects>Goods.OperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateOperationPersistenceObjectFull</Key>
    <Statement>UPDATE goodsoperations SET OperationDate=?AA, JournalEntryID=?AB, DocNo=?AC, Content=?AD, WareHouseID=?AF, Amount=?AG, UnitValue=?AH, TotalValue=?AI, AccountGeneral=?AJ, AccountSalesNetCosts=?AK, AccountPurchases=?AL, AccountDiscounts=?AM, AccountPriceCut=?AN, AccountOperationValue=?AQ, UpdateDate=?AR, AccountOperation=?AT, AmountInWarehouse=?AU, AmountInPurchases=?AV WHERE ID=?CD ;</Statement>
    <Objects>Goods.OperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertOperationPersistenceObject</Key>
    <Statement>INSERT INTO goodsoperations(OperationDate, JournalEntryID, DocNo, Content, GoodsID, WareHouseID, Amount, UnitValue, TotalValue, AccountGeneral, AccountSalesNetCosts, AccountPurchases, AccountDiscounts, AccountPriceCut, ComplexOperationID, AccountOperationValue, OperationType, UpdateDate, InsertDate, AccountOperation, AmountInWarehouse, AmountInPurchases) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF, ?AG, ?AH, ?AI, ?AJ, ?AK, ?AL, ?AM, ?AN, ?AO, ?AQ, ?AP, ?AR, ?AR, ?AT, ?AU, ?AV);</Statement>
    <Objects>Goods.OperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateOperationPersistenceObjectGeneral</Key>
    <Statement>UPDATE goodsoperations SET OperationDate=?AA, JournalEntryID=?AB, DocNo=?AC, Content=?AD, UpdateDate=?AR, AccountOperation=?AT WHERE ID=?CD ;</Statement>
    <Objects>Goods.OperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertConsignmentPersistenceObject</Key>
    <Statement>INSERT INTO consignments(ParentID, AcquisitionID, WarehouseID, Amount, UnitValue, TotalValue) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF);</Statement>
    <Objects>Goods.ConsignmentPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateConsignmentPersistenceObject</Key>
    <Statement>UPDATE consignments SET WarehouseID=?AC, Amount=?AD, UnitValue=?AE, TotalValue=?AF WHERE ID=?CD ;</Statement>
    <Objects>Goods.ConsignmentPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteConsignmentPersistenceObject</Key>
    <Statement>DELETE FROM consignments WHERE consignments.ID=?CD ;</Statement>
    <Objects>Goods.ConsignmentPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchConsignmentPersistenceObjectListForParent</Key>
    <Statement>SELECT c.ID, c.ParentID, c.AcquisitionID, c.WarehouseID, c.Amount, c.UnitValue, c.TotalValue, SUM(d.Amount) AS AmountWithdrawn, SUM(d.TotalValue) AS TotalValueWithdrawn, o.OperationDate FROM consignments c LEFT JOIN consignmentdiscards d ON d.ConsignmentID=c.ID LEFT JOIN goodsoperations o ON o.ID=c.AcquisitionID WHERE c.ParentID=?CD GROUP BY c.ID ORDER BY o.OperationDate ASC;</Statement>
    <Objects>Goods.ConsignmentPersistenceObjectList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchConsignmentPersistenceObjectList</Key>
    <Statement>SELECT c.ID, c.ParentID, c.AcquisitionID, c.WarehouseID, CROUND(c.Amount, 6) AS ConsignmentAmount, c.UnitValue, c.TotalValue, CROUND(IFNULL(SUM(d.Amount), 0), 6) AS AmountWithdrawn, IFNULL(SUM(d.TotalValue), 0) AS TotalValueWithdrawn, o.OperationDate FROM consignments c LEFT JOIN consignmentdiscards d ON d.ConsignmentID=c.ID AND d.ParentID&lt;&gt;?OD LEFT JOIN goodsoperations o ON o.ID=c.AcquisitionID WHERE o.GoodsID=?GD AND o.WarehouseID=?WD AND c.ParentID&lt;&gt;?PD GROUP BY c.ID HAVING ConsignmentAmount &gt; AmountWithdrawn ORDER BY o.OperationDate ASC;</Statement>
    <Objects>Goods.ConsignmentPersistenceObjectList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertConsignmentDiscardPersistenceObject</Key>
    <Statement>INSERT INTO consignmentdiscards(ParentID, ConsignmentID, Amount, TotalValue) VALUES(?AA, ?AB, ?AC, ?AD);</Statement>
    <Objects>Goods.ConsignmentDiscardPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateConsignmentDiscardPersistenceObject</Key>
    <Statement>UPDATE consignmentdiscards SET Amount=?AC, TotalValue=?AD WHERE ID=?CD ;</Statement>
    <Objects>Goods.ConsignmentDiscardPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteConsignmentDiscardPersistenceObject</Key>
    <Statement>DELETE FROM consignmentdiscards WHERE consignmentdiscards.ID=?CD ;</Statement>
    <Objects>Goods.ConsignmentDiscardPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchConsignmentDiscardPersistenceObjectList</Key>
    <Statement>SELECT d.ID, d.ParentID, d.ConsignmentID, d.Amount, d.TotalValue FROM consignmentdiscards d WHERE d.ParentID=?CD ;</Statement>
    <Objects>Goods.ConsignmentDiscardPersistenceObjectList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchConsignmentItemList</Key>
    <Statement>SELECT c.ID, c.ParentID, c.AcquisitionID, c.WarehouseID, c.ConsignmentAmount, c.UnitValue, c.TotalValue, c.AmountWithdrawn, c.TotalValueWithdrawn, w.Name, b.Op_data, b.Op_Dok, b.Op_dok_rusis, d.TotalValue, p.TotalValue, d.ID, p.ID FROM (SELECT c.ID, c.ParentID, c.AcquisitionID, c.WarehouseID, CROUND(c.Amount, 6) AS ConsignmentAmount, c.UnitValue, c.TotalValue, CROUND(IFNULL(SUM(d.Amount), 0), 6) AS AmountWithdrawn, IFNULL(SUM(d.TotalValue), 0) AS TotalValueWithdrawn, o.JournalEntryID FROM consignments c LEFT JOIN consignmentdiscards d ON d.ConsignmentID=c.ID AND d.ParentID&lt;&gt;?OD LEFT JOIN goodsoperations o ON o.ID=c.AcquisitionID WHERE c.ParentID&lt;&gt;?OD AND o.GoodsID=?GD AND o.WarehouseID=?WD GROUP BY c.ID HAVING ConsignmentAmount &gt; AmountWithdrawn ORDER BY o.OperationDate ASC) AS c LEFT JOIN bz b ON b.Op_ID=c.JournalEntryID LEFT JOIN warehouses w ON w.ID=c.WarehouseID LEFT JOIN consignmentdiscards d ON d.ParentID=?OD AND d.ConsignmentID=c.ID LEFT JOIN consignments p ON p.ParentID=?OD AND p.AcquisitionID=c.AcquisitionID;</Statement>
    <Objects>Goods.ConsignmentItemList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchGoodsInfoList</Key>
    <Statement>SELECT g.ID, g.Name, g.MeasureUnit, g.GoodsBarcode, g.GoodsCode, g.TradeItemType, g.IsObsolete, g.AccountSalesNetCosts, g.GroupID, g.DefaultVatRateSales, g.DefaultVatRatePurchase, g.DefaultAccountingMethod, g.DefaultWarehouseID FROM goods g ORDER BY g.Name</Statement>
    <Objects>HelperLists.GoodsInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchGoodsGroupList</Key>
    <Statement>SELECT g.ID, g.Name, COUNT(d.ID) FROM prekes_gr g LEFT JOIN goods d ON d.GroupID=g.ID GROUP BY g.ID ORDER BY g.Name;</Statement>
    <Objects>Goods.GoodsGroupList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertGoodsGroup</Key>
    <Statement>INSERT INTO prekes_gr(Name) VALUES(?AA);</Statement>
    <Objects>Goods.GoodsGroup</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateGoodsGroup</Key>
    <Statement>UPDATE prekes_gr SET Name=?AA WHERE ID=?CD ;</Statement>
    <Objects>Goods.GoodsGroup</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteGoodsGroup</Key>
    <Statement>DELETE FROM prekes_gr WHERE prekes_gr.ID=?CD ;</Statement>
    <Objects>Goods.GoodsGroup</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfCanDeleteGoodsInfoList</Key>
    <Statement>SELECT DISTINCT d.GroupID FROM goods d WHERE d.GroupID&gt;0;</Statement>
    <Objects>Goods.GoodsGroupList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchComplexOperationPersistenceObject</Key>
    <Statement>SELECT c.ID, c.OperationDate, c.JournalEntryID, c.DocNo, c.Content, c.GoodsID, c.OperationType, c.AccountOperation, c.InsertDate, c.UpdateDate, w.ID, w.Name, w.IsProduction, w.IsObsolete, w.WarehouseAccount, v.ID, v.Name, v.IsProduction, v.IsObsolete, v.WarehouseAccount FROM goodscomplexoperations c LEFT JOIN warehouses w ON w.ID=c.WarehouseID LEFT JOIN warehouses v ON v.ID=c.SecondaryWarehouseID WHERE c.ID=?OD ;</Statement>
    <Objects>Goods.ComplexOperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertComplexOperationPersistenceObject</Key>
    <Statement>INSERT INTO goodscomplexoperations(OperationDate, JournalEntryID, DocNo, Content, GoodsID, OperationType, WarehouseID, SecondaryWarehouseID, InsertDate, UpdateDate, AccountOperation) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF, ?AG, ?AH, ?AI, ?AI, ?AJ);</Statement>
    <Objects>Goods.ComplexOperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateComplexOperationPersistenceObjectFull</Key>
    <Statement>UPDATE goodscomplexoperations SET OperationDate=?AA, JournalEntryID=?AB, DocNo=?AC, Content=?AD, WarehouseID=?AG, SecondaryWarehouseID=?AH, UpdateDate=?AI, AccountOperation=?AJ WHERE ID=?CD ;</Statement>
    <Objects>Goods.ComplexOperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteComplexOperationPersistenceObject</Key>
    <Statement>DELETE FROM goodscomplexoperations WHERE goodscomplexoperations.ID=?CD ;</Statement>
    <Objects>Goods.ComplexOperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateComplexOperationPersistenceObjectGeneral</Key>
    <Statement>UPDATE goodscomplexoperations SET OperationDate=?AA, DocNo=?AC, Content=?AD, UpdateDate=?AI WHERE ID=?CD ;</Statement>
    <Objects>Goods.ComplexOperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteConsignmentsByComplexParent</Key>
    <Statement>DELETE FROM consignments WHERE consignments.ParentID IN (SELECT g.ID FROM goodsoperations g WHERE g.ComplexOperationID=?OD);</Statement>
    <Objects>Goods.ComplexOperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteConsignmentDiscardsByComplexParent</Key>
    <Statement>DELETE FROM consignmentdiscards WHERE consignmentdiscards.ParentID IN (SELECT g.ID FROM goodsoperations g WHERE g.ComplexOperationID=?OD);</Statement>
    <Objects>Goods.ComplexOperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfGoodsComplexOperationUpdateDateChanged</Key>
    <Statement>SELECT c.UpdateDate FROM goodscomplexoperations c WHERE c.ID=?CD ;</Statement>
    <Objects>Goods.ComplexOperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchOperationPersistenceObjectList</Key>
    <Statement>SELECT g.ID, g.OperationDate, g.OperationType, g.JournalEntryID, g.DocNo, g.Content, g.GoodsID, g.Amount, g.AmountInWarehouse, g.UnitValue, g.TotalValue, g.AccountGeneral, g.AccountSalesNetCosts, g.AccountPurchases, g.AccountDiscounts, g.AccountPriceCut, g.ComplexOperationID, f.OperationType, g.InsertDate, g.UpdateDate, g.AccountOperation, g.AccountOperationValue, b.Op_data, b.Op_turinys, b.Op_dok_rusis, b.Op_Dok, b.Op_korespond, CONCAT(a.Pavad, ', ', a.Kodas), g.AmountInPurchases, w.ID, w.Name, w.IsProduction, w.IsObsolete, w.WarehouseAccount, d.ID, d.Name, d.MeasureUnit, l.AccountSalesNetCosts, l.AccountPurchases, l.AccountDiscounts, l.AccountValueReduction, d.PriceSale, d.PricePurchase, d.DefaultVatRateSales, d.DefaultVatRatePurchase, IFNULL(p.Name,''), d.DefaultAccountingMethod, IFNULL((SELECT v.MethodCode FROM goodsvaluationmethods v WHERE v.GoodsID=g.GoodsID AND v.ChangeDate&lt;=g.OperationDate ORDER BY v.ChangeDate DESC LIMIT 1), d.DefaultValuationMethod), v.ID, v.Name, v.IsProduction, v.IsObsolete, v.WarehouseAccount FROM goodsoperations g LEFT JOIN bz b ON b.Op_ID=g.JournalEntryID LEFT JOIN asmenys a ON a.ID=b.Op_analitika LEFT JOIN goodscomplexoperations f ON f.ID=g.ComplexOperationID LEFT JOIN goods d ON d.ID=g.GoodsID LEFT JOIN prekes_gr p ON p.ID=d.ID LEFT JOIN warehouses v ON v.ID=d.DefaultWarehouseID LEFT JOIN warehouses w ON w.ID=g.WarehouseID LEFT JOIN (SELECT go.ID, IFNULL(MAX(CASE WHEN ro.AccountType=9 THEN ro.AccountValue ELSE null END), go.AccountSalesNetCosts) AS AccountSalesNetCosts, IFNULL(MAX(CASE WHEN ro.AccountType=10 THEN ro.AccountValue ELSE null END), go.AccountPurchases) AS AccountPurchases, IFNULL(MAX(CASE WHEN ro.AccountType=11 THEN ro.AccountValue ELSE null END), go.AccountDiscounts) AS AccountDiscounts, IFNULL(MAX(CASE WHEN ro.AccountType=12 THEN ro.AccountValue ELSE null END), go.AccountValueReduction) AS AccountValueReduction FROM goods go LEFT JOIN (SELECT po.GoodsID, po.AccountType, po.AccountValue FROM (SELECT ac.GoodsID, ac.AccountType, MAX(ac.ChangeDate) AS MaxDate FROM goodsaccounts ac WHERE ac.ChangeDate &lt; (SELECT hj.OperationDate FROM goodscomplexoperations hj WHERE hj.ID=?OD) GROUP BY ac.GoodsID, ac.AccountType) AS vo LEFT JOIN goodsaccounts po ON po.GoodsID=vo.GoodsID AND po.AccountType=vo.AccountType AND po.ChangeDate=vo.MaxDate WHERE NOT po.GoodsID IS NULL) AS ro ON ro.GoodsID=go.ID GROUP BY go.ID) AS l ON l.ID=g.GoodsID WHERE g.ComplexOperationID=?OD ORDER BY g.ID;</Statement>
    <Objects>Goods.OperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchOperationalLimitListOldComplex</Key>
    <Statement>SELECT GoodsID, OperationType, WarehouseID, MAX(OperationDate), 0 FROM goodsoperations WHERE GoodsID IN (SELECT p.GoodsID FROM goodsoperations p WHERE p.ComplexOperationID=?CD) AND ComplexOperationID&lt;&gt;?CD GROUP BY GoodsID, OperationType, WareHouseID UNION SELECT GoodsID, OperationType, WarehouseID, MAX(OperationDate), 1 FROM goodsoperations WHERE GoodsID IN (SELECT p.GoodsID FROM goodsoperations p WHERE p.ComplexOperationID=?CD) AND ComplexOperationID&lt;&gt;?CD AND OperationDate&lt;=?DT GROUP BY GoodsID, OperationType, WareHouseID UNION SELECT GoodsID, OperationType, WarehouseID, MIN(OperationDate), 2 FROM goodsoperations WHERE GoodsID IN (SELECT p.GoodsID FROM goodsoperations p WHERE p.ComplexOperationID=?CD) AND ComplexOperationID&lt;&gt;?CD AND OperationDate&gt;=?DT GROUP BY GoodsID, OperationType, WareHouseID UNION SELECT GoodsID, 13, 0, MAX(ChangeDate), 0 FROM goodsvaluationmethods WHERE GoodsID IN (SELECT p.GoodsID FROM goodsoperations p WHERE p.ComplexOperationID=?CD) GROUP BY GoodsID UNION SELECT GoodsID, 13, 0, MAX(ChangeDate), 1 FROM goodsvaluationmethods WHERE GoodsID IN (SELECT p.GoodsID FROM goodsoperations p WHERE p.ComplexOperationID=?CD) AND ChangeDate&lt;=?DT GROUP BY GoodsID UNION SELECT GoodsID, 13, 0, MIN(ChangeDate), 2 FROM goodsvaluationmethods WHERE GoodsID IN (SELECT p.GoodsID FROM goodsoperations p WHERE p.ComplexOperationID=?CD) AND ChangeDate&gt;=?DT GROUP BY GoodsID UNION SELECT GoodsID, AccountType, 0, MAX(ChangeDate), 0 FROM goodsaccounts WHERE GoodsID IN (SELECT p.GoodsID FROM goodsoperations p WHERE p.ComplexOperationID=?CD) GROUP BY GoodsID UNION SELECT GoodsID, AccountType, 0, MAX(ChangeDate), 1 FROM goodsaccounts WHERE GoodsID IN (SELECT p.GoodsID FROM goodsoperations p WHERE p.ComplexOperationID=?CD) AND ChangeDate&lt;=?DT GROUP BY GoodsID UNION SELECT GoodsID, AccountType, 0, MIN(ChangeDate), 2 FROM goodsaccounts WHERE GoodsID IN (SELECT p.GoodsID FROM goodsoperations p WHERE p.ComplexOperationID=?CD) AND ChangeDate&gt;=?DT GROUP BY GoodsID UNION SELECT p.GoodsID, 999, COUNT(u.ID), MIN(o.OperationDate), 0 FROM goodsoperations p LEFT JOIN consignments c ON c.ParentID=p.ID LEFT JOIN consignmentdiscards u ON u.ConsignmentID=c.ID LEFT JOIN goodsoperations o ON o.ID=u.ParentID WHERE p.ID IN (SELECT p.ID FROM goodsoperations p WHERE p.ComplexOperationID=?CD) GROUP BY p.ID;</Statement>
    <Objects>Goods.OperationalLimitList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateComplexOperationPersistenceObjectGeneral2</Key>
    <Statement>UPDATE goodscomplexoperations SET OperationDate=?AA, DocNo=?AC, Content=?AD, UpdateDate=?AI, WarehouseID=?AG WHERE ID=?CD ;</Statement>
    <Objects>Goods.ComplexOperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateComplexOperationPersistenceObjectGeneral3</Key>
    <Statement>UPDATE goodscomplexoperations SET OperationDate=?AA, DocNo=?AC, Content=?AD, UpdateDate=?AI, SecondaryWarehouseID=?AH WHERE ID=?CD ;</Statement>
    <Objects>Goods.ComplexOperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateConsignmentDiscardPersistenceObjectWarehouse</Key>
    <Statement>UPDATE consignments SET WarehouseID=?WD WHERE ParentID=?PD ;</Statement>
    <Objects>Goods.ConsignmentPersistenceObjectList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteOperationsByComplexParent</Key>
    <Statement>DELETE FROM goodsoperations WHERE goodsoperations.ComplexOperationID=?CD ;</Statement>
    <Objects>Goods.ComplexOperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CreateGoodsOperationPriceCut</Key>
    <Statement>SELECT SUM(o.AmountInWarehouse) AS AmountInWarehouseAccounts, SUM(o.AccountGeneral) AS TotalValueInWarehouseAccounts, SUM(o.AccountPriceCut) AS TotalValueCurrentPriceCut, g.ID, g.Name, g.MeasureUnit, l.AccountSalesNetCosts, l.AccountPurchases, l.AccountDiscounts, l.AccountValueReduction, g.PriceSale, g.PricePurchase, g.DefaultVatRateSales, g.DefaultVatRatePurchase, IFNULL(f.Name,''), g.DefaultAccountingMethod, IFNULL((SELECT v.MethodCode FROM goodsvaluationmethods v WHERE v.GoodsID=g.ID ORDER BY v.ChangeDate DESC LIMIT 1), g.DefaultValuationMethod), w.ID, w.Name, w.IsProduction, w.IsObsolete, w.WarehouseAccount FROM goods g LEFT JOIN prekes_gr f ON f.ID=g.GroupID LEFT JOIN warehouses w ON w.ID=g.DefaultWarehouseID LEFT JOIN goodsoperations o ON o.GoodsID=g.ID AND o.OperationDate&lt;=?DT LEFT JOIN (SELECT go.ID, IFNULL(MAX(CASE WHEN ro.AccountType=9 THEN ro.AccountValue ELSE null END), go.AccountSalesNetCosts) AS AccountSalesNetCosts, IFNULL(MAX(CASE WHEN ro.AccountType=10 THEN ro.AccountValue ELSE null END), go.AccountPurchases) AS AccountPurchases, IFNULL(MAX(CASE WHEN ro.AccountType=11 THEN ro.AccountValue ELSE null END), go.AccountDiscounts) AS AccountDiscounts, IFNULL(MAX(CASE WHEN ro.AccountType=12 THEN ro.AccountValue ELSE null END), go.AccountValueReduction) AS AccountValueReduction FROM goods go LEFT JOIN (SELECT po.GoodsID, po.AccountType, po.AccountValue FROM (SELECT ac.GoodsID, ac.AccountType, MAX(ac.ChangeDate) AS MaxDate FROM goodsaccounts ac GROUP BY ac.GoodsID, ac.AccountType) AS vo LEFT JOIN goodsaccounts po ON po.GoodsID=vo.GoodsID AND po.AccountType=vo.AccountType AND po.ChangeDate=vo.MaxDate WHERE NOT po.GoodsID IS NULL) AS ro ON ro.GoodsID=go.ID GROUP BY go.ID) AS l ON l.ID=g.ID WHERE g.ID=?GD GROUP BY g.ID;</Statement>
    <Objects>Goods.GoodsOperationPriceCut</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchGoodsOperationPriceCut</Key>
    <Statement>SELECT e.ID, e.OperationDate, e.OperationType, e.JournalEntryID, e.DocNo, e.Content, e.AccountPriceCut, e.ComplexOperationID, k.OperationType, e.AccountOperation, e.InsertDate, e.UpdateDate, SUM(o.AmountInWarehouse) AS AmountInWarehouseAccounts, SUM(o.AccountGeneral) AS TotalValueInWarehouseAccounts, SUM(o.AccountPriceCut) AS TotalValueCurrentPriceCut, g.ID, g.Name, g.MeasureUnit, l.AccountSalesNetCosts, l.AccountPurchases, l.AccountDiscounts, l.AccountValueReduction, g.PriceSale, g.PricePurchase, g.DefaultVatRateSales, g.DefaultVatRatePurchase, IFNULL(f.Name,''), g.DefaultAccountingMethod, IFNULL((SELECT v.MethodCode FROM goodsvaluationmethods v WHERE v.GoodsID=g.ID ORDER BY v.ChangeDate DESC LIMIT 1), g.DefaultValuationMethod), w.ID, w.Name, w.IsProduction, w.IsObsolete, w.WarehouseAccount FROM goodsoperations e LEFT JOIN goodscomplexoperations k ON k.ID=e.ComplexOperationID LEFT JOIN goods g ON g.ID=e.GoodsID LEFT JOIN prekes_gr f ON f.ID=g.GroupID LEFT JOIN warehouses w ON w.ID=g.DefaultWarehouseID LEFT JOIN goodsoperations o ON o.GoodsID=g.ID AND o.OperationDate&lt;=e.OperationDate AND o.ID&lt;&gt;?OD LEFT JOIN (SELECT go.ID, IFNULL(MAX(CASE WHEN ro.AccountType=9 THEN ro.AccountValue ELSE null END), go.AccountSalesNetCosts) AS AccountSalesNetCosts, IFNULL(MAX(CASE WHEN ro.AccountType=10 THEN ro.AccountValue ELSE null END), go.AccountPurchases) AS AccountPurchases, IFNULL(MAX(CASE WHEN ro.AccountType=11 THEN ro.AccountValue ELSE null END), go.AccountDiscounts) AS AccountDiscounts, IFNULL(MAX(CASE WHEN ro.AccountType=12 THEN ro.AccountValue ELSE null END), go.AccountValueReduction) AS AccountValueReduction FROM goods go LEFT JOIN (SELECT po.GoodsID, po.AccountType, po.AccountValue FROM (SELECT ac.GoodsID, ac.AccountType, MAX(ac.ChangeDate) AS MaxDate FROM goodsaccounts ac WHERE ac.ChangeDate &lt; (SELECT hj.OperationDate FROM goodsoperations hj WHERE hj.ID=?OD) GROUP BY ac.GoodsID, ac.AccountType) AS vo LEFT JOIN goodsaccounts po ON po.GoodsID=vo.GoodsID AND po.AccountType=vo.AccountType AND po.ChangeDate=vo.MaxDate WHERE NOT po.GoodsID IS NULL) AS ro ON ro.GoodsID=go.ID GROUP BY go.ID) AS l ON l.ID=e.GoodsID WHERE e.ID=?OD GROUP BY e.ID, e.GoodsID;</Statement>
    <Objects>Goods.GoodsOperationPriceCut</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchGoodsComplexOperationPriceCut</Key>
    <Statement>SELECT e.ID, e.OperationDate, e.OperationType, e.JournalEntryID, e.DocNo, e.Content, e.AccountPriceCut, e.ComplexOperationID, k.OperationType, e.AccountOperation, e.InsertDate, e.UpdateDate, SUM(o.AmountInWarehouse) AS AmountInWarehouseAccounts, SUM(o.AccountGeneral) AS TotalValueInWarehouseAccounts, SUM(o.AccountPriceCut) AS TotalValueCurrentPriceCut, g.ID, g.Name, g.MeasureUnit, l.AccountSalesNetCosts, l.AccountPurchases, l.AccountDiscounts, l.AccountValueReduction, g.PriceSale, g.PricePurchase, g.DefaultVatRateSales, g.DefaultVatRatePurchase, IFNULL(f.Name,''), g.DefaultAccountingMethod, IFNULL((SELECT v.MethodCode FROM goodsvaluationmethods v WHERE v.GoodsID=g.ID ORDER BY v.ChangeDate DESC LIMIT 1), g.DefaultValuationMethod), w.ID, w.Name, w.IsProduction, w.IsObsolete, w.WarehouseAccount FROM goodsoperations e LEFT JOIN goodscomplexoperations k ON k.ID=e.ComplexOperationID LEFT JOIN goods g ON g.ID=e.GoodsID LEFT JOIN prekes_gr f ON f.ID=g.GroupID LEFT JOIN warehouses w ON w.ID=g.DefaultWarehouseID LEFT JOIN goodsoperations o ON o.GoodsID=g.ID AND o.OperationDate&lt;=e.OperationDate AND NOT o.ID IN (SELECT s.ID FROM goodsoperations s WHERE s.ComplexOperationID=?CD) LEFT JOIN (SELECT go.ID, IFNULL(MAX(CASE WHEN ro.AccountType=9 THEN ro.AccountValue ELSE null END), go.AccountSalesNetCosts) AS AccountSalesNetCosts, IFNULL(MAX(CASE WHEN ro.AccountType=10 THEN ro.AccountValue ELSE null END), go.AccountPurchases) AS AccountPurchases, IFNULL(MAX(CASE WHEN ro.AccountType=11 THEN ro.AccountValue ELSE null END), go.AccountDiscounts) AS AccountDiscounts, IFNULL(MAX(CASE WHEN ro.AccountType=12 THEN ro.AccountValue ELSE null END), go.AccountValueReduction) AS AccountValueReduction FROM goods go LEFT JOIN (SELECT po.GoodsID, po.AccountType, po.AccountValue FROM (SELECT ac.GoodsID, ac.AccountType, MAX(ac.ChangeDate) AS MaxDate FROM goodsaccounts ac WHERE ac.ChangeDate &lt; (SELECT hj.OperationDate FROM goodscomplexoperations hj WHERE hj.ID=?CD) GROUP BY ac.GoodsID, ac.AccountType) AS vo LEFT JOIN goodsaccounts po ON po.GoodsID=vo.GoodsID AND po.AccountType=vo.AccountType AND po.ChangeDate=vo.MaxDate WHERE NOT po.GoodsID IS NULL) AS ro ON ro.GoodsID=go.ID GROUP BY go.ID) AS l ON l.ID=e.GoodsID WHERE e.ComplexOperationID=?CD GROUP BY e.ID, e.GoodsID;</Statement>
    <Objects>Goods.GoodsComplexOperationPriceCut</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchGoodsPriceInWarehouseItem</Key>
    <Statement>SELECT SUM(o.AmountInWarehouse) AS AmountInWarehouseAccounts, SUM(o.AccountGeneral) AS TotalValueInWarehouseAccounts, SUM(o.AccountPriceCut) AS TotalValueCurrentPriceCut FROM goods g LEFT JOIN goodsoperations o ON o.GoodsID=g.ID AND o.OperationDate&lt;=?DT AND o.ID&lt;&gt;?OD WHERE g.ID=?GD GROUP BY g.ID;</Statement>
    <Objects>Goods.GoodsPriceInWarehouseItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchGoodsOperationValuationMethod</Key>
    <Statement>SELECT g.ID, g.GoodsID, g.ChangeDate, g.Content, g.MethodCode, g.InsertDate, g.UpdateDate, IFNULL((SELECT d.MethodCode FROM goodsvaluationmethods d WHERE d.GoodsID=g.GoodsID AND d.ChangeDate&lt;g.ChangeDate ORDER BY d.ChangeDate DESC LIMIT 1), f.DefaultValuationMethod) FROM goodsvaluationmethods g LEFT JOIN goods f ON f.ID=g.GoodsID WHERE g.ID=?MD ;</Statement>
    <Objects>Goods.GoodsOperationValuationMethod</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertGoodsOperationValuationMethod</Key>
    <Statement>INSERT INTO goodsvaluationmethods(ChangeDate, Content, MethodCode, GoodsID, InsertDate, UpdateDate) VALUES(?AA, ?AB, ?AC, ?GD, ?TS, ?TS);</Statement>
    <Objects>Goods.GoodsOperationValuationMethod</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateGoodsOperationValuationMethodFull</Key>
    <Statement>UPDATE goodsvaluationmethods SET ChangeDate=?AA, Content=?AB, MethodCode=?AC, UpdateDate=?TS WHERE ID=?CD ;</Statement>
    <Objects>Goods.GoodsOperationValuationMethod</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteGoodsOperationValuationMethod</Key>
    <Statement>DELETE FROM goodsvaluationmethods WHERE goodsvaluationmethods.ID=?CD ;</Statement>
    <Objects>Goods.GoodsOperationValuationMethod</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfValuationMethodUpdateDateChanged</Key>
    <Statement>SELECT g.UpdateDate FROM goodsvaluationmethods g WHERE g.ID=?CD ;</Statement>
    <Objects>Goods.GoodsOperationValuationMethod</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateGoodsOperationValuationMethodGeneral</Key>
    <Statement>UPDATE goodsvaluationmethods SET ChangeDate=?AA, Content=?AB, UpdateDate=?TS WHERE ID=?CD ;</Statement>
    <Objects>Goods.GoodsOperationValuationMethod</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchProductionItemList</Key>
    <Statement>SELECT d.Tip, d.ID, d.Sask, d.Kiek, d.NormativeUnitCost, g.ID, g.Name, g.MeasureUnit, g.GoodsBarcode, g.GoodsCode, g.TradeItemType, g.IsObsolete, g.AccountSalesNetCosts, g.GroupID, g.DefaultVatRateSales, g.DefaultVatRatePurchase, g.DefaultAccountingMethod, g.DefaultWarehouseID FROM kalkuliac_d d LEFT JOIN goods g ON g.ID=d.P_ID WHERE d.K_ID=?CD ;</Statement>
    <Objects>Goods.ProductionCalculation</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertProductionItem</Key>
    <Statement>INSERT INTO kalkuliac_d(K_ID, Tip, P_ID, Sask, Kiek, NormativeUnitCost) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF);</Statement>
    <Objects>Goods.ProductionComponentItem, Goods.ProductionCostItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateProductionItem</Key>
    <Statement>UPDATE kalkuliac_d SET P_ID=?AC, Sask=?AD, Kiek=?AE, NormativeUnitCost=?AF WHERE ID=?CD ;</Statement>
    <Objects>Goods.ProductionComponentItem, Goods.ProductionCostItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteProductionItem</Key>
    <Statement>DELETE FROM kalkuliac_d WHERE kalkuliac_d.ID=?CD ;</Statement>
    <Objects>Goods.ProductionComponentItem, Goods.ProductionCostItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchProductionCalculation</Key>
    <Statement>SELECT k.ID, k.Vnt_sk, k.K_data, k.IsObsolete, k.Description, k.InsertDate, k.UpdateDate, g.ID, g.Name, g.MeasureUnit, g.GoodsBarcode, g.GoodsCode, g.TradeItemType, g.IsObsolete, g.AccountSalesNetCosts, g.GroupID, g.DefaultVatRateSales, g.DefaultVatRatePurchase, g.DefaultAccountingMethod, g.DefaultWarehouseID FROM kalkuliac k LEFT JOIN goods g ON g.ID=k.P_ID WHERE k.ID=?CD ;</Statement>
    <Objects>Goods.ProductionCalculation</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertProductionCalculation</Key>
    <Statement>INSERT INTO kalkuliac(Vnt_sk, K_data, IsObsolete, P_ID, Description, InsertDate, UpdateDate) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF, ?AF);</Statement>
    <Objects>Goods.ProductionCalculation</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateProductionCalculation</Key>
    <Statement>UPDATE kalkuliac SET Vnt_sk=?AA, K_data=?AB, IsObsolete=?AC, P_ID=?AD, Description=?AE, UpdateDate=?AF WHERE ID=?CD ;</Statement>
    <Objects>Goods.ProductionCalculation</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteProductionCalculation</Key>
    <Statement>DELETE FROM kalkuliac WHERE kalkuliac.ID=?CD ;</Statement>
    <Objects>Goods.ProductionCalculation</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteProductionCalculationItems</Key>
    <Statement>DELETE FROM kalkuliac_d WHERE kalkuliac_d.K_ID=?CD ;</Statement>
    <Objects>Goods.ProductionCalculation</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchProductionCalculationItemList</Key>
    <Statement>SELECT k.ID, k.Vnt_sk, k.K_data, k.IsObsolete, k.Description, k.InsertDate, k.UpdateDate, g.ID, g.Name, g.MeasureUnit, g.GoodsCode, SUM(CASE WHEN d.Tip='a' THEN 1 ELSE 0 END), SUM(CASE WHEN d.Tip='s' THEN Kiek ELSE 0 END) FROM kalkuliac k LEFT JOIN goods g ON g.ID=k.P_ID LEFT JOIN kalkuliac_d d ON d.K_ID=k.ID GROUP BY k.ID ORDER BY g.Name, k.K_data;</Statement>
    <Objects>ActiveReports.ProductionCalculationItemList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchProductionCalculationInfoList</Key>
    <Statement>SELECT k.ID, k.K_data, k.IsObsolete, k.Description, g.ID, g.Name FROM kalkuliac k LEFT JOIN goods g ON g.ID=k.P_ID ORDER BY g.Name, k.K_data;</Statement>
    <Objects>HelperLists.ProductionCalculationInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchConsignmentPersistenceObjectListForWarehouse</Key>
    <Statement>SELECT c.ID, c.ParentID, c.AcquisitionID, c.WarehouseID, CROUND(c.Amount, 6) AS ConsignmentAmount, c.UnitValue, c.TotalValue, CROUND(IFNULL(SUM(d.Amount), 0), 6) AS AmountWithdrawn, IFNULL(SUM(d.TotalValue), 0) AS TotalValueWithdrawn, o.OperationDate, o.GoodsID FROM consignments c LEFT JOIN consignmentdiscards d ON d.ConsignmentID=c.ID AND NOT d.ParentID IN (SELECT a.ID FROM goodsoperations a WHERE a.ComplexOperationID=?CD) LEFT JOIN goodsoperations o ON o.ID=c.AcquisitionID WHERE o.WarehouseID=?WD AND NOT c.ParentID  IN (SELECT a.ID FROM goodsoperations a WHERE a.ComplexOperationID=?CD) GROUP BY c.ID HAVING ConsignmentAmount &gt; AmountWithdrawn ORDER BY o.OperationDate ASC;</Statement>
    <Objects>Goods.ConsignmentPersistenceObjectList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLastInventorizationDate</Key>
    <Statement>SELECT w.ID, w.Name, w.WarehouseAccount, MAX(d.OperationDate) FROM warehouses w LEFT JOIN goodscomplexoperations d ON d.WarehouseID=w.ID AND d.OperationType=3 AND d.OperationDate&lt;IFNULL((SELECT f.OperationDate FROM goodscomplexoperations f WHERE f.ID=?CD), '2100-12-31') WHERE w.ID=?WD GROUP BY w.ID;</Statement>
    <Objects>Goods.GoodsComplexOperationInventorization</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CreateGoodsComplexOperationInventorizationItems</Key>
    <Statement>SELECT d.GoodsID, SUM(CASE WHEN d.OperationDate&lt;=?DF OR d.OperationType=14 THEN d.AmountInWarehouse ELSE 0 END) AS AmountLastInventorization, SUM(CASE WHEN d.OperationDate&lt;=?DF OR d.OperationType=14 THEN d.AccountGeneral ELSE 0 END) AS TotalValueLastInventorization, SUM(CASE WHEN d.OperationDate&gt;?DF AND (d.OperationType=1 OR (d.OperationType=14 AND g.DefaultAccountingMethod=1)) THEN d.Amount ELSE 0 END) AS AmountAcquisitions, SUM(CASE WHEN d.OperationDate&gt;?DF AND (d.OperationType=1 OR (d.OperationType=14 AND g.DefaultAccountingMethod=1)) THEN d.TotalValue ELSE 0 END) AS TotalValueAcquisitions, SUM(CASE WHEN d.OperationDate&gt;?DF AND (d.OperationType=2 OR d.OperationType=3) THEN d.Amount ELSE 0 END) AS AmountDisposed, SUM(CASE WHEN d.OperationDate&gt;?DF AND (d.OperationType=2 OR d.OperationType=3) THEN d.TotalValue ELSE 0 END) AS TotalValueDisposed, SUM(CASE WHEN d.OperationDate&gt;?DF AND d.OperationType=2 AND c.OperationType=1 THEN d.Amount ELSE 0 END) AS AmountTransfered, SUM(CASE WHEN d.OperationDate&gt;?DF AND d.OperationType=2 AND c.OperationType=1 THEN d.TotalValue ELSE 0 END) AS TotalValueTransfered, SUM(CASE WHEN d.OperationDate&gt;?DF AND d.OperationType=6 THEN CASE WHEN g.DefaultAccountingMethod=1 THEN d.AccountPurchases ELSE d.AccountGeneral END ELSE 0 END) AS TotalValueAdditionalCosts, SUM(CASE WHEN d.OperationDate&gt;?DF AND (d.OperationType=5 OR (d.OperationType=14 AND g.DefaultAccountingMethod=1)) THEN CASE WHEN g.DefaultAccountingMethod=1 THEN d.AccountDiscounts ELSE d.AccountGeneral END ELSE 0 END) AS TotalValueDiscount FROM goodsoperations d LEFT JOIN goods g ON g.ID=d.GoodsID LEFT JOIN goodscomplexoperations c ON c.ID=d.ComplexOperationID WHERE d.WarehouseID=?WD AND d.OperationDate&lt;=?DT GROUP BY d.GoodsID;</Statement>
    <Objects>Goods.GoodsComplexOperationInventorization</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchGoodsComplexOperationInventorizationItems</Key>
    <Statement>SELECT c.GoodsID, t.AmountLastInventorization, t.TotalValueLastInventorization, t.AmountAcquisitions, t.TotalValueAcquisitions, t.AmountDisposed, t.TotalValueDisposed, t.AmountTransfered, t.TotalValueTransfered, t.TotalValueAdditionalCosts, t.TotalValueDiscount, c.ID, c.Amount, c.AccountOperation, c.Content FROM goodsoperations c LEFT JOIN (SELECT d.GoodsID, SUM(CASE WHEN d.OperationDate&lt;=?DF OR d.OperationType=14 THEN d.AmountInWarehouse ELSE 0 END) AS AmountLastInventorization, SUM(CASE WHEN d.OperationDate&lt;=?DF OR d.OperationType=14 THEN d.AccountGeneral ELSE 0 END) AS TotalValueLastInventorization, SUM(CASE WHEN d.OperationDate&gt;?DF AND (d.OperationType=1 OR (d.OperationType=14 AND g.DefaultAccountingMethod=1)) THEN d.Amount ELSE 0 END) AS AmountAcquisitions, SUM(CASE WHEN d.OperationDate&gt;?DF AND (d.OperationType=1 OR (d.OperationType=14 AND g.DefaultAccountingMethod=1)) THEN d.TotalValue ELSE 0 END) AS TotalValueAcquisitions, SUM(CASE WHEN d.OperationDate&gt;?DF AND (d.OperationType=2 OR d.OperationType=3) THEN d.Amount ELSE 0 END) AS AmountDisposed, SUM(CASE WHEN d.OperationDate&gt;?DF AND (d.OperationType=2 OR d.OperationType=3) THEN d.TotalValue ELSE 0 END) AS TotalValueDisposed, SUM(CASE WHEN d.OperationDate&gt;?DF AND d.OperationType=2 AND c.OperationType=1 THEN d.Amount ELSE 0 END) AS AmountTransfered, SUM(CASE WHEN d.OperationDate&gt;?DF AND d.OperationType=2 AND c.OperationType=1 THEN d.TotalValue ELSE 0 END) AS TotalValueTransfered, SUM(CASE WHEN d.OperationDate&gt;?DF AND d.OperationType=6 THEN CASE WHEN g.DefaultAccountingMethod=1 THEN d.AccountPurchases ELSE d.AccountGeneral END ELSE 0 END) AS TotalValueAdditionalCosts, SUM(CASE WHEN d.OperationDate&gt;?DF AND (d.OperationType=5 OR (d.OperationType=14 AND g.DefaultAccountingMethod=1)) THEN CASE WHEN g.DefaultAccountingMethod=1 THEN d.AccountDiscounts ELSE d.AccountGeneral END ELSE 0 END) AS TotalValueDiscount FROM goodsoperations d LEFT JOIN goods g ON g.ID=d.GoodsID LEFT JOIN goodscomplexoperations c ON c.ID=d.ComplexOperationID WHERE d.WarehouseID=?WD AND d.OperationDate&lt;=?DT AND d.ComplexOperationID&lt;&gt;?CD GROUP BY d.GoodsID) AS t ON t.GoodsID=c.GoodsID WHERE c.ComplexOperationID=?CD;</Statement>
    <Objects>Goods.GoodsComplexOperationInventorization</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchOperationalLimitListNewInventorization</Key>
    <Statement>SELECT GoodsID, OperationType, WarehouseID, MAX(OperationDate), 0 FROM goodsoperations WHERE GoodsID IN (SELECT DISTINCT p.GoodsID FROM goodsoperations p WHERE p.WarehouseID=?WD) GROUP BY GoodsID, OperationType, WareHouseID UNION SELECT GoodsID, 13, 0, MAX(ChangeDate), 0 FROM goodsvaluationmethods WHERE GoodsID IN (SELECT DISTINCT p.GoodsID FROM goodsoperations p WHERE p.WarehouseID=?WD) GROUP BY GoodsID UNION SELECT GoodsID, AccountType, 0, MAX(ChangeDate), 0 FROM goodsaccounts WHERE GoodsID IN (SELECT DISTINCT p.GoodsID FROM goodsoperations p WHERE p.WarehouseID=?WD) GROUP BY GoodsID UNION SELECT p.GoodsID, 999, COUNT(u.ID), MIN(o.OperationDate), 0 FROM goodsoperations p LEFT JOIN consignments c ON c.ParentID=p.ID LEFT JOIN consignmentdiscards u ON u.ConsignmentID=c.ID LEFT JOIN goodsoperations o ON o.ID=u.ParentID WHERE p.ID IN (SELECT DISTINCT p.GoodsID FROM goodsoperations p WHERE p.WarehouseID=?WD) GROUP BY p.ID;</Statement>
    <Objects>Goods.OperationalLimitList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchGoodsTurnoverInfoList</Key>
    <Statement>SELECT g.ID, g.Name, g.MeasureUnit, l.AccountPurchases, l.AccountSalesNetCosts, l.AccountDiscounts, l.AccountValueReduction, r.Name, g.PricePurchase, g.DefaultVatRatePurchase, g.PriceSale, g.DefaultVatRateSales, g.DefaultAccountingMethod, IFNULL((SELECT v.MethodCode FROM goodsvaluationmethods v WHERE v.GoodsID=g.ID AND v.ChangeDate&lt;=?DT ORDER BY v.ChangeDate DESC LIMIT 1), g.DefaultValuationMethod) AS CurrentValuationMethod, g.TradeItemType, g.GoodsCode, g.GoodsBarCode, w.Name, w.WarehouseAccount, g.IsObsolete, SUM(CASE WHEN o.OperationDate&lt;?DF THEN o.Amount ELSE 0 END) AS AmountPeriodStart, SUM(CASE WHEN o.OperationDate&lt;?DF THEN o.AmountInWarehouse ELSE 0 END) AS AmountInWarehousePeriodStart, SUM(CASE WHEN o.OperationType=1 AND o.OperationDate&gt;=?DF THEN o.Amount ELSE 0 END) AS AmountAcquisitions, SUM(CASE WHEN o.OperationType=2 AND o.OperationDate&gt;=?DF THEN o.Amount ELSE 0 END) AS AmountTransfered, SUM(CASE WHEN o.OperationType=3 AND o.OperationDate&gt;=?DF THEN o.Amount ELSE 0 END) AS AmountDiscarded, SUM(CASE WHEN o.OperationType=1 AND o.OperationDate&gt;=?DF THEN o.AmountInWarehouse ELSE 0 END) AS AmountAcquisitionsInWarehouse, SUM(CASE WHEN o.OperationType=2 AND o.OperationDate&gt;=?DF THEN o.AmountInWarehouse ELSE 0 END) AS AmountTransferedInWarehouse, SUM(CASE WHEN o.OperationType=3 AND o.OperationDate&gt;=?DF THEN o.AmountInWarehouse ELSE 0 END) AS AmountDiscardedInWarehouse, SUM(CASE WHEN o.OperationType=4 AND o.OperationDate&gt;=?DF THEN o.Amount ELSE 0 END) AS AmountChangeInventorization, SUM(o.AmountInWarehouse) AS AmountInWarehousePeriodEnd, SUM(CASE WHEN o.OperationDate&lt;?DF THEN o.AmountInPurchases ELSE 0 END) AS AmountPurchasesPeriodStart, SUM(o.AmountInPurchases) AS AmountPurchasesPeriodEnd, SUM(CASE WHEN o.OperationType=6 AND o.OperationDate&gt;=?DF THEN o.TotalValue ELSE 0 END) AS TotalAdditionalCosts, SUM(CASE WHEN o.OperationType=5 AND o.OperationDate&gt;=?DF THEN o.TotalValue ELSE 0 END) AS TotalDiscounts, SUM(CASE WHEN o.OperationType=6 AND o.OperationDate&gt;=?DF THEN o.AccountSalesNetCosts ELSE 0 END) AS TotalAdditionalCostsForDiscardedGoods, SUM(CASE WHEN o.OperationType=5 AND o.OperationDate&gt;=?DF THEN o.AccountSalesNetCosts ELSE 0 END) AS TotalDiscountsForDiscardedGoods, SUM(CASE WHEN o.OperationDate&lt;?DF THEN o.AccountPurchases ELSE 0 END) AS AccountPurchasesPeriodStart, SUM(CASE WHEN o.OperationDate&gt;=?DF AND o.AccountPurchases&gt;0 THEN o.AccountPurchases ELSE 0 END) AS AccountPurchasesDebit, SUM(CASE WHEN o.OperationDate&gt;=?DF AND o.AccountPurchases&lt;0 THEN o.AccountPurchases ELSE 0 END) AS AccountPurchasesCredit, SUM(CASE WHEN o.OperationDate&lt;?DF THEN o.AccountGeneral ELSE 0 END) AS AccountWarehousePeriodStart, SUM(CASE WHEN o.OperationDate&gt;=?DF AND o.AccountGeneral&gt;0 THEN o.AccountGeneral ELSE 0 END) AS AccountWarehouseDebit, SUM(CASE WHEN o.OperationDate&gt;=?DF AND o.AccountGeneral&lt;0 THEN o.AccountGeneral ELSE 0 END) AS AccountWarehouseCredit, SUM(CASE WHEN o.OperationDate&lt;?DF THEN o.AccountSalesNetCosts ELSE 0 END) AS AccountSalesNetCostsPeriodStart, SUM(CASE WHEN o.OperationDate&gt;=?DF AND o.AccountSalesNetCosts&gt;0 THEN o.AccountSalesNetCosts ELSE 0 END) AS AccountSalesNetCostsDebit, SUM(CASE WHEN o.OperationDate&gt;=?DF AND o.AccountSalesNetCosts&lt;0 THEN o.AccountSalesNetCosts ELSE 0 END) AS AccountSalesNetCostsCredit, SUM(CASE WHEN o.OperationDate&lt;?DF THEN o.AccountDiscounts ELSE 0 END) AS AccountDiscountsPeriodStart, SUM(CASE WHEN o.OperationDate&gt;=?DF AND o.AccountDiscounts&gt;0 THEN o.AccountDiscounts ELSE 0 END) AS AccountDiscountsDebit, SUM(CASE WHEN o.OperationDate&gt;=?DF AND o.AccountDiscounts&lt;0 THEN o.AccountDiscounts ELSE 0 END) AS AccountDiscountsCredit, SUM(CASE WHEN o.OperationDate&lt;?DF THEN o.AccountPriceCut ELSE 0 END) AS AccountValueReductionPeriodStart, SUM(CASE WHEN o.OperationDate&gt;=?DF AND o.AccountPriceCut&gt;0 THEN o.AccountPriceCut ELSE 0 END) AS AccountValueReductionDebit, SUM(CASE WHEN o.OperationDate&gt;=?DF AND o.AccountPriceCut&lt;0 THEN o.AccountPriceCut ELSE 0 END) AS AccountValueReductionCredit FROM goods g LEFT JOIN prekes_gr r ON r.ID=g.GroupID LEFT JOIN warehouses w ON w.ID=g.DefaultWarehouseID LEFT JOIN goodsoperations o ON o.GoodsID=g.ID AND o.OperationDate&lt;=?DT AND (?WD&lt;1 OR o.WarehouseID=?WD) LEFT JOIN goodscomplexoperations c ON c.ID=o.ComplexOperationID LEFT JOIN (SELECT go.ID, IFNULL(MAX(CASE WHEN ro.AccountType=9 THEN ro.AccountValue ELSE null END), go.AccountSalesNetCosts) AS AccountSalesNetCosts, IFNULL(MAX(CASE WHEN ro.AccountType=10 THEN ro.AccountValue ELSE null END), go.AccountPurchases) AS AccountPurchases, IFNULL(MAX(CASE WHEN ro.AccountType=11 THEN ro.AccountValue ELSE null END), go.AccountDiscounts) AS AccountDiscounts, IFNULL(MAX(CASE WHEN ro.AccountType=12 THEN ro.AccountValue ELSE null END), go.AccountValueReduction) AS AccountValueReduction FROM goods go LEFT JOIN (SELECT po.GoodsID, po.AccountType, po.AccountValue FROM (SELECT ac.GoodsID, ac.AccountType, MAX(ac.ChangeDate) AS MaxDate FROM goodsaccounts ac WHERE ac.ChangeDate&lt;?DT GROUP BY ac.GoodsID, ac.AccountType) AS vo LEFT JOIN goodsaccounts po ON po.GoodsID=vo.GoodsID AND po.AccountType=vo.AccountType AND po.ChangeDate=vo.MaxDate WHERE NOT po.GoodsID IS NULL) AS ro ON ro.GoodsID=go.ID GROUP BY go.ID) AS l ON l.ID=g.ID WHERE (?GD&lt;1 OR g.GroupID=?GD) AND (?WD&gt;0 OR c.OperationType IS NULL OR c.OperationType&lt;&gt;1) AND (UPPER(g.Name) LIKE UPPER(?TX) OR UPPER(g.GoodsCode) LIKE UPPER(?TX)) GROUP BY g.ID;</Statement>
    <Objects>ActiveReports.GoodsTurnoverInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchGoodsOperationInfoList</Key>
    <Statement>SELECT g.ID, g.WarehouseID, w.Name, w.WarehouseAccount, g.OperationDate AS OperationDate, g.OperationType, c.OperationType, g.DocNo, g.Content, g.Amount, g.AmountInWarehouse, g.UnitValue, g.TotalValue, g.AccountGeneral, g.AccountSalesNetCosts, g.AccountPurchases, g.AccountDiscounts, g.AccountPriceCut, g.AccountOperationValue, g.AccountOperation, g.ComplexOperationID, g.InsertDate, g.UpdateDate, g.JournalEntryID, b.Op_Dok, b.Op_data, b.Op_turinys, b.Op_dok_rusis, b.Op_korespond FROM goodsoperations g LEFT JOIN warehouses w ON w.ID=g.WarehouseID LEFT JOIN goodscomplexoperations c ON c.ID=g.ComplexOperationID LEFT JOIN bz b ON b.Op_ID=g.JournalEntryID WHERE g.OperationDate&gt;=?DF AND g.OperationDate&lt;=?DT AND g.GoodsID=?GD AND (?WD&lt;1 OR g.WarehouseID=?WD) UNION SELECT v.ID, 0, '', 0, v.ChangeDate AS OperationDate, 13, 1, '', v.Content, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v.InsertDate, v.UpdateDate, 0, '', v.ChangeDate, '', '', '' FROM goodsvaluationmethods v WHERE v.ChangeDate&gt;=?DF AND v.ChangeDate&lt;=?DT AND v.GoodsID=?GD AND ?WD&lt;1 UNION SELECT l.ID, 0, '', 0, l.ChangeDate AS OperationDate, l.AccountType, 1, l.DocumentNumber, l.Content, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, l.AccountValue, 0, l.InsertDate, l.UpdateDate, l.JournalEntryID, b.Op_Dok, b.Op_data, b.Op_turinys, b.Op_dok_rusis, b.Op_korespond FROM goodsaccounts l LEFT JOIN bz b ON b.Op_ID=l.JournalEntryID WHERE l.ChangeDate&gt;=?DF AND l.ChangeDate&lt;=?DT AND l.GoodsID=?GD AND ?WD&lt;1 ORDER BY OperationDate;</Statement>
    <Objects>ActiveReports.GoodsOperationInfoListParent</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchGoodsOperationInfoListParent</Key>
    <Statement>SELECT g.ID, g.Name, g.MeasureUnit, l.AccountPurchases, l.AccountSalesNetCosts, l.AccountDiscounts, l.AccountValueReduction, r.Name, g.PricePurchase, g.DefaultVatRatePurchase, g.PriceSale, g.DefaultVatRateSales, g.DefaultAccountingMethod, IFNULL((SELECT v.MethodCode FROM goodsvaluationmethods v WHERE v.GoodsID=g.ID AND v.ChangeDate&lt;=?DT ORDER BY v.ChangeDate DESC LIMIT 1), g.DefaultValuationMethod) AS CurrentValuationMethod, g.TradeItemType, g.GoodsCode, g.GoodsBarCode, w.Name, w.WarehouseAccount, g.IsObsolete, SUM(CASE WHEN o.OperationDate&lt;?DF THEN o.Amount ELSE 0 END) AS AmountPeriodStart, SUM(CASE WHEN o.OperationDate&lt;?DF THEN o.AmountInWarehouse ELSE 0 END) AS AmountInWarehousePeriodStart, SUM(CASE WHEN o.OperationType=1 AND o.OperationDate&gt;=?DF THEN o.Amount ELSE 0 END) AS AmountAcquisitions, SUM(CASE WHEN o.OperationType=2 AND o.OperationDate&gt;=?DF THEN o.Amount ELSE 0 END) AS AmountTransfered, SUM(CASE WHEN o.OperationType=3 AND o.OperationDate&gt;=?DF THEN o.Amount ELSE 0 END) AS AmountDiscarded, SUM(CASE WHEN o.OperationType=1 AND o.OperationDate&gt;=?DF THEN o.AmountInWarehouse ELSE 0 END) AS AmountAcquisitionsInWarehouse, SUM(CASE WHEN o.OperationType=2 AND o.OperationDate&gt;=?DF THEN o.AmountInWarehouse ELSE 0 END) AS AmountTransferedInWarehouse, SUM(CASE WHEN o.OperationType=3 AND o.OperationDate&gt;=?DF THEN o.AmountInWarehouse ELSE 0 END) AS AmountDiscardedInWarehouse, SUM(CASE WHEN o.OperationType=4 AND o.OperationDate&gt;=?DF THEN o.Amount ELSE 0 END) AS AmountChangeInventorization, SUM(o.AmountInWarehouse) AS AmountInWarehousePeriodEnd, SUM(CASE WHEN o.OperationDate&lt;?DF THEN o.AmountInPurchases ELSE 0 END) AS AmountPurchasesPeriodStart, SUM(o.AmountInPurchases) AS AmountPurchasesPeriodEnd, SUM(CASE WHEN o.OperationType=6 AND o.OperationDate&gt;=?DF THEN o.TotalValue ELSE 0 END) AS TotalAdditionalCosts, SUM(CASE WHEN o.OperationType=5 AND o.OperationDate&gt;=?DF THEN o.TotalValue ELSE 0 END) AS TotalDiscounts, SUM(CASE WHEN o.OperationType=6 AND o.OperationDate&gt;=?DF THEN o.AccountSalesNetCosts ELSE 0 END) AS TotalAdditionalCostsForDiscardedGoods, SUM(CASE WHEN o.OperationType=5 AND o.OperationDate&gt;=?DF THEN o.AccountSalesNetCosts ELSE 0 END) AS TotalDiscountsForDiscardedGoods, SUM(CASE WHEN o.OperationDate&lt;?DF THEN o.AccountPurchases ELSE 0 END) AS AccountPurchasesPeriodStart, SUM(CASE WHEN o.OperationDate&gt;=?DF AND o.AccountPurchases&gt;0 THEN o.AccountPurchases ELSE 0 END) AS AccountPurchasesDebit, SUM(CASE WHEN o.OperationDate&gt;=?DF AND o.AccountPurchases&lt;0 THEN o.AccountPurchases ELSE 0 END) AS AccountPurchasesCredit, SUM(CASE WHEN o.OperationDate&lt;?DF THEN o.AccountGeneral ELSE 0 END) AS AccountWarehousePeriodStart, SUM(CASE WHEN o.OperationDate&gt;=?DF AND o.AccountGeneral&gt;0 THEN o.AccountGeneral ELSE 0 END) AS AccountWarehouseDebit, SUM(CASE WHEN o.OperationDate&gt;=?DF AND o.AccountGeneral&lt;0 THEN o.AccountGeneral ELSE 0 END) AS AccountWarehouseCredit, SUM(CASE WHEN o.OperationDate&lt;?DF THEN o.AccountSalesNetCosts ELSE 0 END) AS AccountSalesNetCostsPeriodStart, SUM(CASE WHEN o.OperationDate&gt;=?DF AND o.AccountSalesNetCosts&gt;0 THEN o.AccountSalesNetCosts ELSE 0 END) AS AccountSalesNetCostsDebit, SUM(CASE WHEN o.OperationDate&gt;=?DF AND o.AccountSalesNetCosts&lt;0 THEN o.AccountSalesNetCosts ELSE 0 END) AS AccountSalesNetCostsCredit, SUM(CASE WHEN o.OperationDate&lt;?DF THEN o.AccountDiscounts ELSE 0 END) AS AccountDiscountsPeriodStart, SUM(CASE WHEN o.OperationDate&gt;=?DF AND o.AccountDiscounts&gt;0 THEN o.AccountDiscounts ELSE 0 END) AS AccountDiscountsDebit, SUM(CASE WHEN o.OperationDate&gt;=?DF AND o.AccountDiscounts&lt;0 THEN o.AccountDiscounts ELSE 0 END) AS AccountDiscountsCredit, SUM(CASE WHEN o.OperationDate&lt;?DF THEN o.AccountPriceCut ELSE 0 END) AS AccountValueReductionPeriodStart, SUM(CASE WHEN o.OperationDate&gt;=?DF AND o.AccountPriceCut&gt;0 THEN o.AccountPriceCut ELSE 0 END) AS AccountValueReductionDebit, SUM(CASE WHEN o.OperationDate&gt;=?DF AND o.AccountPriceCut&lt;0 THEN o.AccountPriceCut ELSE 0 END) AS AccountValueReductionCredit FROM goods g LEFT JOIN prekes_gr r ON r.ID=g.GroupID LEFT JOIN warehouses w ON w.ID=g.DefaultWarehouseID LEFT JOIN goodsoperations o ON o.GoodsID=g.ID AND o.OperationDate&lt;=?DT AND (?WD&lt;1 OR o.WarehouseID=?WD) LEFT JOIN goodscomplexoperations c ON c.ID=o.ComplexOperationID LEFT JOIN (SELECT go.ID, IFNULL(MAX(CASE WHEN ro.AccountType=9 THEN ro.AccountValue ELSE null END), go.AccountSalesNetCosts) AS AccountSalesNetCosts, IFNULL(MAX(CASE WHEN ro.AccountType=10 THEN ro.AccountValue ELSE null END), go.AccountPurchases) AS AccountPurchases, IFNULL(MAX(CASE WHEN ro.AccountType=11 THEN ro.AccountValue ELSE null END), go.AccountDiscounts) AS AccountDiscounts, IFNULL(MAX(CASE WHEN ro.AccountType=12 THEN ro.AccountValue ELSE null END), go.AccountValueReduction) AS AccountValueReduction FROM goods go LEFT JOIN (SELECT po.GoodsID, po.AccountType, po.AccountValue FROM (SELECT ac.GoodsID, ac.AccountType, MAX(ac.ChangeDate) AS MaxDate FROM goodsaccounts ac WHERE ac.ChangeDate&lt;?DT GROUP BY ac.GoodsID, ac.AccountType) AS vo LEFT JOIN goodsaccounts po ON po.GoodsID=vo.GoodsID AND po.AccountType=vo.AccountType AND po.ChangeDate=vo.MaxDate WHERE NOT po.GoodsID IS NULL) AS ro ON ro.GoodsID=go.ID GROUP BY go.ID) AS l ON l.ID=g.ID WHERE g.ID=?GD AND (?WD&gt;0 OR c.OperationType IS NULL OR c.OperationType&lt;&gt;1) GROUP BY g.ID;</Statement>
    <Objects>ActiveReports.GoodsOperationInfoListParent</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchGoodsItem</Key>
    <Statement>SELECT g.ID, g.Name, g.MeasureUnit, g.AccountSalesNetCosts, g.AccountPurchases, g.AccountDiscounts, g.AccountValueReduction, g.DefaultVatRateSales, g.DefaultVatRatePurchase, g.DefaultAccountingMethod, g.DefaultValuationMethod, g.TradeItemType, g.GoodsCode, g.GoodsBarcode, g.IsObsolete, g.InsertDate, g.UpdateDate, (SELECT COUNT(d.ID) FROM goodsoperations d WHERE d.GoodsID=g.ID) AS IsInUse, (SELECT COUNT(d.ID) FROM goodsoperations d WHERE d.GoodsID=g.ID AND d.OperationType=7) AS PriceCutsExist, p.ID, p.Name, w.ID, w.Name, w.IsProduction, w.IsObsolete, w.WarehouseAccount FROM goods g LEFT JOIN prekes_gr p ON p.ID=g.GroupID LEFT JOIN warehouses w ON w.ID=g.DefaultWarehouseID WHERE g.ID=?GD ;</Statement>
    <Objects>Goods.GoodsItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertGoodsItem</Key>
    <Statement>INSERT INTO goods(Name, MeasureUnit, AccountSalesNetCosts, AccountPurchases, AccountDiscounts, AccountValueReduction, DefaultVatRateSales, DefaultVatRatePurchase, DefaultAccountingMethod, DefaultValuationMethod, TradeItemType, GoodsCode, GoodsBarcode, IsObsolete, GroupID, DefaultWarehouseID, PriceSale, PricePurchase, InsertDate, UpdateDate) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF, ?AG, ?AH, ?AI, ?AJ, ?AK, ?AL, ?AM, ?AN, ?AO, ?AQ, ?AP, ?AR, ?AT, ?AT);</Statement>
    <Objects>Goods.GoodsItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateGoodsItemFull</Key>
    <Statement>UPDATE goods SET Name=?AA, MeasureUnit=?AB, AccountSalesNetCosts=?AC, AccountPurchases=?AD, AccountDiscounts=?AE, AccountValueReduction=?AF, DefaultVatRateSales=?AG, DefaultVatRatePurchase=?AH, DefaultAccountingMethod=?AI, DefaultValuationMethod=?AJ, TradeItemType=?AK, GoodsCode=?AL, GoodsBarcode=?AM, IsObsolete=?AN, GroupID=?AO, DefaultWarehouseID=?AQ, PriceSale=?AP, PricePurchase=?AR, UpdateDate=?AT WHERE ID=?CD ;</Statement>
    <Objects>Goods.GoodsItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteGoodsItem</Key>
    <Statement>DELETE FROM goods WHERE goods.ID=?CD ;</Statement>
    <Objects>Goods.GoodsItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateGoodsItemLimited1</Key>
    <Statement>UPDATE goods SET Name=?AA, MeasureUnit=?AB, AccountSalesNetCosts=?AC, AccountPurchases=?AD, AccountDiscounts=?AE, AccountValueReduction=?AF, DefaultVatRateSales=?AG, DefaultVatRatePurchase=?AH, TradeItemType=?AK, GoodsCode=?AL, GoodsBarcode=?AM, IsObsolete=?AN, GroupID=?AO, DefaultWarehouseID=?AQ, PriceSale=?AP, PricePurchase=?AR, UpdateDate=?AT WHERE ID=?CD ;</Statement>
    <Objects>Goods.GoodsItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateGoodsItemLimited2</Key>
    <Statement>UPDATE goods SET Name=?AA, MeasureUnit=?AB, AccountValueReduction=?AF, DefaultVatRateSales=?AG, DefaultVatRatePurchase=?AH, TradeItemType=?AK, GoodsCode=?AL, GoodsBarcode=?AM, IsObsolete=?AN, GroupID=?AO, DefaultWarehouseID=?AQ, PriceSale=?AP, PricePurchase=?AR, UpdateDate=?AT WHERE ID=?CD ;</Statement>
    <Objects>Goods.GoodsItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateGoodsItemLimited3</Key>
    <Statement>UPDATE goods SET Name=?AA, MeasureUnit=?AB, DefaultVatRateSales=?AG, DefaultVatRatePurchase=?AH, TradeItemType=?AK, GoodsCode=?AL, GoodsBarcode=?AM, IsObsolete=?AN, GroupID=?AO, DefaultWarehouseID=?AQ, PriceSale=?AP, PricePurchase=?AR, UpdateDate=?AT WHERE ID=?CD ;</Statement>
    <Objects>Goods.GoodsItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateGoodsItemLimited4</Key>
    <Statement>UPDATE goods SET Name=?AA, MeasureUnit=?AB, AccountSalesNetCosts=?AC, AccountPurchases=?AD, AccountDiscounts=?AE, DefaultVatRateSales=?AG, DefaultVatRatePurchase=?AH, TradeItemType=?AK, GoodsCode=?AL, GoodsBarcode=?AM, IsObsolete=?AN, GroupID=?AO, DefaultWarehouseID=?AQ, PriceSale=?AP, PricePurchase=?AR, UpdateDate=?AT WHERE ID=?CD ;</Statement>
    <Objects>Goods.GoodsItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfGoodsItemUpdateDateChanged</Key>
    <Statement>SELECT g.UpdateDate, (SELECT COUNT(d.ID) FROM goodsoperations d WHERE d.GoodsID=g.ID) AS IsInUse, (SELECT COUNT(d.ID) FROM goodsoperations d WHERE d.GoodsID=g.ID AND d.OperationType=7) AS PriceCutsExist FROM goods g WHERE g.ID=?CD ;</Statement>
    <Objects>Goods.GoodsItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfAnyGoodsOperationsExist</Key>
    <Statement>SELECT COUNT(d.ID) FROM goodsoperations d WHERE d.GoodsID=?CD ;</Statement>
    <Objects>Goods.GoodsItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CreateGoodsOperationAccountChangePurchases</Key>
    <Statement>SELECT SUM(o.AccountPurchases) FROM goodsoperations o WHERE o.GoodsID=?GD ;</Statement>
    <Objects>Goods.GoodsOperationAccountChange</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CreateGoodsOperationAccountChangeSalesNetCosts</Key>
    <Statement>SELECT SUM(o.AccountSalesNetCosts) FROM goodsoperations o WHERE o.GoodsID=?GD ;</Statement>
    <Objects>Goods.GoodsOperationAccountChange</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CreateGoodsOperationAccountChangeDiscounts</Key>
    <Statement>SELECT SUM(o.AccountDiscounts) FROM goodsoperations o WHERE o.GoodsID=?GD ;</Statement>
    <Objects>Goods.GoodsOperationAccountChange</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CreateGoodsOperationAccountChangePriceCut</Key>
    <Statement>SELECT SUM(o.AccountPriceCut) FROM goodsoperations o WHERE o.GoodsID=?GD ;</Statement>
    <Objects>Goods.GoodsOperationAccountChange</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchGoodsOperationAccountChange</Key>
    <Statement>SELECT a.ID, a.AccountType, a.ChangeDate, a.AccountValue, a.GoodsID, a.DocumentNumber, a.Content, b.Op_ID, (CASE WHEN d.Op_tipas='Debetas' THEN d.Op_suma ELSE -d.Op_suma END) AS CorrespondationValue, a.InsertDate, a.UpdateDate, g.ID, g.Name, g.MeasureUnit, IFNULL((SELECT v.AccountValue FROM goodsaccounts v WHERE v.GoodsID=g.ID AND v.ChangeDate &lt; a.ChangeDate AND v.AccountType=9 ORDER BY v.ChangeDate DESC LIMIT 1), g.AccountSalesNetCosts) AS AccountSalesNetCosts, IFNULL((SELECT v.AccountValue FROM goodsaccounts v WHERE v.GoodsID=g.ID AND v.ChangeDate &lt; a.ChangeDate AND v.AccountType=10 ORDER BY v.ChangeDate DESC LIMIT 1), g.AccountPurchases) AS AccountPurchases, IFNULL((SELECT v.AccountValue FROM goodsaccounts v WHERE v.GoodsID=g.ID AND v.ChangeDate &lt; a.ChangeDate AND v.AccountType=11 ORDER BY v.ChangeDate DESC LIMIT 1), g.AccountDiscounts) AS AccountDiscounts, IFNULL((SELECT v.AccountValue FROM goodsaccounts v WHERE v.GoodsID=g.ID AND v.ChangeDate &lt; a.ChangeDate AND v.AccountType=12 ORDER BY v.ChangeDate DESC LIMIT 1), g.AccountValueReduction) AS AccountValueReduction, g.PriceSale, g.PricePurchase, g.DefaultVatRateSales, g.DefaultVatRatePurchase, IFNULL(f.Name,''), g.DefaultAccountingMethod, IFNULL((SELECT v.MethodCode FROM goodsvaluationmethods v WHERE v.GoodsID=g.ID ORDER BY v.ChangeDate DESC LIMIT 1), g.DefaultValuationMethod), w.ID, w.Name, w.IsProduction, w.IsObsolete, w.WarehouseAccount FROM goodsaccounts a LEFT JOIN goods g ON g.ID=a.GoodsID LEFT JOIN bz b ON b.Op_ID=a.JournalEntryID LEFT JOIN bzdata d ON d.Op_ID_BZ=b.Op_ID AND d.Op_saskaita=a.AccountValue LEFT JOIN prekes_gr f ON f.ID=g.GroupID LEFT JOIN warehouses w ON w.ID=g.DefaultWarehouseID WHERE a.ID=?OD GROUP BY a.ID;</Statement>
    <Objects>Goods.GoodsOperationAccountChange</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertGoodsOperationAccountChange</Key>
    <Statement>INSERT INTO goodsaccounts(AccountType, GoodsID, AccountValue, ChangeDate, JournalEntryID, DocumentNumber, Content, InsertDate, UpdateDate) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF, ?AG, ?AH, ?AH);</Statement>
    <Objects>Goods.GoodsOperationAccountChange</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateGoodsOperationAccountChangeFull</Key>
    <Statement>UPDATE goodsaccounts SET AccountValue=?AC, ChangeDate=?AD, JournalEntryID=?AE, DocumentNumber=?AF, Content=?AG, UpdateDate=?AH WHERE ID=?CD ;</Statement>
    <Objects>Goods.GoodsOperationAccountChange</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateGoodsOperationAccountChangeLimited</Key>
    <Statement>UPDATE goodsaccounts SET ChangeDate=?AD, DocumentNumber=?AF, Content=?AG, UpdateDate=?AH WHERE ID=?CD ;</Statement>
    <Objects>Goods.GoodsOperationAccountChange</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteGoodsOperationAccountChange</Key>
    <Statement>DELETE FROM goodsaccounts WHERE goodsaccounts.ID=?CD ;</Statement>
    <Objects>Goods.GoodsOperationAccountChange</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfAccountChangeUpdateDateChanged</Key>
    <Statement>SELECT a.UpdateDate FROM goodsaccounts a WHERE a.ID=?CD ;</Statement>
    <Objects>Goods.GoodsOperationAccountChange</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchGoodsOperationIdInfo</Key>
    <Statement>SELECT 1, ID, OperationType FROM goodscomplexoperations WHERE JournalEntryID=?JD UNION SELECT 0, ID, AccountType FROM goodsaccounts WHERE JournalEntryID=?JD UNION SELECT 0, ID, OperationType FROM goodsoperations WHERE JournalEntryID=?JD;</Statement>
    <Objects>Goods.GoodsOperationIdInfo</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments37</Key>
    <Statement>UPDATE goods SET AccountSalesNetCosts=?AA WHERE AccountSalesNetCosts=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments38</Key>
    <Statement>UPDATE goods SET AccountPurchases=?AA WHERE AccountPurchases=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments39</Key>
    <Statement>UPDATE goods SET AccountDiscounts=?AA WHERE AccountDiscounts=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments40</Key>
    <Statement>UPDATE goods SET AccountValueReduction=?AA WHERE AccountValueReduction=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments41</Key>
    <Statement>UPDATE goodscomplexoperations SET AccountOperation=?AA WHERE AccountOperation=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments42</Key>
    <Statement>UPDATE goodsoperations SET AccountOperation=?AA WHERE AccountOperation=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchGoodsCostItemAverage</Key>
    <Statement>SELECT SUM(Amount), SUM(TotalValue) FROM goodsoperations WHERE GoodsID=?GD AND WarehouseID=?WD AND OperationDate&lt;=?DT AND ID&lt;&gt;?OD AND ID&lt;&gt;?CD ;</Statement>
    <Objects>Goods.GoodsCostItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchSimpleChronologicValidator</Key>
    <Statement>SELECT b.Op_ID, b.Op_data, b.Op_Dok, b.Op_dok_rusis, (SELECT MAX(lc.Op_data) FROM bz lc WHERE lc.Op_dok_rusis='uz' AND lc.Op_data&lt;b.Op_data) AS LastClosing, (SELECT MIN(lc.Op_data) FROM bz lc WHERE lc.Op_dok_rusis='uz' AND lc.Op_data&gt;=b.Op_data) AS NextClosing, (SELECT MAX(lc.Op_data) FROM bz lc WHERE lc.Op_dok_rusis='lik') AS TransferDate FROM bz b WHERE b.Op_ID=?JD ;</Statement>
    <Objects>General.SimpleChronologicValidator</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchSimpleChronologicValidatorByDate</Key>
    <Statement>SELECT 0, null, '', '', (SELECT MAX(lc.Op_data) FROM bz lc WHERE lc.Op_dok_rusis='uz' AND lc.Op_data&lt;?DT) AS LastClosing, (SELECT MIN(lc.Op_data) FROM bz lc WHERE lc.Op_dok_rusis='uz' AND lc.Op_data&gt;=?DT) AS NextClosing, (SELECT MAX(lc.Op_data) FROM bz lc WHERE lc.Op_dok_rusis='lik') AS TransferDate;</Statement>
    <Objects>General.SimpleChronologicValidator</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CreateOperationChronologicValidator</Key>
    <Statement>SELECT T_ID, OperationType, AccountOperationType, 0, MAX(OperationDate) FROM turtas_op GROUP BY T_ID, OperationType, AccountOperationType UNION SELECT 0, CASE WHEN Op_dok_rusis='uz' THEN '998' ELSE '999' END, '', 1, MAX(Op_data) FROM bz WHERE (Op_dok_rusis='uz' OR Op_dok_rusis='lik');</Statement>
    <Objects>Assets.OperationChronologicValidator</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchOperationChronologicValidator</Key>
    <Statement>SELECT T_ID, OperationType, AccountOperationType, 0, MAX(OperationDate) FROM turtas_op WHERE ID&lt;&gt;?OD GROUP BY T_ID, OperationType, AccountOperationType UNION SELECT T_ID, OperationType, AccountOperationType, 1, MAX(OperationDate) FROM turtas_op WHERE ID&lt;&gt;?OD AND OperationDate&lt;=?DT GROUP BY T_ID, OperationType, AccountOperationType UNION SELECT T_ID, OperationType, AccountOperationType, 2, MIN(OperationDate) FROM turtas_op WHERE ID&lt;&gt;?OD AND OperationDate&gt;=?DT GROUP BY T_ID, OperationType, AccountOperationType UNION SELECT 0, CASE WHEN Op_dok_rusis='uz' THEN '998' ELSE '999' END, '', 1, MAX(Op_data) FROM bz WHERE (Op_dok_rusis='uz' OR Op_dok_rusis='lik') AND Op_data&lt;?DT UNION SELECT 0, CASE WHEN Op_dok_rusis='uz' THEN '998' ELSE '999' END, '', 2, MIN(Op_data) FROM bz WHERE (Op_dok_rusis='uz' OR Op_dok_rusis='lik') AND Op_data&gt;=?DT ;</Statement>
    <Objects>Assets.OperationChronologicValidator</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchOperationChronologicValidatorByComplexID</Key>
    <Statement>SELECT T_ID, OperationType, AccountOperationType, 0, MAX(OperationDate) FROM turtas_op WHERE IsComplexAct&lt;&gt;?OD GROUP BY T_ID, OperationType, AccountOperationType UNION SELECT T_ID, OperationType, AccountOperationType, 1, MAX(OperationDate) FROM turtas_op WHERE IsComplexAct&lt;&gt;?OD AND OperationDate&lt;=?DT GROUP BY T_ID, OperationType, AccountOperationType UNION SELECT T_ID, OperationType, AccountOperationType, 2, MIN(OperationDate) FROM turtas_op WHERE IsComplexAct&lt;&gt;?OD AND OperationDate&gt;=?DT GROUP BY T_ID, OperationType, AccountOperationType UNION SELECT 0, CASE WHEN Op_dok_rusis='uz' THEN '998' ELSE '999' END, '', 1, MAX(Op_data) FROM bz WHERE (Op_dok_rusis='uz' OR Op_dok_rusis='lik') AND Op_data&lt;?DT UNION SELECT 0, CASE WHEN Op_dok_rusis='uz' THEN '998' ELSE '999' END, '', 2, MIN(Op_data) FROM bz WHERE (Op_dok_rusis='uz' OR Op_dok_rusis='lik') AND Op_data&gt;=?DT ;</Statement>
    <Objects>Assets.OperationChronologicValidator</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateInvoiceMadeItemGeneral</Key>
    <Statement>UPDATE sfd SET Preke=?AE, NameAltLng=?AF, Vnt=?AT, MeasureUnitAltLng=?AU WHERE ID=?MD ;</Statement>
    <Objects>Documents.InvoiceMadeItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateInvoiceReceivedItemGeneral</Key>
    <Statement>UPDATE sfg SET Preke=?AD, Vnt=?AE WHERE ID=?MD ;</Statement>
    <Objects>Documents.InvoiceReceivedItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateInvoiceReceivedGeneral</Key>
    <Statement>UPDATE invoicesreceived SET CommentsInternal=?AD, InvoiceType=?AF, ExternalID=?AG, UpdateDate=?AH, ActualDate=?AL WHERE ID=?AA ;</Statement>
    <Objects>Documents.InvoiceReceived</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateInvoiceMadeGeneral</Key>
    <Statement>UPDATE invoicesmade SET InvoiceSerial=?AB, InvoiceNumber=?AC, LanguageCode=?AF, VatExemptions=?AG, VatExemptionsAltLng=?AH, CustomInfo=?AI, CustomInfoAltLng=?AJ, CommentsInternal=?AK, AddDateToNumberOptionWasUsed=?AL, NumbersInInvoice=?AM, InvoiceType=?AO, ExternalID=?AQ, UpdateDate=?AP, DocumentState=?AR WHERE ID=?AA ;</Statement>
    <Objects>Documents.InvoiceMade</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateBookEntryGeneral</Key>
    <Statement>UPDATE bzdata SET Op_ana=?AE WHERE Nr=?BD ;</Statement>
    <Objects>General.BookEntry</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfCashAccountUsed</Key>
    <Statement>SELECT IFNULL(COUNT(b.ID), 0) + IFNULL(COUNT(i.BZ_ID), 0) + IFNULL(COUNT(p.BZ_ID), 0) FROM cashaccounts C LEFT JOIN BankOperations b ON b.CashAccountID=C.ID LEFT JOIN kio i ON i.CashAccountID=C.ID LEFT JOIN kpo p ON p.CashAccountID=C.ID WHERE C.ID=?CD GROUP BY C.ID;</Statement>
    <Objects>Documents.CashAccount</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchAccumulativeCostsItemList</Key>
    <Statement>SELECT A.ID, A.ItemDate, A.ItemSum FROM AccumulativeCostsItems A WHERE A.ParentID=?PD ;</Statement>
    <Objects>Documents.AccumulativeCostsItemList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertAccumulativeCostsItem</Key>
    <Statement>INSERT INTO AccumulativeCostsItems(ID, ParentID, ItemDate, ItemSum) VALUES(?BD, ?PD, ?AA, ?AB);</Statement>
    <Objects>Documents.AccumulativeCostsItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccumulativeCostsItem</Key>
    <Statement>UPDATE AccumulativeCostsItems SET ItemDate=?AA, ItemSum=?AB WHERE ID=?CD ;</Statement>
    <Objects>Documents.AccumulativeCostsItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteAccumulativeCostsItem</Key>
    <Statement>DELETE FROM AccumulativeCostsItems WHERE AccumulativeCostsItems.ID=?CD ;</Statement>
    <Objects>Documents.AccumulativeCostsItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteAccumulativeCostsItemList</Key>
    <Statement>DELETE FROM AccumulativeCostsItems WHERE AccumulativeCostsItems.ParentID=?PD ;</Statement>
    <Objects>Documents.AccumulativeCostsItemList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchAccumulativeCosts</Key>
    <Statement>SELECT A.ID, b.Op_Data, b.Op_Dok, b.Op_turinys, A.Comments, A.OperationSum, A.AccountCosts, A.AccountAccumulatedCosts, A.AccountDistributedCosts, b.InsertDate, b.UpdateDate FROM AccumulativeCosts A LEFT JOIN bz b ON b.Op_ID=A.ID WHERE A.ID=?PD OR A.ID=(SELECT d.ParentID FROM AccumulativeCostsItems d WHERE d.ID=?PD);</Statement>
    <Objects>Documents.AccumulativeCosts</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertAccumulativeCosts</Key>
    <Statement>INSERT INTO AccumulativeCosts(ID, Comments, OperationSum, AccountCosts, AccountAccumulatedCosts, AccountDistributedCosts) VALUES(?BD, ?AA, ?AB, ?AC, ?AD, ?AE);</Statement>
    <Objects>Documents.AccumulativeCosts</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccumulativeCosts1</Key>
    <Statement>UPDATE AccumulativeCosts SET Comments=?AA, OperationSum=?AB, AccountCosts=?AC, AccountAccumulatedCosts=?AD, AccountDistributedCosts=?AE WHERE ID=?CD ;</Statement>
    <Objects>Documents.AccumulativeCosts</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteAccumulativeCosts</Key>
    <Statement>DELETE FROM AccumulativeCosts WHERE AccumulativeCosts.ID=?CD ;</Statement>
    <Objects>Documents.AccumulativeCosts</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchAllClosings</Key>
    <Statement>SELECT b.Op_dok_rusis, b.Op_data FROM bz b WHERE TRIM(UPPER(b.Op_dok_rusis))='UZ' OR TRIM(UPPER(b.Op_dok_rusis))='LIK' ORDER BY b.Op_data;</Statement>
    <Objects>General.SimpleChronologicValidator</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchAccumulativeCostsChronologicValidator</Key>
    <Statement>SELECT d.Op_data, (SELECT MAX(lc.Op_data) FROM bz lc WHERE lc.Op_dok_rusis='uz' AND lc.Op_data&lt;d.Op_data) AS LastClosing, (SELECT MIN(lc.Op_data) FROM bz lc WHERE lc.Op_dok_rusis='uz' AND lc.Op_data&gt;=d.Op_data) AS NextClosing, (SELECT MAX(lc.Op_data) FROM bz lc WHERE lc.Op_dok_rusis='lik') AS TransferDate, (SELECT MIN(lc.Op_data) FROM bz lc WHERE lc.Op_dok_rusis='uz' AND lc.Op_data&gt;=IFNULL((SELECT MIN(ac.ItemDate) FROM AccumulativeCostsItems ac WHERE ac.ParentID=d.Op_ID), '2200-01-01')) AS NextChildClosing FROM bz d WHERE d.Op_ID=?PD AND d.Op_dok_rusis='ac';</Statement>
    <Objects>Documents.AccumulativeCostsChronologicValidator</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccumulativeCosts2</Key>
    <Statement>UPDATE AccumulativeCosts SET Comments=?AA, AccountDistributedCosts=?AE WHERE ID=?CD ;</Statement>
    <Objects>Documents.AccumulativeCosts</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccumulativeCosts3</Key>
    <Statement>UPDATE AccumulativeCosts SET Comments=?AA, OperationSum=?AB, AccountCosts=?AC WHERE ID=?CD ;</Statement>
    <Objects>Documents.AccumulativeCosts</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccumulativeCosts4</Key>
    <Statement>UPDATE AccumulativeCosts SET Comments=?AA WHERE ID=?CD ;</Statement>
    <Objects>Documents.AccumulativeCosts</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchContractChronologicValidator</Key>
    <Statement>SELECT w.Nuo, w.Tipas, (SELECT MIN(a.Z_data) FROM d_avansai_d d LEFT JOIN d_avansai a ON a.ID=d.Z_ID WHERE d.DS_NR=w.DS_NR AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(w.DS_Serija)) AND a.Z_data&gt;w.Nuo) AS MinImprest, (SELECT MIN(a.Z_data) FROM du_ziniarastis_d d LEFT JOIN du_ziniarastis a ON a.ID=d.Z_ID WHERE d.DS_NR=w.DS_NR AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(w.DS_Serija)) AND a.Z_data&gt;w.Nuo) AS MinWage, (SELECT MIN(d.Nuo) FROM darbuotojai_d d WHERE d.DS_NR=w.DS_NR AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(w.DS_Serija)) AND d.Nuo&gt;w.Nuo AND d.Tipas&lt;&gt;'n') AS MinUpdate, (SELECT MIN(a.SheetDate) FROM worktimeitems d LEFT JOIN worktimesheets a ON a.ID=d.ParentID WHERE d.ContractNumber=w.DS_NR AND UPPER(TRIM(d.ContractSerial))=UPPER(TRIM(w.DS_Serija)) AND a.SheetDate&gt;w.Nuo) AS MinTime, (SELECT MAX(a.Z_data) FROM du_ziniarastis_d d LEFT JOIN du_ziniarastis a ON a.ID=d.Z_ID WHERE d.DS_NR=w.DS_NR AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(w.DS_Serija)) AND a.Z_data&lt;w.Nuo) AS MaxWage, (SELECT MAX(d.Nuo) FROM darbuotojai_d d WHERE d.DS_NR=w.DS_NR AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(w.DS_Serija)) AND d.Nuo&lt;w.Nuo AND d.Nuo&gt;(SELECT d.Nuo FROM darbuotojai_d d WHERE d.DS_NR=w.DS_NR AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(w.DS_Serija)) AND d.Tipas='d' LIMIT 1)) AS MaxUpdate, (SELECT MIN(a.Z_data) FROM du_ziniarastis_d d LEFT JOIN du_ziniarastis a ON a.ID=d.Z_ID WHERE d.DS_NR=w.DS_NR AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(w.DS_Serija)) AND d.AT_K&gt;0 AND a.Z_data&gt;w.Nuo) AS HolidayCompensation, (SELECT d.Nuo FROM darbuotojai_d d WHERE d.DS_NR=w.DS_NR AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(w.DS_Serija)) AND d.Tipas='d' LIMIT 1) AS ContractDate, (SELECT d.Nuo FROM darbuotojai_d d WHERE d.DS_NR=w.DS_NR AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(w.DS_Serija)) AND d.Tipas='n' LIMIT 1) AS ContractTerminationDate FROM darbuotojai_d w WHERE w.ID=?CD ;</Statement>
    <Objects>Workers.ContractChronologicValidator</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchSheetChronologicValidatorImprest</Key>
    <Statement>SELECT a.Z_data, a.Met, a.Men, MIN(d.Ismok) AS MinPayedOut FROM d_avansai a LEFT JOIN d_avansai_d d ON d.Z_ID=a.ID AND NOT d.Ismok IS NULL WHERE a.ID=?SD GROUP BY a.ID;</Statement>
    <Objects>Workers.SheetChronologicValidator</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>SheetChronologicValidatorWage</Key>
    <Statement>SELECT a.Z_data, a.Metai, a.Men, MIN(d.Ismoketa) AS IsPayedOut FROM du_ziniarastis a LEFT JOIN du_ziniarastis_d d ON d.Z_ID=a.ID AND NOT d.Ismoketa IS NULL WHERE a.ID=?SD GROUP BY a.ID;</Statement>
    <Objects>Workers.SheetChronologicValidator</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CreateContractChronologicValidator</Key>
    <Statement>SELECT w.Nuo, w.Tipas, (SELECT MAX(a.Z_data) FROM du_ziniarastis_d d LEFT JOIN du_ziniarastis a ON a.ID=d.Z_ID WHERE d.DS_NR=w.DS_NR AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(w.DS_Serija))) AS MaxWage, (SELECT MAX(d.Nuo) FROM darbuotojai_d d WHERE d.DS_NR=w.DS_NR AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(w.DS_Serija)) AND d.Nuo&gt;(SELECT d.Nuo FROM darbuotojai_d d WHERE d.DS_NR=w.DS_NR AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(w.DS_Serija)) AND d.Tipas='d' LIMIT 1)) AS MaxUpdate, (SELECT d.Nuo FROM darbuotojai_d d WHERE d.DS_NR=w.DS_NR AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(w.DS_Serija)) AND d.Tipas='n' LIMIT 1) AS ContractTerminationDate FROM darbuotojai_d w WHERE w.DS_NR=?DN AND UPPER(TRIM(w.DS_Serija))=UPPER(TRIM(?DS)) AND w.Tipas='d';</Statement>
    <Objects>Workers.ContractChronologicValidator</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfCanDeleteWageSheet</Key>
    <Statement>SELECT b.Z_Data FROM du_ziniarastis b WHERE b.ID=?SD ;</Statement>
    <Objects>Workers.SheetChronologicValidator</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfCanDeleteImprestSheet</Key>
    <Statement>SELECT b.Z_Data FROM d_avansai b WHERE b.ID=?SD ;</Statement>
    <Objects>Workers.SheetChronologicValidator</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateWageSheetNonFinancial</Key>
    <Statement>UPDATE du_ziniarastis SET Nr=?NR, Dalin=?DA, Z_Data=?ZD, Remark=?RM, UpdateDate=?UD WHERE ID=?BD ;</Statement>
    <Objects>Workers.WageSheet</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAdvanceReportNonFinancial</Key>
    <Statement>UPDATE AdvanceReports SET Comments=?AE, CommentsInternal=?AF, DocumentState=?AG WHERE ID=?AA ;</Statement>
    <Objects>Documents.AdvanceReport</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAdvanceReportItemNonFinancial</Key>
    <Statement>UPDATE Apyskaitos SET DocNr=?AB, Aprasas=?AC, Dt=?AK, Analit=?AL  WHERE ID=?CD ;</Statement>
    <Objects>Documents.AdvanceReportItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments43</Key>
    <Statement>UPDATE AccumulativeCosts SET AccountCosts=?AA WHERE AccountCosts=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments44</Key>
    <Statement>UPDATE AccumulativeCosts SET AccountAccumulatedCosts=?AA WHERE AccountAccumulatedCosts=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments45</Key>
    <Statement>UPDATE AccumulativeCosts SET AccountDistributedCosts=?AA WHERE AccountDistributedCosts=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchTransferOfBalanceChronologicValidator</Key>
    <Statement>SELECT MIN(b.Op_data) AS FirsOperationDate, (SELECT MIN(d.Op_data) FROM bz d WHERE d.Op_dok_rusis='uz') AS FirstClosingDate, (SELECT c.Op_ID FROM bz c WHERE c.Op_dok_rusis='lik') AS TransferID, (SELECT e.Op_data FROM bz e WHERE e.Op_dok_rusis='lik') AS TransferDate FROM bz b WHERE b.Op_dok_rusis&lt;&gt;'lik';</Statement>
    <Objects>General.TransferOfBalanceChronologicValidator</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateBankOperationNonFinancial</Key>
    <Statement>UPDATE BankOperations SET U_ID=?AE WHERE ID=?BD ;</Statement>
    <Objects>Documents.BankOperation</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateTillIncomeOrderNonFinancial</Key>
    <Statement>UPDATE kpo SET Nr=?AD, Serija=?AE, Asmuo=?AF, Priedas=?AG, Aprasas=?AH, Apysk=?AI, IsUnderPayRoll=?AM, DocumentState=?AQ WHERE BZ_ID=?AA ;</Statement>
    <Objects>Documents.TillIncomeOrder</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateTillSpendingsOrderNonFinancial</Key>
    <Statement>UPDATE kio SET Nr=?AD, Serija=?AE, Asmuo=?AF, Priedas=?AG, Aprasas=?AH, Apysk=?AI, IsUnderPayRoll=?AM, DocumentState=?AQ WHERE BZ_ID=?AA ;</Statement>
    <Objects>Documents.TillSpendingsOrder</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateOffsetItemNonFinancial</Key>
    <Statement>UPDATE OffsetItems SET Comments=?AJ WHERE ID=?CD ;</Statement>
    <Objects>Documents.OffsetItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments46</Key>
    <Statement>UPDATE kalkuliac_d SET Sask=?AA WHERE Sask=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments47</Key>
    <Statement>UPDATE warehouses SET WarehouseAccount=?AA WHERE WarehouseAccount=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments48</Key>
    <Statement>UPDATE invoicesreceived SET IndirectVatAccount=?AA WHERE IndirectVatAccount=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments49</Key>
    <Statement>UPDATE invoicesreceived SET IndirectVatCostsAccount=?AA WHERE IndirectVatCostsAccount=?AB ;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchGoodsComplexOperationTransferOfBalance</Key>
    <Statement>SELECT b.Op_ID, b.Op_data, b.Op_Dok, b.Op_turinys, b.Op_korespond, (SELECT g.ID FROM goodscomplexoperations g WHERE g.OperationType=6) FROM bz b WHERE b.Op_dok_rusis='lik';</Statement>
    <Objects>Goods.GoodsComplexOperationTransferOfBalance</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchInvoiceReceivedNumberUnique</Key>
    <Statement>SELECT b.Op_data FROM bz b WHERE b.Op_dok_rusis='sg' AND TRIM(UPPER(b.Op_Dok))=TRIM(UPPER(?DN)) AND b.Op_ID&lt;&gt;?CD AND (?BD&lt;1 OR b.Op_data=?DT) AND (?BP&lt;1 OR b.Op_analitika=?PD);</Statement>
    <Objects>Documents.InvoiceReceivedNumberUnique</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchGoodsNameGroupList</Key>
    <Statement>SELECT d.Name, g.Name FROM goods d LEFT JOIN prekes_gr g ON g.ID=d.GroupID ORDER BY d.Name;</Statement>
    <Objects>Goods.ImportedGoodsItemList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FixLongTermAssetsInvoiceRelations1</Key>
    <Statement>UPDATE turtas t SET t.Isigijimo_dok=(SELECT b.Op_ID FROM bz b LEFT JOIN sfg s ON s.BZ_ID=b.Op_ID WHERE s.Rus=3 AND s.P_ID=t.ID) WHERE t.ID = ANY(SELECT s.P_ID FROM sfg s WHERE s.Rus=3);</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FixGoodsInvoiceRelations1</Key>
    <Statement>UPDATE prekes_op p SET p.BZ_ID=(SELECT s.BZ_ID FROM sfg s WHERE s.P_ID=p.ID AND s.Rus=1 LIMIT 1) WHERE p.ID=ANY(SELECT z.P_ID FROM sfg z WHERE z.Rus=1);</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FixGoodsInvoiceRelations2</Key>
    <Statement>UPDATE prekes_op p SET p.BZ_ID=(SELECT s.SF_ID FROM sfd s WHERE s.P_ID=p.ID AND s.Rusis=1 LIMIT 1) WHERE p.ID=ANY(SELECT z.P_ID FROM sfd z WHERE z.Rusis=1);</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FixLongTermAssetsInvoiceRelations2</Key>
    <Statement>UPDATE turtas_op t SET t.BZ_ID=(SELECT b.Op_ID FROM bz b LEFT JOIN sfd s ON s.SF_ID=b.Op_ID WHERE s.Rusis=3 AND s.P_ID=t.ID) WHERE t.ID = ANY(SELECT s.P_ID FROM sfd s WHERE s.Rusis=3);</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchRegionalPriceInfoListByType</Key>
    <Statement>SELECT r.ParentID, r.ID, r.CurrencyCode, r.ValuePerUnitSales, r.ValuePerUnitPurchases FROM regionalprices r WHERE r.ParentType=?AA ;</Statement>
    <Objects>HelperLists.RegionalPriceInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchRegionalPriceInfoListByParent</Key>
    <Statement>SELECT r.ParentID, r.ID, r.CurrencyCode, r.ValuePerUnitSales, r.ValuePerUnitPurchases FROM regionalprices r WHERE r.ParentType=?AA AND r.ParentID=?AB ;</Statement>
    <Objects>HelperLists.RegionalPriceInfoList, Documents.RegionalPriceList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchRegionalContentInfoListByType</Key>
    <Statement>SELECT r.ParentID, r.ID, r.LanguageCode, r.ContentInvoice, r.MeasureUnit, r.VatExempt FROM regionalcontents r WHERE r.ParentType=?AA ;</Statement>
    <Objects>HelperLists.RegionalContentInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchRegionalContentInfoListByParent</Key>
    <Statement>SELECT r.ParentID, r.ID, r.LanguageCode, r.ContentInvoice, r.MeasureUnit, r.VatExempt FROM regionalcontents r WHERE r.ParentType=?AA AND r.ParentID=?AB ;</Statement>
    <Objects>HelperLists.RegionalContentInfoList, Documents.RegionalContentList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchUnsettledPersonInfoList</Key>
    <Statement>SELECT b.Op_ID, b.Op_data, b.Op_Dok, b.Op_dok_rusis, b.Op_turinys, t.DocSum, a.ID, a.Pavad, a.Kodas, a.Adresas, a.SP_kodas, a.E_Mail, a.InternalCode, a.ContactInfo, g.Debt FROM bz b LEFT JOIN (SELECT a.ID AS ID, CROUND(SUM(CASE WHEN f.Op_tipas=?TP THEN f.Op_suma ELSE -f.Op_suma END), 2) AS Debt FROM bzdata f LEFT JOIN bz s ON s.Op_ID=f.Op_ID_BZ LEFT JOIN asmenys a ON a.ID=f.Op_ana OR (f.Op_ana&lt;1 AND a.ID=s.Op_analitika) LEFT JOIN persons_group_assignments u ON u.PersonsID=a.ID AND (?PG&lt;1 OR u.GroupID=?PG) WHERE f.Op_saskaita=?AC AND s.Op_data&lt;=?DT AND (?PG&lt;1 OR NOT u.ID IS NULL) GROUP BY a.ID HAVING Debt&gt;?ME) AS g ON g.ID=b.Op_analitika LEFT JOIN (SELECT w.Op_ID AS ID, SUM(r.Op_suma) AS DocSum FROM bz w LEFT JOIN bzdata r ON r.Op_ID_BZ=w.Op_ID AND r.Op_saskaita=?AC AND r.Op_tipas=?TP WHERE w.Op_data&lt;=?DT GROUP BY w.Op_ID) AS t ON t.ID=b.Op_ID LEFT JOIN asmenys a ON a.ID=g.ID WHERE g.Debt&gt;0 AND t.DocSum&gt;0 AND (SELECT SUM(d.Op_suma) FROM bz c LEFT JOIN bzdata d ON d.Op_ID_BZ=c.Op_ID WHERE c.Op_analitika=b.Op_analitika AND c.Op_data&gt;=b.Op_data AND d.Op_saskaita=?AC AND d.Op_tipas=?TP) &lt; (g.Debt + t.DocSum) ORDER BY b.Op_analitika, b.Op_data DESC;</Statement>
    <Objects>ActiveReports.UnsettledPersonInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CompanyRowExists</Key>
    <Statement>SELECT COUNT(*) FROM imone;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>OldVersionSerialCodes</Key>
    <Statement>SELECT COUNT(*) FROM serijos s WHERE UPPER(TRIM(s.Serijos_dok)) IN (UPPER('sąskaita - faktūra'), UPPER('saskaita - faktura'), UPPER('kasos išlaidų orderis'), UPPER('kasos islaidu orderis'), UPPER('kasos pajamų orderis'), UPPER('kasos pajamu orderis'), UPPER('darbo sutartis'));</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>RepairOldVersionSerialCodes</Key>
    <Statement>UPDATE serijos SET Serijos_dok=(CASE WHEN UPPER(TRIM(Serijos_dok)) IN (UPPER('sąskaita - faktūra'), UPPER('saskaita - faktura')) THEN 'sf' ELSE CASE WHEN UPPER(TRIM(Serijos_dok)) IN (UPPER('kasos išlaidų orderis'), UPPER('kasos islaidu orderis')) THEN 'kio' ELSE CASE WHEN UPPER(TRIM(Serijos_dok)) IN (UPPER('kasos pajamų orderis'), UPPER('kasos pajamu orderis')) THEN 'kpo' ELSE 'ds' END END END);</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchRegionalPriceEntryList</Key>
    <Statement>SELECT ParentID, ParentType, CurrencyCode, ValuePerUnitSales, ValuePerUnitPurchases FROM regionalprices;</Statement>
    <Objects>HelperLists.RegionalPriceEntryList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchRegionalContentEntryList</Key>
    <Statement>SELECT ParentID, ParentType, LanguageCode, ContentInvoice, MeasureUnit, VatExempt FROM regionalcontents;</Statement>
    <Objects>HelperLists.RegionalContentEntryList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchWageVDUInfoList</Key>
    <Statement>SELECT m.Metai, m.Men, SUM(d.VDU_d), SUM(d.VDU_v), SUM(d.VDU_u), SUM(d.D_val), SUM(d.D_dien) FROM du_ziniarastis m LEFT JOIN du_ziniarastis_d d ON d.Z_ID=m.ID AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(?CS)) AND d.DS_NR=?CN WHERE m.Metai&lt;?YR OR (m.Metai=?YR AND m.Men&lt;=?MN) GROUP BY m.Metai, m.Men HAVING COUNT(d.ID)&gt;0 ORDER BY m.Metai DESC, m.Men DESC LIMIT 3;</Statement>
    <Objects>ActiveReports.WageVDUInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchBonusVDUInfoList</Key>
    <Statement>SELECT c.Metai, c.Men, b.Pr_tipas, CROUND(SUM(b.Premija), 2) As BonusAmount FROM du_ziniarastis c LEFT JOIN du_ziniarastis_d b ON b.Z_ID=c.ID AND b.DS_NR=?CN AND UPPER(TRIM(b.DS_Serija))=UPPER(TRIM(?CS)) WHERE (c.Metai&gt;?YF OR (c.Metai=?YF AND c.Men&gt;=?MF)) AND (c.Metai&lt;?YT OR (c.Metai=?YT AND c.Men&lt;=?MT)) GROUP BY c.Metai, c.Men, b.Pr_tipas HAVING BonusAmount&gt;0 ORDER BY c.Metai DESC, c.Men DESC;</Statement>
    <Objects>ActiveReports.BonusVDUInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchWorkersVDUInfoGeneral</Key>
    <Statement>SELECT t.AK, a.Pavad, a.Kodas, a.SD_kodas, t.DS_Serija, t.DS_NR, CAST(MIN(CASE WHEN t.Tipas='d' THEN t.MaxDate ELSE null END) AS Date) AS StartDate, CAST(MAX(CASE WHEN t.Tipas='n' THEN t.MaxDate ELSE null END) AS Date) As EndDate, MAX(CASE WHEN t.Tipas='i' THEN d.Dydis ELSE null END) AS ExtraPay, MAX(CASE WHEN t.Tipas='u' THEN d.Dydis ELSE null END) AS Wage, MAX(CASE WHEN t.Tipas='u' THEN d.DU_tipas ELSE null END) AS WageType, MAX(CASE WHEN t.Tipas='k' THEN d.Dydis ELSE null END) AS WorkLoad, MAX(CASE WHEN t.Tipas='f' THEN d.DU_tipas ELSE null END) AS WorkerPosition FROM (SELECT AK, DS_Serija, DS_NR, Tipas, MAX(Nuo) AS MaxDate FROM darbuotojai_d WHERE Nuo&lt;=?DT GROUP BY AK, DS_Serija, DS_NR, Tipas) t LEFT JOIN darbuotojai_d d ON d.AK=t.AK AND t.DS_Serija=d.DS_Serija AND t.DS_NR=d.DS_NR AND t.MaxDate=d.Nuo AND t.Tipas=d.Tipas LEFT JOIN asmenys a ON a.ID=t.AK WHERE UPPER(TRIM(t.DS_Serija))=UPPER(TRIM(?CS)) AND t.DS_NR=?CN GROUP BY t.AK, t.DS_Serija, t.DS_NR;</Statement>
    <Objects>ActiveReports.WorkersVDUInfo</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchHolidayCalculationPeriodList</Key>
    <Statement>SELECT d.Nuo, d.Dydis, IFNULL((SELECT b.Tipas FROM darbuotojai_d b WHERE UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(b.DS_Serija)) AND d.DS_Nr=b.DS_Nr AND d.Nuo=b.Nuo AND b.Tipas='d' LIMIT 1), d.Tipas) AS StatusType, d.Pagrindas FROM darbuotojai_d d WHERE d.DS_Nr=?CN AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(?CS)) AND (d.Tipas='a' OR d.Tipas='n') AND (d.Nuo&lt;?DT OR ?UH&gt;0) ORDER BY d.Nuo;</Statement>
    <Objects>ActiveReports.WorkerHolidayInfo</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchHolidaySpentItemList</Key>
    <Statement>SELECT 0 AS ItemType, d.Atost + d.Atost_n AS Spent, 0 AS Compensated, 0 AS Correction, b.ID AS DocumentID, b.Z_Data AS DocumentDate, a.Op_Dok AS DocumentNumber, a.Op_turinys AS DocumentContent FROM du_ziniarastis_d d LEFT JOIN du_ziniarastis b ON b.ID=d.Z_ID LEFT JOIN bz a ON a.Op_ID=b.ID WHERE d.DS_NR=?CN AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(?CS)) AND d.AT_K&lt;1 AND (d.Atost&gt;0 OR d.Atost_n&gt;0) AND (b.Z_data&lt;=?DT OR ?UH&gt;0) UNION SELECT 1 AS ItemType, 0 AS Spent, d.Atost AS Compensated, 0 AS Correction, b.ID AS DocumentID, b.Z_Data AS DocumentDate, a.Op_Dok AS DocumentNumber, a.Op_turinys AS DocumentContent FROM du_ziniarastis_d d LEFT JOIN du_ziniarastis b ON b.ID=d.Z_ID LEFT JOIN bz a ON a.Op_ID=b.ID WHERE d.DS_NR=?CN AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(?CS)) AND d.AT_K&gt;0 AND d.Atost&gt;0 AND (b.Z_data&lt;=?DT OR ?UH&gt;0) UNION SELECT 2 AS ItemType, 0 AS Spent, 0 AS Compensated, c.Dydis AS Correction, c.ID AS DocumentID, c.Nuo AS DocumentDate, '' AS DocumentNumber, c.Pagrindas AS DocumentContent FROM darbuotojai_d c WHERE c.DS_Nr=?CN AND UPPER(TRIM(c.DS_Serija))=UPPER(TRIM(?CS)) AND c.Tipas='o' AND (c.Nuo&lt;=?DT OR ?UH&gt;0);</Statement>
    <Objects>ActiveReports.WorkerHolidayInfo</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchWorkerHolidayInfoGeneral</Key>
    <Statement>SELECT t.AK, a.Pavad, a.Kodas, a.SD_kodas, t.DS_Serija, t.DS_NR, CAST(MIN(CASE WHEN t.Tipas='d' THEN t.MaxDate ELSE null END) AS Date) AS StartDate, CAST(MAX(CASE WHEN t.Tipas='n' THEN t.MaxDate ELSE null END) AS Date) As EndDate, MAX(CASE WHEN t.Tipas='a' THEN d.Dydis ELSE null END) AS Holiday, MAX(CASE WHEN t.Tipas='k' THEN d.Dydis ELSE null END) AS WorkLoad, MAX(CASE WHEN t.Tipas='f' THEN d.DU_tipas ELSE null END) AS WorkerPosition FROM (SELECT AK, DS_Serija, DS_NR, Tipas, MAX(Nuo) AS MaxDate FROM darbuotojai_d WHERE Nuo&lt;=?DT OR ?UH&gt;0 GROUP BY AK, DS_Serija, DS_NR, Tipas) t LEFT JOIN darbuotojai_d d ON d.AK=t.AK AND t.DS_Serija=d.DS_Serija AND t.DS_NR=d.DS_NR AND t.MaxDate=d.Nuo AND t.Tipas=d.Tipas LEFT JOIN asmenys a ON a.ID=t.AK WHERE UPPER(TRIM(t.DS_Serija))=UPPER(TRIM(?CS)) AND t.DS_NR=?CN GROUP BY t.AK, t.DS_Serija, t.DS_NR;</Statement>
    <Objects>ActiveReports.WorkerHolidayInfo</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertAssetOperationPersistenceObject</Key>
    <Statement>INSERT INTO turtas_op(OperationDate, JE_ID, IsComplexAct, Content, DocNo, UnitValueChange, AmmountChange, TotalValueChange, NewAmortizationPeriod, AmortizationCalculations, RevaluedPortionUnitValueChange, RevaluedPortionTotalValueChange, AcquisitionAccountChange, AcquisitionAccountChangePerUnit, AmortizationAccountChange, AmortizationAccountChangePerUnit, ValueDecreaseAccountChange, ValueDecreaseAccountChangePerUnit, ValueIncreaseAccountChange, ValueIncreaseAccountChangePerUnit, ValueIncreaseAmmortizationAccountChange, ValueIncreaseAmmortizationAccountChangePerUnit, AmortizationCalculatedForMonths, T_ID, OperationType, AccountOperationType, AccountCorresponding, InsertDate, UpdateDate, ActNumber) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF, ?AG, ?AH, ?AI, ?AJ, ?AK, ?AL, ?AM, ?AN, ?AO, ?AQ, ?AP, ?AR, ?AT, ?AU, ?AV, ?AZ, ?AW, ?BA, ?BB, ?BC, ?BD, ?BE, ?BE, 0);</Statement>
    <Objects>Assets.OperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAssetOperationPersistenceObject</Key>
    <Statement>UPDATE turtas_op SET OperationDate=?AA, JE_ID=?AB, Content=?AD, DocNo=?AE, UnitValueChange=?AF, AmmountChange=?AG, TotalValueChange=?AH, NewAmortizationPeriod=?AI, AmortizationCalculations=?AJ, RevaluedPortionUnitValueChange=?AK, RevaluedPortionTotalValueChange=?AL, AcquisitionAccountChange=?AM, AcquisitionAccountChangePerUnit=?AN, AmortizationAccountChange=?AO, AmortizationAccountChangePerUnit=?AQ, ValueDecreaseAccountChange=?AP, ValueDecreaseAccountChangePerUnit=?AR, ValueIncreaseAccountChange=?AT, ValueIncreaseAccountChangePerUnit=?AU, ValueIncreaseAmmortizationAccountChange=?AV, ValueIncreaseAmmortizationAccountChangePerUnit=?AZ, AmortizationCalculatedForMonths=?AW, AccountCorresponding=?BD, UpdateDate=?BE WHERE ID=?OD ;</Statement>
    <Objects>Assets.OperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteAssetOperationPersistenceObject</Key>
    <Statement>DELETE FROM turtas_op WHERE turtas_op.ID=?OD ;</Statement>
    <Objects>Assets.OperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchAssetOperationPersistenceObject</Key>
    <Statement>SELECT o.ID, o.T_ID, o.OperationType, o.AccountOperationType, o.OperationDate, o.IsComplexAct, o.Content, o.AccountCorresponding, o.DocNo, o.UnitValueChange, o.AmmountChange, o.TotalValueChange, o.NewAmortizationPeriod, o.AmortizationCalculations, o.RevaluedPortionUnitValueChange, o.RevaluedPortionTotalValueChange, o.AcquisitionAccountChange, o.AcquisitionAccountChangePerUnit, o.AmortizationAccountChange, o.AmortizationAccountChangePerUnit, o.ValueDecreaseAccountChange, o.ValueDecreaseAccountChangePerUnit, o.ValueIncreaseAccountChange, o.ValueIncreaseAccountChangePerUnit, o.ValueIncreaseAmmortizationAccountChange, o.ValueIncreaseAmmortizationAccountChangePerUnit, o.AmortizationCalculatedForMonths, o.InsertDate, o.UpdateDate, IFNULL((SELECT COUNT(q.ID) FROM turtas_op q WHERE q.ID&lt;&gt;o.ID AND q.T_ID=o.T_ID AND q.OperationType='nau' AND q.OperationDate &lt; o.OperationDate), 0) + IFNULL((SELECT w.ContinuedUsage FROM turtas w WHERE w.ID=o.T_ID), 0) AS PreviousUsageCount, o.JE_ID, b.Op_ID, b.Op_Dok, b.Op_data, b.Op_turinys, b.Op_dok_rusis, p.ID, p.Pavad, p.Kodas, b.Op_korespond, (SELECT CROUND(IFNULL(SUM(d.Op_suma), 0) / 2, 2) FROM bzdata d WHERE d.Op_ID_BZ=b.Op_ID) AS SumBookEntries FROM turtas_op o LEFT JOIN bz b ON b.Op_ID=o.JE_ID LEFT JOIN asmenys p ON p.ID=b.Op_analitika WHERE o.ID=?OD GROUP BY o.ID;</Statement>
    <Objects>Assets.OperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAssetOperationPersistenceObjectGeneral</Key>
    <Statement>UPDATE turtas_op SET OperationDate=?AA, JE_ID=?AB, Content=?AD, DocNo=?AE, AmortizationCalculations=?AJ, AmortizationCalculatedForMonths=?AW, UpdateDate=?BE WHERE ID=?OD ;</Statement>
    <Objects>Assets.OperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchSignificantOperationList</Key>
    <Statement>SELECT (d.AcquisitionAccountChange - d.ValueDecreaseAccountChange) AS AcquisitionValue, (d.AcquisitionAccountChangePerUnit - d.ValueDecreaseAccountChangePerUnit) AS AcquisitionValuePerUnit, (d.ValueIncreaseAccountChange) AS RevaluedPortionValue, (d.ValueIncreaseAccountChangePerUnit) AS RevaluedPortionValuePerUnit, (d.AmortizationAccountChange) AS AccumulatedAmortization, (d.AmortizationAccountChangePerUnit) AS AccumulatedAmortizationPerUnit, (d.ValueIncreaseAmmortizationAccountChange) AS AccumulatedAmortizationRevaluedPortion, (d.ValueIncreaseAmmortizationAccountChangePerUnit) AS AccumulatedAmortizationPerUnitRevaluedPortion, (d.AmmountChange), (d.AmortizationCalculatedForMonths), d.OperationType, d.NewAmortizationPeriod, d.OperationDate, d.ID FROM turtas_op d WHERE d.OperationType&lt;&gt;'aac' AND d.T_ID=?AD AND d.ID&lt;&gt;?MD AND d.OperationDate&lt;?DT ORDER BY d.OperationDate, d.ID;</Statement>
    <Objects>Assets.LongTermAssetAmortization</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CreateHolidayPayReserveItemList</Key>
    <Statement>SELECT t.AK, a.Pavad, a.Kodas, a.SD_kodas, t.DS_Serija, t.DS_NR, CAST(MIN(CASE WHEN t.Tipas='d' THEN t.MaxDate ELSE null END) AS Date) AS StartDate, CAST(MAX(CASE WHEN t.Tipas='n' THEN t.MaxDate ELSE null END) AS Date) As EndDate, MAX(CASE WHEN t.Tipas='a' THEN d.Dydis ELSE null END) AS Holiday, MAX(CASE WHEN t.Tipas='k' THEN d.Dydis ELSE null END) AS WorkLoad, MAX(CASE WHEN t.Tipas='f' THEN d.DU_tipas ELSE null END) AS WorkerPosition, MAX(CASE WHEN t.Tipas='u' THEN d.Dydis ELSE null END) AS Wage, MAX(CASE WHEN t.Tipas='u' THEN d.DU_tipas ELSE null END) AS WageType, MAX(CASE WHEN t.Tipas='i' THEN d.Dydis ELSE null END) AS ExtraPay FROM (SELECT AK, DS_Serija, DS_NR, Tipas, MAX(Nuo) AS MaxDate FROM darbuotojai_d WHERE Nuo&lt;=?DT OR Tipas='n' GROUP BY AK, DS_Serija, DS_NR, Tipas) t LEFT JOIN darbuotojai_d d ON d.AK=t.AK AND t.DS_Serija=d.DS_Serija AND t.DS_NR=d.DS_NR AND t.MaxDate=d.Nuo AND t.Tipas=d.Tipas LEFT JOIN asmenys a ON a.ID=t.AK GROUP BY t.AK, t.DS_Serija, t.DS_NR HAVING NOT StartDate IS NULL AND (EndDate IS NULL OR EndDate&gt;?DT);</Statement>
    <Objects>Workers.HolidayPayReserveItemList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertHolidayPayReserveItem</Key>
    <Statement>INSERT INTO HolidayPayReserveItems(ParentID, ApplicableVDUDaily, ApplicableUnusedHolidayDays, ApplicableWorkDaysRatio, Comments, ContractSerial, ContractNumber) VALUES(?AA, ?AB, ?AC, ?AD, ?AE, ?AF, ?AG);</Statement>
    <Objects>Workers.HolidayPayReserveItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateHolidayPayReserveItem</Key>
    <Statement>UPDATE HolidayPayReserveItems SET ApplicableVDUDaily=?AB, ApplicableUnusedHolidayDays=?AC, ApplicableWorkDaysRatio=?AD, Comments=?AE WHERE ID=?CD ;</Statement>
    <Objects>Workers.HolidayPayReserveItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteHolidayPayReserveItem</Key>
    <Statement>DELETE FROM HolidayPayReserveItems WHERE HolidayPayReserveItems.ID=?CD ;</Statement>
    <Objects>Workers.HolidayPayReserveItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateHolidayPayReserveItemNonFinancial</Key>
    <Statement>UPDATE HolidayPayReserveItems SET Comments=?AE WHERE ID=?CD ;</Statement>
    <Objects>Workers.HolidayPayReserveItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchHolidayPayReserveItemList</Key>
    <Statement>SELECT t.AK, a.Pavad, a.Kodas, a.SD_kodas, t.DS_Serija, t.DS_NR, CAST(MIN(CASE WHEN t.Tipas='d' THEN t.MaxDate ELSE null END) AS Date) AS StartDate, CAST(MAX(CASE WHEN t.Tipas='n' THEN t.MaxDate ELSE null END) AS Date) As EndDate, MAX(CASE WHEN t.Tipas='a' THEN d.Dydis ELSE null END) AS Holiday, MAX(CASE WHEN t.Tipas='k' THEN d.Dydis ELSE null END) AS WorkLoad, MAX(CASE WHEN t.Tipas='f' THEN d.DU_tipas ELSE null END) AS WorkerPosition, MAX(CASE WHEN t.Tipas='u' THEN d.Dydis ELSE null END) AS Wage, MAX(CASE WHEN t.Tipas='u' THEN d.DU_tipas ELSE null END) AS WageType, MAX(CASE WHEN t.Tipas='i' THEN d.Dydis ELSE null END) AS ExtraPay, r.ID, r.ApplicableVDUDaily, r.ApplicableUnusedHolidayDays, r.ApplicableWorkDaysRatio, r.Comments FROM (SELECT AK, DS_Serija, DS_NR, Tipas, MAX(Nuo) AS MaxDate FROM darbuotojai_d WHERE Nuo&lt;=?DT OR Tipas='n' GROUP BY AK, DS_Serija, DS_NR, Tipas) t LEFT JOIN darbuotojai_d d ON d.AK=t.AK AND t.DS_Serija=d.DS_Serija AND t.DS_NR=d.DS_NR AND t.MaxDate=d.Nuo AND t.Tipas=d.Tipas LEFT JOIN asmenys a ON a.ID=t.AK LEFT JOIN HolidayPayReserveItems r ON TRIM(UPPER(r.ContractSerial))=t.DS_Serija AND r.ContractNumber=t.DS_NR AND r.ParentID=?PD WHERE NOT r.ID IS NULL GROUP BY t.AK, t.DS_Serija, t.DS_NR;</Statement>
    <Objects>Workers.HolidayPayReserveItemList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchHolidayPayReserve</Key>
    <Statement>SELECT b.Op_data, b.Op_Dok, b.Op_turinys, b.InsertDate, b.UpdateDate, r.AccountCosts, r.AccountReserve, r.Comments, r.TaxRate, (SELECT SUM((CASE WHEN d.Op_tipas='Kreditas' THEN d.Op_suma ELSE -d.Op_suma END)) FROM bzdata d LEFT JOIN bz c ON c.Op_ID=d.OP_ID_BZ WHERE d.Op_saskaita=r.AccountReserve AND c.Op_data&lt;=b.Op_data AND c.Op_ID&lt;&gt;b.Op_ID) AS CreditBalance FROM HolidayPayReserves r LEFT JOIN bz b ON b.Op_ID=r.ID WHERE r.ID=?CD ;</Statement>
    <Objects>Workers.HolidayPayReserve</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>InsertHolidayPayReserve</Key>
    <Statement>INSERT INTO HolidayPayReserves(AccountCosts, AccountReserve, Comments, TaxRate, ID) VALUES(?AA, ?AB, ?AC, ?AD, ?AE);</Statement>
    <Objects>Workers.HolidayPayReserve</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateHolidayPayReserve</Key>
    <Statement>UPDATE HolidayPayReserves SET AccountCosts=?AA, AccountReserve=?AB, Comments=?AC, TaxRate=?AD WHERE ID=?CD ;</Statement>
    <Objects>Workers.HolidayPayReserve</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteHolidayPayReserve</Key>
    <Statement>DELETE FROM HolidayPayReserves WHERE HolidayPayReserves.ID=?CD ;</Statement>
    <Objects>Workers.HolidayPayReserve</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateHolidayPayReserveNonFinancial</Key>
    <Statement>UPDATE HolidayPayReserves SET Comments=?AC WHERE ID=?CD ;</Statement>
    <Objects>Workers.HolidayPayReserve</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DeleteHolidayPayReserveItemList</Key>
    <Statement>DELETE FROM HolidayPayReserveItems WHERE HolidayPayReserveItems.ParentID=?CD ;</Statement>
    <Objects>Workers.HolidayPayReserve</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchHolidayPayReserveBalance</Key>
    <Statement>SELECT SUM((CASE WHEN d.Op_tipas='Kreditas' THEN d.Op_suma ELSE -d.Op_suma END)) FROM bzdata d LEFT JOIN bz c ON c.Op_ID=d.OP_ID_BZ WHERE d.Op_saskaita=?AC AND c.Op_data&lt;=?DT;</Statement>
    <Objects>Workers.HolidayPayReserve</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments50</Key>
    <Statement>UPDATE HolidayPayReserves SET AccountCosts=?AA WHERE AccountCosts=?AB;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateAccountsInDocuments51</Key>
    <Statement>UPDATE HolidayPayReserves SET AccountReserve=?AA WHERE AccountReserve=?AB;</Statement>
    <Objects>General.Account</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchServiceTurnoverInfoList</Key>
    <Statement>SELECT S.ID AS ID, S.TrPav AS ServiceName, S.Tip AS TradedType, S.PVM AS DefaultVatRateSales, S.RateVatPurchase AS DefaultRateVatPurchase, S.ServiceCode AS ServiceCode, S.Obsol AS IsObsolete, S.S_Sask AS AccountSales, S.AccountPurchase AS AccountPurchase, S.AccountVatPurchase AS AccountVatPurchase, r.PurchasedAmount, r.PurchasedSum, IFNULL(r.PurchasedAmountReturned, 0) + IFNULL(q.PurchasedAmountReturned, 0) AS PurchasedAmountReturned, IFNULL(r.PurchasedSumReturned, 0) + IFNULL(q.PurchasedSumReturned, 0) AS PurchasedSumReturned, r.PurchasedSumReductions, q.SoldAmount, q.SoldSum, IFNULL(r.SoldAmountReturned, 0) + IFNULL(q.SoldAmountReturned, 0) AS SoldAmountReturned, IFNULL(r.SoldSumReturned, 0) + IFNULL(q.SoldSumReturned, 0) AS SoldSumReturned, q.SoldSumReductions, q.SoldSumDiscounts FROM paslaugos S LEFT JOIN (SELECT d.P_ID AS sid, SUM(CASE WHEN b.InvoiceType&lt;&gt;2 AND d.SumLTL&gt;0 THEN d.Kiekis ELSE 0 END) AS SoldAmount, SUM(CASE WHEN b.InvoiceType&lt;&gt;2 AND d.SumLTL&gt;0 THEN d.SumLTL ELSE 0 END) AS SoldSum, SUM(CASE WHEN b.InvoiceType&lt;&gt;2 AND d.Kiekis&lt;0 THEN -d.Kiekis ELSE 0 END) AS SoldAmountReturned, SUM(CASE WHEN b.InvoiceType&lt;&gt;2 AND d.Kiekis&lt;0 THEN -d.SumLTL ELSE 0 END) AS SoldSumReturned, SUM(CASE WHEN b.InvoiceType&lt;&gt;2 AND d.Kaina&lt;0 THEN -d.SumLTL ELSE 0 END) AS SoldSumReductions, SUM(CASE WHEN b.InvoiceType=2 AND d.SumLTL&gt;0 THEN d.Kiekis ELSE 0 END) AS PurchasedAmountReturned, SUM(CASE WHEN b.InvoiceType=2 AND d.SumLTL&gt;0 THEN d.SumLTL ELSE 0 END) AS PurchasedSumReturned, SUM(d.DiscountLTL) AS SoldSumDiscounts FROM sfd d LEFT JOIN InvoicesMade b ON b.ID=d.SF_ID LEFT JOIN bz c ON c.Op_ID=b.ID WHERE c.Op_data&gt;=?DF AND c.Op_data&lt;=?DT AND d.Rusis=2 GROUP BY d.P_ID) AS q ON q.sid=S.ID LEFT JOIN (SELECT d.P_ID as sid, SUM(CASE WHEN b.InvoiceType&lt;&gt;2 AND d.SumLTL&gt;0 THEN d.V_KK ELSE 0 END) AS PurchasedAmount, SUM(CASE WHEN b.InvoiceType&lt;&gt;2 AND d.SumLTL&gt;0 THEN d.SumLTL ELSE 0 END) AS PurchasedSum, SUM(CASE WHEN b.InvoiceType&lt;&gt;2 AND d.V_KK&lt;0 THEN -d.V_KK ELSE 0 END) AS PurchasedAmountReturned, SUM(CASE WHEN b.InvoiceType&lt;&gt;2 AND d.V_KK&lt;0 THEN -d.SumLTL ELSE 0 END) AS PurchasedSumReturned, SUM(CASE WHEN b.InvoiceType&lt;&gt;2 AND d.V_KN&lt;0 THEN -d.SumLTL ELSE 0 END) AS PurchasedSumReductions, SUM(CASE WHEN b.InvoiceType=2 AND d.SumLTL&gt;0 THEN d.V_KK ELSE 0 END) AS SoldAmountReturned, SUM(CASE WHEN b.InvoiceType=2 AND d.SumLTL&gt;0 THEN d.SumLTL ELSE 0 END) AS SoldSumReturned FROM sfg d LEFT JOIN InvoicesReceived b ON b.ID=d.BZ_ID LEFT JOIN bz c ON c.Op_ID=b.ID WHERE c.Op_data&gt;=?DF AND c.Op_data&lt;=?DT AND d.Rus=2 GROUP BY d.P_ID) AS r ON r.sid=S.ID;</Statement>
    <Objects>ActiveReports.ServiceTurnoverInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeWages1</Key>
    <Statement>UPDATE du_ziniarastis_d SET CalculatedWage=(CASE WHEN DU_tipas='p' THEN (CASE WHEN D_val&gt;0 THEN CROUND(DU * Val / D_val, 2) ELSE 0 END) ELSE CROUND(DU * Val, 2) END), CalculatedExtraPay=(CASE WHEN D_val&gt;0 THEN CROUND(Priedai * Val / D_val, 2) ELSE 0 END), HolidayDaysCompensated=(CASE WHEN AT_K&gt;0 THEN (CASE WHEN Atost&gt;0 THEN Atost ELSE 0.4 END) ELSE 0 END), CalculatedSickLeave=CROUND(VDU_dien * Nedarb * (SELECT b.Nedarb FROM du_ziniarastis b WHERE b.ID=du_ziniarastis_d.Z_ID) / 100, 2), PayableTotal=CROUND(DU_is + Avans, 2);</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeWages2</Key>
    <Statement>UPDATE du_ziniarastis_d SET CalculatedHR=(CASE WHEN Val&gt;0 THEN CROUND(CROUND((CalculatedWage + CalculatedExtraPay + Kitos_s) / Val, 2) * PS * (SELECT b.P_S FROM du_ziniarastis b WHERE b.ID=du_ziniarastis_d.Z_ID) / 100, 2) ELSE (CASE WHEN D_Val&gt;0 THEN CROUND(CROUND(((CASE WHEN DU_tipas='p' THEN DU ELSE DU * D_Val END) + Priedai + Kitos_s) / D_Val, 2) * PS * (SELECT b.P_S FROM du_ziniarastis b WHERE b.ID=du_ziniarastis_d.Z_ID) / 100, 2) ELSE 0 END) END), CalculatedON=(CASE WHEN Val&gt;0 THEN CROUND(CROUND((CalculatedWage + CalculatedExtraPay + Kitos_s) / Val, 2) * NV * (SELECT b.N_V FROM du_ziniarastis b WHERE b.ID=du_ziniarastis_d.Z_ID) / 100, 2) ELSE (CASE WHEN D_Val&gt;0 THEN CROUND(CROUND(((CASE WHEN DU_tipas='p' THEN DU ELSE DU * D_Val END) + Priedai + Kitos_s) / D_Val, 2) * NV * (SELECT b.N_V FROM du_ziniarastis b WHERE b.ID=du_ziniarastis_d.Z_ID) / 100, 2) ELSE 0 END) END), CalculatedSC=(CASE WHEN Val&gt;0 THEN CROUND(CROUND((CalculatedWage + CalculatedExtraPay + Kitos_s) / Val, 2) * YS * (SELECT b.Y_S FROM du_ziniarastis b WHERE b.ID=du_ziniarastis_d.Z_ID) / 100, 2) ELSE (CASE WHEN D_Val&gt;0 THEN CROUND(CROUND(((CASE WHEN DU_tipas='p' THEN DU ELSE DU * D_Val END) + Priedai + Kitos_s) / D_Val, 2) * YS * (SELECT b.Y_S FROM du_ziniarastis b WHERE b.ID=du_ziniarastis_d.Z_ID) / 100, 2) ELSE 0 END) END);</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeWages3</Key>
    <Statement>UPDATE du_ziniarastis_d SET CalculatedHR=CROUND(PS * VDU_val * (SELECT b.P_S FROM du_ziniarastis b WHERE b.ID=du_ziniarastis_d.Z_ID) / 100, 2), CalculatedON=CROUND(NV * VDU_val * (SELECT b.N_V FROM du_ziniarastis b WHERE b.ID=du_ziniarastis_d.Z_ID) / 100, 2), CalculatedHR=CROUND(YS * VDU_val * (SELECT b.Y_S FROM du_ziniarastis b WHERE b.ID=du_ziniarastis_d.Z_ID) / 100, 2) WHERE (SELECT COUNT(b.ID) FROM du_ziniarastis b WHERE b.ID=du_ziniarastis_d.Z_ID AND b.Metai=2008 AND b.Men=6) &gt; 0;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeWages4</Key>
    <Statement>UPDATE du_ziniarastis_d SET BaseGPM=(CASE WHEN CROUND(DU_pr + CalculatedSickLeave, 2) &gt; CROUND(NPD + PNPD, 2) THEN CROUND(DU_pr + CalculatedSickLeave, 2) ELSE 0 END), BaseSODRA=DU_pr, BaseGuaranteeFund=DU_pr, BasePSDSickLeave=(CASE WHEN (SELECT COUNT(b.ID) FROM du_ziniarastis b WHERE b.ID=du_ziniarastis_d.Z_ID AND b.Metai=2009) &gt; 0 THEN CalculatedSickLeave ELSE 0 END), BasePSD=(CASE WHEN (SELECT COUNT(b.ID) FROM du_ziniarastis b WHERE b.ID=du_ziniarastis_d.Z_ID AND b.Metai&gt;2008) &gt; 0 THEN DU_pr ELSE 0 END);</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeWages5</Key>
    <Statement>UPDATE du_ziniarastis_d SET DeductedGPM=CROUND(BaseGPM * (SELECT b.GPM FROM du_ziniarastis b WHERE b.ID=du_ziniarastis_d.Z_ID) / 100, 2), DeductedPSD=CROUND(BasePSD * (SELECT b.PSDW FROM du_ziniarastis b WHERE b.ID=du_ziniarastis_d.Z_ID) / 100, 2), DeductedPSDSickLeave=CROUND(BasePSDSickLeave * (SELECT b.PSDW FROM du_ziniarastis b WHERE b.ID=du_ziniarastis_d.Z_ID) / 100, 2), DeductedSODRA=CROUND(BaseSODRA * (SELECT b.SD_d FROM du_ziniarastis b WHERE b.ID=du_ziniarastis_d.Z_ID) / 100, 2), ContributionPSD=CROUND(BasePSD * (SELECT b.PSDE FROM du_ziniarastis b WHERE b.ID=du_ziniarastis_d.Z_ID) / 100, 2), ContributionSODRA=CROUND(BaseSODRA * (SELECT b.SD_v FROM du_ziniarastis b WHERE b.ID=du_ziniarastis_d.Z_ID) / 100, 2), ContributionGuaranteeFund=CROUND(BaseGuaranteeFund * (SELECT b.Garant FROM du_ziniarastis b WHERE b.ID=du_ziniarastis_d.Z_ID) / 100, 2);</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchWorkerWagePayable</Key>
    <Statement>SELECT s.Metai, s.Men, MAX(s.SD_d), MAX(s.SD_v), MAX(s.PSDW), MAX(s.PSDE), MAX(s.Garant), MAX(s.GPM), MAX(s.P_S), MAX(s.Y_S), MAX(s.N_V), MAX(s.Nedarb), MAX(s.NPDF), MAX(d.Kruvis), MAX(d.VDU_val), MAX(d.VDU_dien), SUM(d.Val), SUM(d.PS), SUM(d.NV), SUM(d.YS), SUM(d.Prav), SUM(d.Dien), SUM(d.Atost), SUM(d.Atost_n), SUM(d.Nedarb), SUM(d.D_val), SUM(d.D_dien), MAX(d.DU), MAX(d.DU_tipas), MAX(d.Priedai), SUM(CASE WHEN d.Pr_tipas='k' THEN d.Premija ELSE 0 END) AS BonusPayQuarterly, SUM(CASE WHEN d.Pr_tipas&lt;&gt;'k' THEN d.Premija ELSE 0 END) AS BonusPayAnnual, SUM(d.Kitos_s), SUM(d.Kitos), SUM(d.CalculatedWage), SUM(d.CalculatedExtraPay), SUM(d.CalculatedHR), SUM(d.CalculatedON), SUM(d.CalculatedSC), SUM(d.CalculatedSickLeave), SUM(d.HolidayDaysCompensated), SUM(CASE WHEN d.AT_K&gt;0 THEN 0 ELSE d.P_Atost END) AS PayOutHoliday, SUM(CASE WHEN d.AT_K&gt;0 THEN d.P_Atost ELSE 0 END) AS PayOutUnusedHolidayCompensation, SUM(d.II), SUM(d.DU_pr + d.CalculatedSickLeave) AS PayOutTotal, SUM(d.DeductedGPM), SUM(d.DeductedPSD), SUM(d.DeductedPSDSickLeave), SUM(d.DeductedSODRA), SUM(d.Issk), SUM(d.ContributionSODRA), SUM(d.ContributionPSD), SUM(d.ContributionGuaranteeFund), SUM(d.DU_is + d.Avans), SUM(d.NPD), SUM(d.PNPD), SUM(d.VDU_v), SUM(d.VDU_d), SUM(d.VDU_u) FROM du_ziniarastis_d d LEFT JOIN du_ziniarastis s ON s.ID=d.Z_ID WHERE (d.AK=?PD OR (?PD&lt;1 AND d.DS_NR=?CN AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(?CS)))) AND (s.Metai&gt;?YF OR (s.Metai=?YF AND s.Men&gt;=?MF)) AND (s.Metai&lt;?YT OR (s.Metai=?YT AND s.Men&lt;=?MT)) GROUP BY s.Metai, s.Men ORDER BY s.Metai, s.Men;</Statement>
    <Objects>ActiveReports.WorkerWageInfoReport</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchWorkerWagePayments</Key>
    <Statement>SELECT w.Year, w.Month, SUM(w.WagePayed), SUM(w.WagePayable) FROM (SELECT 0 AS Year, 0 AS Month, IFNULL((SELECT SUM(d.DU_is) FROM du_ziniarastis_d d WHERE (d.AK=?PD OR (?PD&lt;1 AND d.DS_NR=?CN AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(?CS)))) AND NOT d.Ismoketa IS NULL AND d.Ismoketa &lt; ?DF), 0) + IFNULL((SELECT SUM(a.Suma) FROM d_avansai_d a WHERE (a.AK=?PD OR (?PD&lt;1 AND a.DS_NR=?CN AND UPPER(TRIM(a.DS_Serija))=UPPER(TRIM(?CS)))) AND NOT a.Ismok IS NULL AND a.Ismok &lt; ?DF), 0) AS WagePayed, (SELECT SUM(d.DU_is+d.Avans) FROM du_ziniarastis_d d LEFT JOIN du_ziniarastis c ON c.ID=d.Z_ID WHERE (d.AK=?PD OR (?PD&lt;1 AND d.DS_NR=?CN AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(?CS)))) AND (c.Metai &lt; ?YF OR (c.Metai=?YF AND c.Men &lt; ?MF))) AS WagePayable UNION ALL SELECT YEAR(d.Ismoketa) AS Year, MONTH(d.Ismoketa) AS Month, d.DU_is AS WagePayed, 0 AS WagePayable FROM du_ziniarastis_d d WHERE (d.AK=?PD OR (?PD&lt;1 AND d.DS_NR=?CN AND UPPER(TRIM(d.DS_Serija))=UPPER(TRIM(?CS)))) AND NOT d.Ismoketa IS NULL AND d.Ismoketa &gt;= ?DF AND d.Ismoketa &lt;= ?DT UNION ALL SELECT YEAR(a.Ismok) AS Year, MONTH(a.Ismok) AS Month, a.Suma AS WagePayed, 0 AS WagePayable FROM d_avansai_d a WHERE (a.AK=?PD OR (?PD&lt;1 AND a.DS_NR=?CN AND UPPER(TRIM(a.DS_Serija))=UPPER(TRIM(?CS)))) AND NOT a.Ismok IS NULL AND a.Ismok &gt;= ?DF AND a.Ismok &lt;= ?DT) AS w WHERE NOT w.Year IS NULL GROUP BY w.Year, w.Month ORDER BY w.Year, w.Month;</Statement>
    <Objects>ActiveReports.WorkerWageInfoReport</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchOperationBackgroundGeneral</Key>
    <Statement>SELECT t.ID, t.Turtas, t.Vnt, t.Saskaita AS AccountAcquisition, t.AccountAmortization AS AccountAmmortization, t.AccountValueDecrease AS AccountValueDecrease, t.AccountValueIncrease AS AccountValueIncrease, t.AccountRevaluedPortionAmmortization AS AccountRevaluedPortionAmmortization, b.Op_data, t.Isigijimo_dok, t.Likutine, t.ContinuedUsage, t.Kiekis, t.Vnt_kaina, t.TotalValue, t.AcquisitionRevaluedPortionUnitValue, t.AcquisitionRevaluedPortionTotalValue, t.AccumulatedAmortizationPerUnit, t.S_Amort, t.AccumulatedAmortizationRevaluedPortionPerUnit, t.AccumulatedAmortizationRevaluedPortionTotal, t.DefaultAmortPeriod AS AmmortizationPeriod, t.WasUsedMonths FROM turtas t LEFT JOIN bz b ON b.Op_ID=t.Isigijimo_dok WHERE t.ID=?AD ;</Statement>
    <Objects>Assets.OperationBackground</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchOperationBackgroundGeneralComplex</Key>
    <Statement>SELECT t.ID, t.Turtas, t.Vnt, t.Saskaita AS AccountAcquisition, t.AccountAmortization AS AccountAmmortization, t.AccountValueDecrease AS AccountValueDecrease, t.AccountValueIncrease AS AccountValueIncrease, t.AccountRevaluedPortionAmmortization AS AccountRevaluedPortionAmmortization, b.Op_data, t.Isigijimo_dok, t.Likutine, t.ContinuedUsage, t.Kiekis, t.Vnt_kaina, t.TotalValue, t.AcquisitionRevaluedPortionUnitValue, t.AcquisitionRevaluedPortionTotalValue, t.AccumulatedAmortizationPerUnit, t.S_Amort, t.AccumulatedAmortizationRevaluedPortionPerUnit, t.AccumulatedAmortizationRevaluedPortionTotal, t.DefaultAmortPeriod AS AmmortizationPeriod, t.WasUsedMonths FROM turtas_op d LEFT JOIN turtas t ON t.ID=d.T_ID LEFT JOIN bz b ON b.Op_ID=t.Isigijimo_dok WHERE d.IsComplexAct=?CD ;</Statement>
    <Objects>Assets.OperationBackground</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchOperationBackgroundDeltas</Key>
    <Statement>SELECT t.T_ID, t.ID, t.OperationType, t.AccountOperationType, t.OperationDate, t.AccountCorresponding, t.UnitValueChange, t.AmmountChange, t.TotalValueChange, t.NewAmortizationPeriod, t.AmortizationCalculatedForMonths, t.AcquisitionAccountChange, t.AcquisitionAccountChangePerUnit, t.AmortizationAccountChange, t.AmortizationAccountChangePerUnit, t.ValueDecreaseAccountChange, t.ValueDecreaseAccountChangePerUnit, t.ValueIncreaseAccountChange, t.ValueIncreaseAccountChangePerUnit, t.ValueIncreaseAmmortizationAccountChange, t.ValueIncreaseAmmortizationAccountChangePerUnit FROM turtas_op t WHERE t.T_ID=?AD ORDER BY t.OperationDate;</Statement>
    <Objects>Assets.OperationBackground</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchOperationBackgroundDeltasComplex</Key>
    <Statement>SELECT t.T_ID, t.ID, t.OperationType, t.AccountOperationType, t.OperationDate, t.AccountCorresponding, t.UnitValueChange, t.AmmountChange, t.TotalValueChange, t.NewAmortizationPeriod, t.AmortizationCalculatedForMonths, t.AcquisitionAccountChange, t.AcquisitionAccountChangePerUnit, t.AmortizationAccountChange, t.AmortizationAccountChangePerUnit, t.ValueDecreaseAccountChange, t.ValueDecreaseAccountChangePerUnit, t.ValueIncreaseAccountChange, t.ValueIncreaseAccountChangePerUnit, t.ValueIncreaseAmmortizationAccountChange, t.ValueIncreaseAmmortizationAccountChangePerUnit FROM turtas_op d LEFT JOIN turtas_op t ON t.T_ID=d.T_ID WHERE d.IsComplexAct=?CD ORDER BY t.T_ID, t.OperationDate;</Statement>
    <Objects>Assets.OperationBackground</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLongTermAssetComplexOperationIdByJournalEntryId</Key>
    <Statement>SELECT t.IsComplexAct FROM turtas_op t WHERE t.JE_ID=?JD LIMIT 1;</Statement>
    <Objects>Assets.OperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchAssetOperationPersistenceObjectList</Key>
    <Statement>SELECT o.ID, o.T_ID, o.OperationType, o.AccountOperationType, o.OperationDate, o.IsComplexAct, o.Content, o.AccountCorresponding, o.DocNo, o.UnitValueChange, o.AmmountChange, o.TotalValueChange, o.NewAmortizationPeriod, o.AmortizationCalculations, o.RevaluedPortionUnitValueChange, o.RevaluedPortionTotalValueChange, o.AcquisitionAccountChange, o.AcquisitionAccountChangePerUnit, o.AmortizationAccountChange, o.AmortizationAccountChangePerUnit, o.ValueDecreaseAccountChange, o.ValueDecreaseAccountChangePerUnit, o.ValueIncreaseAccountChange, o.ValueIncreaseAccountChangePerUnit, o.ValueIncreaseAmmortizationAccountChange, o.ValueIncreaseAmmortizationAccountChangePerUnit, o.AmortizationCalculatedForMonths, o.InsertDate, o.UpdateDate, IFNULL((SELECT COUNT(q.ID) FROM turtas_op q WHERE q.ID&lt;&gt;o.ID AND q.T_ID=o.T_ID AND q.OperationType='nau' AND q.OperationDate &lt; o.OperationDate), 0) + IFNULL((SELECT w.ContinuedUsage FROM turtas w WHERE w.ID=o.T_ID), 0) AS PreviousUsageCount, o.JE_ID, b.Op_ID, b.Op_Dok, b.Op_data, b.Op_turinys, b.Op_dok_rusis, p.ID, p.Pavad, p.Kodas, b.Op_korespond, (SELECT CROUND(IFNULL(SUM(d.Op_suma), 0) / 2, 2) FROM bzdata d WHERE d.Op_ID_BZ=b.Op_ID) AS SumBookEntries FROM turtas_op o LEFT JOIN bz b ON b.Op_ID=o.JE_ID LEFT JOIN asmenys p ON p.ID=b.Op_analitika WHERE o.IsComplexAct=?OD GROUP BY o.ID;</Statement>
    <Objects>Assets.OperationPersistenceObject</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchLongTermAssetList</Key>
    <Statement>SELECT t.Turtas, t.Vnt, t.Grupe, t.CustomGroupID, g.Name, t.InvNr, t.Isigijimo_dok, b.Op_data, b.Op_Dok, b.Op_turinys, b.Op_dok_rusis, t.Saskaita, t.AccountAmortization, t.AccountValueDecrease, t.AccountValueIncrease, t.AccountRevaluedPortionAmmortization, t.Likutine, t.DefaultAmortPeriod, t.Vnt_kaina, t.Kiekis, t.TotalValue, t.AcquisitionRevaluedPortionUnitValue, t.AcquisitionRevaluedPortionTotalValue, t.S_Amort, t.AccumulatedAmortizationPerUnit, t.AccumulatedAmortizationRevaluedPortionTotal, t.AccumulatedAmortizationRevaluedPortionPerUnit, t.ContinuedUsage, t.WasUsedMonths, t.InsertDate, t.UpdateDate, t.ID FROM turtas t LEFT JOIN bz b ON b.Op_ID=t.Isigijimo_dok LEFT JOIN longtermassetcustomgroups g ON g.ID=t.CustomGroupID WHERE b.Op_dok_rusis='lik';</Statement>
    <Objects>Assets.LongTermAssetList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchTransferOfBalanceData</Key>
    <Statement>SELECT b.Op_ID, b.Op_data FROM bz b WHERE b.Op_dok_rusis='lik';</Statement>
    <Objects>Assets.LongTermAssetsTransferOfBalance</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchNameInfoList</Key>
    <Statement>SELECT DISTINCT 1 AS TypeID, t.Grupe FROM turtas t ORDER BY t.Grupe;</Statement>
    <Objects>HelperLists.NameInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>FetchCodeInfoList</Key>
    <Statement>SELECT b.TypeID AS TypeID, b.CodeValue AS CodeValue FROM (SELECT DISTINCT 0 AS TypeID, d.Kodas AS CodeValue FROM d_kitos d) b WHERE NOT CodeValue IS NULL AND CodeValue&gt;0 UNION SELECT c.TypeID AS TypeID, c.CodeValue AS CodeValue FROM (SELECT DISTINCT 1 AS TypeID, d.KodasSD AS CodeValue FROM d_kitos d) AS c WHERE NOT CodeValue IS NULL AND CodeValue&gt;0 ORDER BY TypeID, CodeValue;</Statement>
    <Objects>HelperLists.CodeInfoList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeAccounts1</Key>
    <Statement>UPDATE saskaitupl SET fs_id=IFNULL((SELECT f.ID FROM financialstatementsstructure f WHERE UPPER(TRIM(f.Name)) = UPPER(TRIM(Rusis)) LIMIT 1), 0);</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeAccounts2</Key>
    <Statement>UPDATE saskaitupl SET Rusis='';</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>RemoveAccountsReferences</Key>
    <Statement>UPDATE saskaitupl SET fs_id=0 WHERE fs_id=?CD ;</Statement>
    <Objects>General.ConsolidatedReportItem</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>DefaultAccountsAlreadyExist</Key>
    <Statement>SELECT COUNT(*) FROM companyaccounts;</Statement>
    <Objects>General.AccountList</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeAssetOperationDocNo1</Key>
    <Statement>UPDATE turtas_op SET DocNo=(CASE WHEN ActNumber&gt;0 THEN ActNumber ELSE '' END);</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpgradeAssetOperationDocNo2</Key>
    <Statement>UPDATE turtas_op SET ActNumber=0;</Statement>
    <Objects>Administration.CustomDatabaseStructureErrorManager</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>UpdateWarehouseGeneral</Key>
    <Statement>UPDATE warehouses SET Name=?AA, Location=?AB, Description=?AC, IsObsolete=?AE WHERE ID=?WD ;</Statement>
    <Objects>Goods.Warehouse</Objects>
  </MySQL_Statement>
  <MySQL_Statement>
    <Key>CheckIfProductionCalculationUpdateDateChanged</Key>
    <Statement>SELECT k.UpdateDate FROM kalkuliac k WHERE k.ID=?CD ;</Statement>
    <Objects>Goods.ProductionCalculation</Objects>
  </MySQL_Statement>
</NewDataSet>